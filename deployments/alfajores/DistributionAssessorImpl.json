{
  "address": "0x313Fb4b9ebC9a28D44fE73c961E0DCf6d77C06C5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAY_LENGTH_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOUR_LENGTH_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_SCALING_FACTOR_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_SCALING_FACTOR_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINUTE_LENGTH_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YEAR_LENGTH_IN_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YEAR_LENGTH_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "investors",
          "type": "address[]"
        }
      ],
      "name": "calcAssetValue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "principals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "interests",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investor",
          "type": "address"
        }
      ],
      "name": "calcAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "calcCorrespondingAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "investors",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "calcCorrespondingAssetValue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "principals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "interests",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "calcCorrespondingTotalAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "calcSeniorAssetValue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "calcTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "annualInterestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTermTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "chargeInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentPrincipalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_annualInterestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTermTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "chargeLendingInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getCashBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISecuritizationPool",
          "name": "securitizationPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "getJOTTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSOTTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cfc767351c9ccf7ef730411e7a5c319e34b79bf24b834553a1f0a7863f0d569",
  "receipt": {
    "to": null,
    "from": "0x9C469Ff6d548D0219575AAc9c26Ac041314AE2bA",
    "contractAddress": "0x313Fb4b9ebC9a28D44fE73c961E0DCf6d77C06C5",
    "transactionIndex": 2,
    "gasUsed": "3538127",
    "logsBloom": "0x
    "blockHash": "0xef52701d745da7abab7de0ac19101e2f6dd4b88bc44d653956f560a02b48a9cb",
    "transactionHash": "0x3cfc767351c9ccf7ef730411e7a5c319e34b79bf24b834553a1f0a7863f0d569",
    "logs": [],
    "blockNumber": 13834680,
    "cumulativeGasUsed": "3641039",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "593488225a0c18e9f1502b055efe47cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY_LENGTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUR_LENGTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_SCALING_FACTOR_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_SCALING_FACTOR_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_LENGTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR_LENGTH_IN_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR_LENGTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"}],\"name\":\"calcAssetValue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"principals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interests\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"calcAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calcCorrespondingAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calcCorrespondingAssetValue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"principals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interests\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calcCorrespondingTotalAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calcSeniorAssetValue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"calcTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTermTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"chargeInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTermTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"chargeLendingInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCashBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISecuritizationPool\",\"name\":\"securitizationPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"getJOTTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getSOTTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/pool/DistributionAssessor.sol\":\"DistributionAssessor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x5f05971438d99186efbbc0062cd8cca0288f77875ed1b1f93fae6d355fc67241\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\",\"keccak256\":\"0x6b8016a5b70f79830437a5a1c3a1918243b6711692eb0d019d20d4af3e6716e8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x00a36a453484b7145a0d4a0c64daea248a7e806e6be4d7bbae1032a328777c82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xce2d5b25063e871aeca913786040a56117d16f01a819fbdc0b726128b6cbe25a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155PausableUpgradeable is Initializable, ERC1155Upgradeable, PausableUpgradeable {\\n    function __ERC1155Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC1155Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1f8ca7c1afca223c20500d3d511e77d336ea91f9b154b998682ad7719cd795cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb04849e624ffff85de1ee3d541aaa058ed9323a26200e34dd443fc46a642ba56\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/presets/ERC1155PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC1155PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC1155} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC1155PresetMinterPauserUpgradeable is Initializable, ContextUpgradeable, AccessControlEnumerableUpgradeable, ERC1155BurnableUpgradeable, ERC1155PausableUpgradeable {\\n    function initialize(string memory uri) public virtual initializer {\\n        __ERC1155PresetMinterPauser_init(uri);\\n    }\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\\n     * deploys the contract.\\n     */\\n    function __ERC1155PresetMinterPauser_init(string memory uri) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri);\\n        __Pausable_init_unchained();\\n        __ERC1155PresetMinterPauser_init_unchained(uri);\\n    }\\n\\n    function __ERC1155PresetMinterPauser_init_unchained(string memory) internal onlyInitializing {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerableUpgradeable, ERC1155Upgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable, ERC1155PausableUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8a9a7b9683d7197660c2f5d392efa2c9efe39e52e3b6d4d8ef244d694b7df896\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x417a6f201d6b0e3872979beca22f173ca518ef826fafb23b8d5b93bf7e42192d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\\n    function __ERC721Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC721Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0a4f29bd44dd1ffdea9e537800a26b39fabbdba29bb8633b7643a95c49699147\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC721PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC721PresetMinterPauserAutoIdUpgradeable is\\n    Initializable, ContextUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721BurnableUpgradeable,\\n    ERC721PausableUpgradeable\\n{\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) public virtual initializer {\\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\\n    }\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    CountersUpgradeable.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    function __ERC721PresetMinterPauserAutoId_init(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        __ERC721_init_unchained(name, symbol);\\n        __Pausable_init_unchained();\\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __ERC721PresetMinterPauserAutoId_init_unchained(\\n        string memory,\\n        string memory,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xde63ca9b5b4d05e40b47cf7ffb3dcc2eebeb4cbfa392b97f938ac527a48ae160\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x65283046c52a6bd3e57e456cc5eeab0dd86c00979b84495dc0109b609747fd16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/base/UntangledBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\nimport '../libraries/Configuration.sol';\\n\\nabstract contract UntangledBase is\\n    Initializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlEnumerableUpgradeable\\n{\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n\\n    function __UntangledBase__init(address owner) internal onlyInitializing {\\n        __UntangledBase__init_unchained(owner);\\n    }\\n\\n    function __UntangledBase__init_unchained(address owner) internal onlyInitializing {\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n\\n        if (owner == address(0)) owner = _msgSender();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n        _setupRole(OWNER_ROLE, owner);\\n\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x4ed4bff31d60d23c8f9979d27a005f6309e82f86b99da52d799801e4be92e5ca\",\"license\":\"MIT\"},\"contracts/interfaces/IDistributionAssessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract IDistributionAssessor {\\n    function getSOTTokenPrice(address securitizationPool, uint256 timestamp) public view virtual returns (uint256);\\n\\n    function calcTokenPrice(address pool, address tokenAddress) external view virtual returns (uint256);\\n\\n    function getCashBalance(address pool) public view virtual returns (uint256);\\n\\n    function calcAssetValue(\\n        address pool,\\n        address tokenAddress,\\n        address investor\\n    ) external view virtual returns (uint256 principal, uint256 interest);\\n\\n    function calcCorrespondingTotalAssetValue(\\n        address tokenAddress,\\n        address investor,\\n        uint256 timestamp\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x94deac5b9b644dd8efb41941462fea7c2045db3e7baf4b6db4e12dc58c8262c6\",\"license\":\"MIT\"},\"contracts/interfaces/IDistributionOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDistributionOperator {}\\n\",\"keccak256\":\"0x5dd8c3511bc05f5da13c46815fcfacce33db3f3c2c793883d3c41093dc7b5f32\",\"license\":\"MIT\"},\"contracts/interfaces/IDistributionTranche.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDistributionTranche {\\n    function redeem(\\n        address usr,\\n        address pool,\\n        address notesToken,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function redeemToken(\\n        address noteToken,\\n        address usr,\\n        uint256 tokenAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x36c6dc9f3270cef6b24fca8b541ccaf948e1d90f72ba68c5d195c02afd09a33e\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanInterestTermsContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\n\\nabstract contract ILoanInterestTermsContract {\\n    Registry public registry;\\n\\n    mapping(bytes32 => bool) public startedLoan;\\n\\n    mapping(bytes32 => uint256) public repaidPrincipalAmounts;\\n    mapping(bytes32 => uint256) public repaidInterestAmounts;\\n\\n    mapping(bytes32 => bool) public completedRepayment;\\n\\n    // Register to start Loan term for batch of agreement Ids\\n    function registerTermStart(bytes32 agreementId) public virtual returns (bool);\\n\\n    function getValueRepaidToDate(bytes32 agreementId) public view virtual returns (uint256, uint256);\\n\\n    function isCompletedRepayments(bytes32[] memory agreementIds) public view virtual returns (bool[] memory);\\n\\n    /**\\n     * Expected repayment value with Amortization of Interest and Principal\\n     * (AMORTIZATION) - will be used for repayment from Debtor\\n     */\\n    function getExpectedRepaymentValues(bytes32 agreementId, uint256 timestamp)\\n        public\\n        view\\n        virtual\\n        returns (uint256 expectedPrincipal, uint256 expectedInterest);\\n\\n    function getMultiExpectedRepaymentValues(bytes32[] memory agreementIds, uint256 timestamp)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function registerConcludeLoan(bytes32 agreementId) external virtual returns (bool);\\n\\n    /// When called, the registerRepayment function records the debtor's\\n    ///  repayment, as well as any auxiliary metadata needed by the contract\\n    ///  to determine ex post facto the value repaid (e.g. current USD\\n    ///  exchange rate)\\n    /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\\n    /// @param  payer address. The address of the payer.\\n    /// @param  beneficiary address. The address of the payment's beneficiary.\\n    /// @param  unitsOfRepayment uint. The units-of-value repaid in the transaction.\\n    /// @param  tokenAddress address. The address of the token with which the repayment transaction was executed.\\n    function registerRepayment(\\n        bytes32 agreementId,\\n        address payer,\\n        address beneficiary,\\n        uint256 unitsOfRepayment,\\n        address tokenAddress\\n    ) public virtual returns (uint256 remains);\\n\\n    function getInterestRate(bytes32 agreementId) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xf11df6ec37e41d8be0d242d2b0f2d85f49bd76e5960019d6cc8d92a9484e6f62\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\n\\nabstract contract ILoanKernel {\\n    Registry public registry;\\n\\n    /****************** */\\n    // CONSTANTS\\n    /****************** */\\n    enum Errors {\\n        // Debt has been already been issued\\n        DEBT_ISSUED, // 0\\n        // Order has already expired\\n        ORDER_EXPIRED, // 1\\n        // Debt issuance associated with order has been cancelled\\n        ISSUANCE_CANCELLED, // 2\\n        // Order has been cancelled\\n        ORDER_CANCELLED, // 3\\n        // Order parameters specify amount of creditor / debtor fees\\n        // that is not equivalent to the amount of underwriter / relayer fees\\n        ORDER_INVALID_INSUFFICIENT_OR_EXCESSIVE_FEES, // 4\\n        // Order parameters specify insufficient principal amount for\\n        // debtor to at least be able to meet his fees\\n        ORDER_INVALID_INSUFFICIENT_PRINCIPAL, // 5\\n        // Order parameters specify non zero fee for an unspecified recipient\\n        ORDER_INVALID_UNSPECIFIED_FEE_RECIPIENT, // 6\\n        // Order signatures are mismatched / malformed\\n        ORDER_INVALID_NON_CONSENSUAL, // 7\\n        // Insufficient balance or allowance for principal token transfer\\n        CREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT, // 8\\n        // Debt doesn't exists\\n        DEBT_NOT_EXISTS, // 9\\n        // Debtor it not completed repayment yet\\n        NOT_COMPLETED_REPAYMENT // 10\\n    }\\n\\n    enum FillingAddressesIndex {\\n        CREDITOR,\\n        PRINCIPAL_TOKEN_ADDRESS,\\n        REPAYMENT_ROUTER,\\n        TERM_CONTRACT,\\n        RELAYER\\n    }\\n\\n    enum FillingNumbersIndex {\\n        CREDITOR_FEE,\\n        ASSET_PURPOSE\\n    }\\n\\n    bytes32 public constant NULL_ISSUANCE_HASH = bytes32(0);\\n    bytes16 public constant NULL_COLLATERAL_INFO_HASH = bytes16(0);\\n    address public constant NULL_ADDRESS = address(0x0);\\n    //********************************************************* */\\n\\n    //****** */\\n    // EVENTS\\n    //****** */\\n    event LogDebtKernelError(uint8 indexed _errorId, bytes32 indexed _orderHash, string desc);\\n\\n    event LogFeeTransfer(address indexed payer, address token, uint256 amount, address indexed beneficiary);\\n    event LogDebtOrderFilled(\\n        bytes32 agreementId,\\n        uint256[] principalAmounts,\\n        address principalTokenAddress,\\n        address relayer\\n    );\\n\\n    event IssuedNewInputLoans(address[] debtor, uint256[] loanTokenIds);\\n\\n    event LogDebtOrderFilled(bytes32 _agreementId, uint256 _principal, address _principalToken, address _relayer);\\n\\n    //********************************************************* */\\n\\n    /*********** */\\n    // STRUCTURES\\n    /*********** */\\n\\n    struct LoanIssuance {\\n        address version;\\n        address termsContract;\\n        address[] debtors;\\n        bytes32[] termsContractParameters; // for different loans\\n        bytes32[] agreementIds;\\n        uint256[] salts;\\n    }\\n\\n    struct LoanOrder {\\n        LoanIssuance issuance;\\n        address principalTokenAddress;\\n        uint256[] principalAmounts;\\n        uint256 creditorFee;\\n        address relayer;\\n        uint256[] expirationTimestampInSecs;\\n        bytes32[] debtOrderHashes;\\n        uint8[] riskScores;\\n        uint8 assetPurpose;\\n    }\\n\\n    /*********** */\\n    // VARIABLES\\n    /*********** */\\n    mapping(bytes32 => bool) public issuanceCancelled;\\n    mapping(bytes32 => bool) public debtOrderCancelled;\\n    mapping(bytes32 => bool) public debtOrderCompleted;\\n}\\n\",\"keccak256\":\"0x61c156973eb233ad01ebaf25ee305d1d370e0d20482573455b7a7b12dc47e9cf\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\n\\nabstract contract ILoanRegistry {\\n    Registry public registry;\\n\\n    // loan -> debtors\\n    struct LoanEntry {\\n        address loanTermContract;\\n        address debtor;\\n        address principalTokenAddress;\\n        bytes32 termsParam; // actually inside this param was already included P token address\\n        uint256 salt;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 lastRepayTimestamp;\\n        uint256 expirationTimestamp;\\n        uint8 riskScore;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n    }\\n\\n    mapping(bytes32 => LoanEntry) public entries;\\n\\n    mapping(bytes32 => bool) public manualInterestLoan;\\n    mapping(bytes32 => uint256) public manualInterestAmountLoan;\\n\\n    mapping(bytes32 => bool) public completedLoans;\\n\\n    function initialize(Registry _registry) public virtual;\\n\\n    /**\\n     * Record new External Loan to blockchain\\n     */\\n    function insert(\\n        bytes32 tokenId,\\n        address termContract,\\n        address debtor,\\n        bytes32 termsContractParameter,\\n        address pTokenAddress,\\n        uint256 _salt,\\n        uint256 expirationTimestampInSecs,\\n        uint8[] calldata assetPurposeAndRiskScore\\n    ) external virtual returns (bool);\\n\\n    function getLoanDebtor(bytes32 tokenId) public view virtual returns (address);\\n\\n    function getLoanTermParams(bytes32 tokenId) public view virtual returns (bytes32);\\n\\n    function getPrincipalTokenAddress(bytes32 agreementId) public view virtual returns (address);\\n\\n    function getDebtor(bytes32 agreementId) public view virtual returns (address);\\n\\n    function getTermContract(bytes32 agreementId) public view virtual returns (address);\\n\\n    function getRiskScore(bytes32 agreementId) public view virtual returns (uint8);\\n\\n    function getAssetPurpose(bytes32 agreementId) public view virtual returns (Configuration.ASSET_PURPOSE);\\n\\n    /**\\n     * Returns the timestamp of the block at which a debt agreement was issued.\\n     */\\n    function getIssuanceBlockTimestamp(bytes32 agreementId) public view virtual returns (uint256 timestamp);\\n\\n    function getLastRepaymentTimestamp(bytes32 agreementId) public view virtual returns (uint256 timestamp);\\n\\n    /**\\n     * Returns the terms contract parameters of a given issuance\\n     */\\n    function getTermsContractParameters(bytes32 agreementId) public view virtual returns (bytes32);\\n\\n    function getExpirationTimestamp(bytes32 agreementId) public view virtual returns (uint256);\\n\\n    // Update timestamp of the last repayment from Debtor\\n    function updateLastRepaymentTimestamp(bytes32 agreementId, uint256 newTimestamp) public virtual;\\n\\n    /// @dev Get principal payment info before start doing repayment\\n    function principalPaymentInfo(bytes32 agreementId)\\n        public\\n        view\\n        virtual\\n        returns (address pTokenAddress, uint256 pAmount);\\n\\n    function setCompletedLoan(bytes32 agreementId) public virtual;\\n}\\n\",\"keccak256\":\"0xe3711fef9132926034c160f91069a55aa3a6e5be4f7933f9f9165d50877924ad\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanRepaymentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../base/UntangledBase.sol';\\nimport '../storage/Registry.sol';\\n\\nabstract contract ILoanRepaymentRouter is UntangledBase {\\n    Registry public registry;\\n\\n    enum Errors {\\n        DEBT_AGREEMENT_NONEXISTENT,\\n        PAYER_BALANCE_OR_ALLOWANCE_INSUFFICIENT,\\n        REPAYMENT_REJECTED_BY_TERMS_CONTRACT\\n    }\\n\\n    event LogOutputSubmit(bytes32 indexed _agreementId, uint256 indexed _tokenIndex, uint256 _totalAmount);\\n\\n    function initialize(Registry _registry) public virtual;\\n\\n    event LogRepayment(\\n        bytes32 indexed _agreementId,\\n        address indexed _payer,\\n        address indexed _beneficiary,\\n        uint256 _amount,\\n        address _token\\n    );\\n\\n    event LogRepayments(bytes32[] _agreementIds, address _payer, uint256[] _amounts);\\n\\n    event LogError(uint8 indexed _errorId, bytes32 indexed _agreementId);\\n\\n    function repayInBatch(\\n        bytes32[] calldata agreementIds,\\n        uint256[] calldata amounts,\\n        address tokenAddress\\n    ) external virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x64c8d05d3725bfcbe7f58064c967837321db8bad01a4946b1287a90064e4fc7b\",\"license\":\"MIT\"},\"contracts/interfaces/INoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\\n\\nabstract contract INoteToken is ERC20PresetMinterPauser {\\n    address public poolAddress;\\n    uint8 public noteTokenType;\\n\\n    uint8 internal _d;\\n}\\n\",\"keccak256\":\"0xe8cfd503b937c02b0223d4043eab9a558f67a61285326312ef801a2ccac7cfe7\",\"license\":\"MIT\"},\"contracts/interfaces/INoteTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\nimport '../tokens/ERC20/NoteToken.sol';\\n\\nabstract contract INoteTokenFactory {\\n    Registry public registry;\\n\\n    NoteToken[] public tokens;\\n\\n    mapping(address => bool) public isExistingTokens;\\n\\n    function changeMinterRole(address token, address newController) external virtual;\\n\\n    function createToken(\\n        address poolAddress,\\n        Configuration.NOTE_TOKEN_TYPE noteTokenType,\\n        uint8 _nDecimals\\n    ) external virtual returns (address);\\n}\\n\",\"keccak256\":\"0x56c87bd0f793b42fa31d05b85e5ec14f241c4e8941480f31cb4412baf859c862\",\"license\":\"MIT\"},\"contracts/interfaces/ISecuritizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\nimport './ISecuritizationPool.sol';\\n\\nabstract contract ISecuritizationManager {\\n    Registry public registry;\\n\\n    mapping(address => bool) public isExistingPools;\\n    ISecuritizationPool[] public pools;\\n\\n    mapping(address => address) public poolToSOT;\\n    mapping(address => address) public poolToJOT;\\n\\n    mapping(address => bool) public isExistingTGEs;\\n\\n    bytes32 public constant POOL_CREATOR = keccak256('POOL_CREATOR');\\n}\\n\",\"keccak256\":\"0xec7a4d8f03605faa08ae5ec6c09a662f0d665118c49ac8e9bb1ac118bdd26de0\",\"license\":\"MIT\"},\"contracts/interfaces/ISecuritizationPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\nimport '../base/UntangledBase.sol';\\n\\nabstract contract ISecuritizationPool is UntangledBase {\\n    Registry public registry;\\n\\n    bytes32 public constant ORIGINATOR_ROLE = keccak256('ORIGINATOR_ROLE');\\n\\n    address public tgeAddress;\\n    address public secondTGEAddress;\\n    address public sotToken;\\n    address public jotToken;\\n    address public underlyingCurrency;\\n\\n    //CycleState\\n    CycleState public state;\\n\\n    uint64 public openingBlockTimestamp;\\n    uint64 public termLengthInSeconds;\\n\\n    // for lending operation\\n    uint256 public totalLockedDistributeBalance;\\n    // token address -> total locked\\n    mapping(address => uint256) public totalLockedRedeemBalances;\\n    // token address -> user -> locked\\n    mapping(address => mapping(address => uint256)) public lockedDistributeBalances;\\n    mapping(address => mapping(address => uint256)) public lockedRedeemBalances;\\n\\n    // user -> amount\\n    mapping(address => uint256) public paidInterestAmountSOT;\\n    mapping(address => uint256) public lastRepayTimestampSOT;\\n\\n    // for base (sell-loan) operation\\n    uint256 public principalAmountSOT;\\n    uint256 public paidPrincipalAmountSOT;\\n    uint32 public interestRateSOT; // Annually, support 4 decimals num\\n\\n    uint32 public minFirstLossCushion;\\n\\n    //RiskScores\\n    RiskScore[] public riskScores;\\n\\n    //ERC721 Assets\\n    NFTAsset[] public nftAssets;\\n\\n    address[] public tokenAssetAddresses;\\n    mapping(address => bool) public existsTokenAssetAddress;\\n\\n    mapping(address => uint256) public paidPrincipalAmountSOTByInvestor;\\n\\n    // by default it is address(this)\\n    address public pot;\\n\\n    /** ENUM & STRUCT */\\n    enum CycleState {\\n        INITIATED,\\n        CROWDSALE,\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    struct NFTAsset {\\n        address tokenAddress;\\n        uint256 tokenId;\\n    }\\n\\n    struct RiskScore {\\n        uint32 daysPastDue;\\n        uint32 advanceRate;\\n        uint32 penaltyRate;\\n        uint32 interestRate;\\n        uint32 probabilityOfDefault;\\n        uint32 lossGivenDefault;\\n        uint32 gracePeriod;\\n        uint32 collectionPeriod;\\n        uint32 writeOffAfterGracePeriod;\\n        uint32 writeOffAfterCollectionPeriod;\\n    }\\n\\n    function initialize(\\n        Registry _registry,\\n        address _currency,\\n        uint32 _minFirstLossCushion\\n    ) public virtual;\\n\\n    /** GETTER */\\n    function getNFTAssetsLength() public view virtual returns (uint256);\\n\\n    function getTokenAssetAddresses() public view virtual returns (address[] memory);\\n\\n    function getTokenAssetAddressesLength() public view virtual returns (uint256);\\n\\n    function getRiskScoresLength() public view virtual returns (uint256);\\n\\n    function isClosedState() public view virtual returns (bool);\\n\\n    function hasFinishedRedemption() public view virtual returns (bool);\\n\\n    /** EXTERNAL */\\n    function setPot(address _pot) external virtual;\\n\\n    function setupRiskScores(\\n        uint32[] calldata _daysPastDues,\\n        uint32[] calldata _ratesAndDefaults,\\n        uint32[] calldata _periodsAndWriteOffs\\n    ) external virtual;\\n\\n    function exportAssets(\\n        address tokenAddress,\\n        address toPoolAddress,\\n        uint256[] calldata tokenIds\\n    ) external virtual;\\n\\n    function withdrawAssets(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds,\\n        address[] calldata recipients\\n    ) external virtual;\\n\\n    function collectAssets(\\n        address tokenAddress,\\n        address from,\\n        uint256[] calldata tokenIds\\n    ) external virtual;\\n\\n    function collectERC20Assets(\\n        address[] calldata tokenAddresses,\\n        address[] calldata senders,\\n        uint256[] calldata amounts\\n    ) external virtual;\\n\\n    function withdrawERC20Assets(\\n        address[] calldata tokenAddresses,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts\\n    ) external virtual;\\n\\n    function claimERC20Assets(address[] calldata tokenAddresses) external virtual;\\n\\n    function claimCashRemain(address recipientWallet) external virtual;\\n\\n    function injectTGEAddress(\\n        address _tgeAddress,\\n        address _tokenAddress,\\n        Configuration.NOTE_TOKEN_TYPE _noteToken\\n    ) external virtual;\\n\\n    function startCycle(\\n        uint64 _termLengthInSeconds,\\n        uint256 _principalAmountForSOT,\\n        uint32 _interestRateForSOT,\\n        uint64 _timeStartEarningInterest\\n    ) external virtual;\\n\\n    function setInterestRateForSOT(uint32 _interestRateSOT) external virtual;\\n\\n    function increaseLockedDistributeBalance(\\n        address tokenAddress,\\n        address investor,\\n        uint256 currency,\\n        uint256 token\\n    ) external virtual;\\n\\n    function decreaseLockedDistributeBalance(\\n        address tokenAddress,\\n        address investor,\\n        uint256 currency,\\n        uint256 token\\n    ) external virtual;\\n\\n    function redeem(\\n        address usr,\\n        address notesToken,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x0999ef3bd067dcae87b569bef13cb4219358a5851a65b783bc3f00f386aaf95b\",\"license\":\"MIT\"},\"contracts/interfaces/ISecuritizationPoolValueService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISecuritizationPoolValueService {\\n    function getOutstandingPrincipalCurrencyByInvestor(address pool, address investor) external view returns (uint256);\\n\\n    function getExpectedAssetsValue(address poolAddress, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 expectedAssetsValue);\\n}\\n\",\"keccak256\":\"0x2f8e27b4f2d39eb3fe7c7b233905638a28979968e095e3f1a70ece402703c9c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISupplyChainManagementProgram.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nabstract contract ISupplyChainManagementProgram is Initializable, PausableUpgradeable, AccessControlEnumerableUpgradeable {\\n    Registry public registry;\\n\\n    bytes32 public constant PRICE_FEED_ROLE = keccak256('PRICE_FEED_ROLE');\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\n\\n    mapping(uint256 => CollateralProject) public collateralProjects;\\n    mapping(uint256 => bool) public isExistingProjects;\\n\\n    mapping(uint256 => mapping(address => bool)) public projectToLenders;\\n    mapping(uint256 => mapping(address => bool)) public projectToTraders;\\n    mapping(uint256 => mapping(address => bool)) public projectToExecutors;\\n    mapping(address => bool) public isExistingManager;\\n\\n    //Id of project -> id of project-commodity => existed\\n    mapping(uint256 => mapping(uint256 => bool)) public projectToExistedProjectCommodity;\\n    //Id of project -> bytes32 of movement\\n    mapping(uint256 => mapping(bytes32 => Movement)) public projectToMovements;\\n    mapping(uint256 => mapping(bytes32 => bool)) public projectToExistedMovements;\\n\\n    //Id of project-commodity- => price\\n    mapping(uint256 => uint256) public projectCommodityToPrice;\\n    //Id of project-commodity => list agreements id\\n    mapping(uint256 => bytes32[]) public projectCommodityToAgreements;\\n    //Id of project-commodity -> commodity symbol hash\\n    mapping(uint256 => bytes32) public projectCommodityToCommodity;\\n    //Id of project-commodity -> project id\\n    mapping(uint256 => uint256) public projectCommodityToProject;\\n\\n    struct CollateralProject {\\n        address managerAddress;\\n        address projectWallet;\\n        bytes32 companyHash;\\n    }\\n\\n    enum MovementState {INITIATED, APPROVED, EXECUTED}\\n    enum MovementType {UNKNOWN, DEPOSIT, WITHDRAW}\\n\\n    struct Movement {\\n        uint256 projectCommodityId;\\n        MovementType movementType;\\n        MovementState state;\\n        uint quantity;\\n        address initiator;\\n        address approver;\\n        address executor;\\n    }\\n\\n    function initialize(\\n        Registry _registry\\n    ) public virtual;\\n\\n    //************  */\\n    // EXTERNAL\\n    //************  *\\n    // Create new CMA project\\n    function newProject(\\n        uint256 projectId,\\n        string memory companyId,\\n        address projectWallet\\n    ) public virtual;\\n\\n    function updateCompanyId(uint256 projectId, string memory companyId) public virtual;\\n\\n    function addCommodity(\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        string memory commodity,\\n        uint256 initBalance\\n    ) public virtual;\\n\\n    // Add Trader for CMA project\\n    function addTrader(uint256 projectId, address trader)\\n    public virtual;\\n\\n    // Add Lender for CMA project\\n    function addLender(uint256 projectId, address lender)\\n    public virtual;\\n\\n    // Add Executor for CMA project\\n    function addExecutor(uint256 projectId, address executor)\\n    public virtual;\\n\\n    // Remove Trader for CMA project\\n    /** @dev NOTE: delete array element but still occupy storage space */\\n    function removeTrader(uint256 projectId, address trader)\\n    public virtual;\\n\\n    // Remove Lender for CMA project\\n    function removeLender(uint256 projectId, address lender)\\n    public virtual;\\n\\n    // Remove Executor for CMA project\\n    function removeExecutor(uint256 projectId, address executor)\\n    public virtual;\\n\\n    function isTrader(uint256 projectId, address account) public view virtual returns (bool);\\n\\n    function isLender(uint256 projectId, address account) public view virtual returns (bool);\\n\\n    function isExecutor(uint256 projectId, address account) public view virtual returns (bool);\\n\\n    function initMovement(\\n        string memory movementId,\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        uint8 _movementType\\n    ) public virtual;\\n\\n    function approveMovement(\\n        string memory movementId,\\n        uint256 projectId\\n    ) public virtual;\\n\\n    function executeMovement(\\n        string memory movementId,\\n        uint256 projectId,\\n        uint _quantity\\n    ) public virtual;\\n\\n    function updateStateMovement(\\n        string memory movementId,\\n        uint256 projectId,\\n        MovementState _movementState,\\n        uint _quantity,\\n        address caller\\n    ) public virtual;\\n\\n    function isProjectExisting(uint256 projectId) public view virtual returns (bool);\\n\\n    /**\\n    * @dev NOTE: memory & public is not recommeneded for function which have input param is arrays, calldata & external function instead\\n     */\\n    function bulkInsertCompletedMovement(\\n        bytes32[] memory movementIdsHashes,\\n        uint256[] memory projectIds,\\n        uint256[] memory projectCommodityIds,\\n        uint8[] memory movementTypes,\\n        address[] memory traders,\\n        address[] memory executors,\\n        uint[] memory quantities\\n    ) public virtual;\\n\\n    function addExistedBalance(\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        address trader,\\n        uint quantity\\n    ) public virtual;\\n\\n    function removeExistedBalance(\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        address trader,\\n        uint quantity\\n    ) public virtual;\\n\\n    function getCommodityPrice(uint256 projectCommodityId) public view virtual returns (uint256);\\n\\n    function updateCommodityPrice(uint256 projectCommodityId, uint256 price) public virtual;\\n\\n    function insertAgreementToCommodity(uint256 projectCommodityId, bytes32 agreementId) public virtual;\\n\\n    function removeAgreementFromCommodity(uint256 projectCommodityId, bytes32 agreementId) public virtual;\\n\\n    function getAgreementsOfProjectCommodity(uint256 projectCommodityId) public view virtual returns (bytes32[] memory);\\n\\n/*\\n    function getProjectDetail(uint256 projectId) public view virtual\\n    returns (address managerAddress, address projectWallet, bytes32 companyHash);\\n*/\\n\\n/*\\n    function getMovementDetail(string memory movementId, uint256 projectId) public view virtual\\n    returns (\\n        uint256 projectCommodityId,\\n        MovementType movementType,\\n        MovementState state,\\n        uint256 quantity,\\n        address initiator,\\n        address approver,\\n        address executor\\n    );\\n*/\\n\\n/*\\n    function getProjectCommodityDetail(uint256 projectCommodityId) public view virtual\\n    returns (\\n        uint256 projectId,\\n        uint256 price,\\n        bytes32 commoditySymbol\\n    );\\n*/\\n\\n}\",\"keccak256\":\"0x0b47b28c9300e4d8de9c57fe20133c5dc94445c9975c4763bbf0e33f8f470f5c\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenGenerationEventFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\n\\nabstract contract ITokenGenerationEventFactory {\\n    Registry public registry;\\n\\n    address[] public tgeAddresses;\\n\\n    mapping(address => bool) public isExistingTge;\\n\\n    function createNewSaleInstance(\\n        address issuerTokenController,\\n        address pool,\\n        address token,\\n        address currency,\\n        uint8 saleType,\\n        bool longSale\\n    ) external virtual returns (address);\\n}\\n\",\"keccak256\":\"0xedf3a709dc88f8981f16f229b35d7e4958203697d96b5c799650cd1a2fceb75d\",\"license\":\"MIT\"},\"contracts/interfaces/IUntangledERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol';\\nimport '../storage/Registry.sol';\\n\\nabstract contract IUntangledERC721 is ERC721PresetMinterPauserAutoIdUpgradeable {\\n    Registry public registry;\\n\\n    function __UntangledERC721__init(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        __UntangledERC721__init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function __UntangledERC721__init_unchained(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) internal onlyInitializing {\\n        __ERC721PresetMinterPauserAutoId_init_unchained(name, symbol, baseTokenURI);\\n    }\\n\\n    function mint(address to, uint256 tokenId) public virtual onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId);\\n    }\\n\\n    function getTotalExpectedRepaymentValue(uint256 agreementId, uint256 timestamp)\\n        external\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getExpirationTimestamp(uint256 agreementId) external view virtual returns (uint256);\\n\\n    function getInterestRate(uint256 agreementId) external view virtual returns (uint256);\\n\\n    function getRiskScore(uint256 agreementId) external view virtual returns (uint8);\\n\\n    function getAssetPurpose(uint256 agreementId) public view virtual returns (Configuration.ASSET_PURPOSE);\\n}\\n\",\"keccak256\":\"0xf2e385ff5d1f01b998e59784fe5ff65064ce1c75719ba8f462c2c41078bd7b1b\",\"license\":\"MIT\"},\"contracts/libraries/ConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../storage/Registry.sol';\\nimport './Configuration.sol';\\n\\nimport '../interfaces/ISecuritizationManager.sol';\\nimport '../interfaces/ISecuritizationPool.sol';\\nimport '../interfaces/INoteTokenFactory.sol';\\nimport '../interfaces/ITokenGenerationEventFactory.sol';\\nimport '../interfaces/IUntangledERC721.sol';\\nimport '../interfaces/IDistributionOperator.sol';\\nimport '../interfaces/IDistributionTranche.sol';\\nimport '../interfaces/ILoanRegistry.sol';\\nimport '../interfaces/ILoanInterestTermsContract.sol';\\nimport '../interfaces/ILoanRepaymentRouter.sol';\\nimport '../interfaces/ILoanKernel.sol';\\nimport '../interfaces/IDistributionAssessor.sol';\\nimport '../interfaces/ISecuritizationPoolValueService.sol';\\nimport '../protocol/note-sale/MintedIncreasingInterestTGE.sol';\\nimport '../protocol/note-sale/MintedNormalTGE.sol';\\nimport '../tokens/ERC1155/CollateralManagementToken.sol';\\nimport '../protocol/cma/SupplyChainManagementProgram.sol';\\nimport '../protocol/loan/inventory/InventoryCollateralizer.sol';\\nimport '../protocol/loan/inventory/InventoryInterestTermsContract.sol';\\nimport '../protocol/loan/inventory/InventoryLoanKernel.sol';\\nimport '../protocol/loan/inventory/InventoryLoanRegistry.sol';\\nimport '../protocol/loan/inventory/InventoryLoanRepaymentRouter.sol';\\nimport '../protocol/loan/invoice/InvoiceCollateralizer.sol';\\nimport '../protocol/loan/invoice/InvoiceDebtRegistry.sol';\\nimport '../protocol/loan/invoice/InvoiceFinanceInterestTermsContract.sol';\\nimport '../protocol/loan/invoice/InvoiceLoanKernel.sol';\\nimport '../protocol/loan/invoice/InvoiceLoanRepaymentRouter.sol';\\n\\nlibrary ConfigHelper {\\n    function getAddress(Registry registry, Configuration.CONTRACT_TYPE contractType) internal view returns (address) {\\n        return registry.getAddress(uint8(contractType));\\n    }\\n\\n    function getSecuritizationManager(Registry registry) internal view returns (ISecuritizationManager) {\\n        return ISecuritizationManager(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER));\\n    }\\n\\n    function getSecuritizationPool(Registry registry) internal view returns (ISecuritizationPool) {\\n        return ISecuritizationPool(getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL));\\n    }\\n\\n    function getNoteTokenFactory(Registry registry) internal view returns (INoteTokenFactory) {\\n        return INoteTokenFactory(getAddress(registry, Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY));\\n    }\\n\\n    function getTokenGenerationEventFactory(Registry registry) internal view returns (ITokenGenerationEventFactory) {\\n        return\\n            ITokenGenerationEventFactory(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY)\\n            );\\n    }\\n\\n    function getDistributionOperator(Registry registry) internal view returns (IDistributionOperator) {\\n        return IDistributionOperator(getAddress(registry, Configuration.CONTRACT_TYPE.DISTRIBUTION_OPERATOR));\\n    }\\n\\n    function getLoanAssetToken(Registry registry) internal view returns (IUntangledERC721) {\\n        return IUntangledERC721(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN));\\n    }\\n\\n    function getAcceptedInvoiceToken(Registry registry) internal view returns (AcceptedInvoiceToken) {\\n        return AcceptedInvoiceToken(getAddress(registry, Configuration.CONTRACT_TYPE.ACCEPTED_INVOICE_TOKEN));\\n    }\\n\\n    function getLoanRegistry(Registry registry) internal view returns (ILoanRegistry) {\\n        return ILoanRegistry(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_REGISTRY));\\n    }\\n\\n    function getLoanInterestTermsContract(Registry registry) internal view returns (ILoanInterestTermsContract) {\\n        return\\n            ILoanInterestTermsContract(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_INTEREST_TERMS_CONTRACT));\\n    }\\n\\n    function getLoanRepaymentRouter(Registry registry) internal view returns (ILoanRepaymentRouter) {\\n        return ILoanRepaymentRouter(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_REPAYMENT_ROUTER));\\n    }\\n\\n    function getLoanKernel(Registry registry) internal view returns (ILoanKernel) {\\n        return ILoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.LOAN_KERNEL));\\n    }\\n\\n    function getDistributionTranche(Registry registry) internal view returns (IDistributionTranche) {\\n        return IDistributionTranche(getAddress(registry, Configuration.CONTRACT_TYPE.DISTRIBUTION_TRANCHE));\\n    }\\n\\n    function getSecuritizationPoolValueService(Registry registry)\\n        internal\\n        view\\n        returns (ISecuritizationPoolValueService)\\n    {\\n        return\\n            ISecuritizationPoolValueService(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE)\\n            );\\n    }\\n\\n    function getDistributionAssessor(Registry registry) internal view returns (IDistributionAssessor) {\\n        return IDistributionAssessor(getAddress(registry, Configuration.CONTRACT_TYPE.DISTRIBUTION_ASSESSOR));\\n    }\\n\\n    function getMintedIncreasingInterestTGE(Registry registry) internal view returns (MintedIncreasingInterestTGE) {\\n        return\\n            MintedIncreasingInterestTGE(\\n                getAddress(registry, Configuration.CONTRACT_TYPE.MINTED_INCREASING_INTEREST_TGE)\\n            );\\n    }\\n\\n    function getMintedNormalTGE(Registry registry) internal view returns (MintedNormalTGE) {\\n        return\\n        MintedNormalTGE(\\n            getAddress(registry, Configuration.CONTRACT_TYPE.MINTED_NORMAL_TGE)\\n        );\\n    }\\n\\n    function getCollateralManagementToken(Registry registry) internal view returns (CollateralManagementToken) {\\n        return CollateralManagementToken(getAddress(registry, Configuration.CONTRACT_TYPE.COLLATERAL_MANAGEMENT_TOKEN));\\n    }\\n\\n    function getSupplyChainManagementProgram(Registry registry) internal view returns (SupplyChainManagementProgram) {\\n        return SupplyChainManagementProgram(getAddress(registry, Configuration.CONTRACT_TYPE.SUPPLY_CHAIN_MANAGEMENT_PROGRAM));\\n    }\\n\\n    function getInventoryLoanRegistry(Registry registry) internal view returns (InventoryLoanRegistry) {\\n        return InventoryLoanRegistry(getAddress(registry, Configuration.CONTRACT_TYPE.INVENTORY_LOAN_REGISTRY));\\n    }\\n\\n    function getInventoryCollateralizer(Registry registry) internal view returns (InventoryCollateralizer) {\\n        return InventoryCollateralizer(getAddress(registry, Configuration.CONTRACT_TYPE.INVENTORY_COLLATERALIZER));\\n    }\\n\\n    function getInventoryInterestTermsContract(Registry registry) internal view returns (InventoryInterestTermsContract) {\\n        return InventoryInterestTermsContract(getAddress(registry, Configuration.CONTRACT_TYPE.INVENTORY_INTEREST_TERMS_CONTRACT));\\n    }\\n\\n    function getInventoryLoanKernel(Registry registry) internal view returns (InventoryLoanKernel) {\\n        return InventoryLoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.INVENTORY_LOAN_KERNEL));\\n    }\\n\\n    function getInventoryLoanRepaymentRouter(Registry registry) internal view returns (InventoryLoanRepaymentRouter) {\\n        return InventoryLoanRepaymentRouter(getAddress(registry, Configuration.CONTRACT_TYPE.INVENTORY_LOAN_REPAYMENT_ROUTER));\\n    }\\n\\n    function getInvoiceDebtRegistry(Registry registry) internal view returns (InvoiceDebtRegistry) {\\n        return InvoiceDebtRegistry(getAddress(registry, Configuration.CONTRACT_TYPE.INVOICE_DEBT_REGISTRY));\\n    }\\n\\n    function getInvoiceCollateralizer(Registry registry) internal view returns (InvoiceCollateralizer) {\\n        return InvoiceCollateralizer(getAddress(registry, Configuration.CONTRACT_TYPE.INVOICE_COLLATERALIZER));\\n    }\\n\\n    function getInvoiceFinanceInterestTermsContract(Registry registry) internal view returns (InvoiceFinanceInterestTermsContract) {\\n        return InvoiceFinanceInterestTermsContract(getAddress(registry, Configuration.CONTRACT_TYPE.INVOICE_FINANCE_INTEREST_TERMS_CONTRACT));\\n    }\\n\\n    function getInvoiceLoanKernel(Registry registry) internal view returns (InvoiceLoanKernel) {\\n        return InvoiceLoanKernel(getAddress(registry, Configuration.CONTRACT_TYPE.INVOICE_LOAN_KERNEL));\\n    }\\n\\n    function getInvoiceLoanRepaymentRouter(Registry registry) internal view returns (InvoiceLoanRepaymentRouter) {\\n        return InvoiceLoanRepaymentRouter(getAddress(registry, Configuration.CONTRACT_TYPE.INVOICE_LOAN_REPAYMENT_ROUTER));\\n    }\\n}\\n\",\"keccak256\":\"0x644289bc7d0c1e95e339908f800d9afae92d09b43fe54dc598adfe9dbb834522\",\"license\":\"MIT\"},\"contracts/libraries/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Configuration {\\n    uint256 public constant PRICE_SCALING_FACTOR = 10**4;\\n\\n    // NEVER EVER CHANGE THE ORDER OF THESE!\\n    // You can rename or append. But NEVER change the order.\\n    enum CONTRACT_TYPE {\\n        SECURITIZATION_MANAGER,\\n        SECURITIZATION_POOL,\\n        NOTE_TOKEN_FACTORY,\\n        TOKEN_GENERATION_EVENT_FACTORY,\\n        DISTRIBUTION_OPERATOR,\\n        DISTRIBUTION_ASSESSOR,\\n        DISTRIBUTION_TRANCHE,\\n        LOAN_ASSET_TOKEN,\\n        ACCEPTED_INVOICE_TOKEN,\\n        LOAN_REGISTRY,\\n        LOAN_INTEREST_TERMS_CONTRACT,\\n        LOAN_REPAYMENT_ROUTER,\\n        LOAN_KERNEL,\\n        ERC20_TOKEN_REGISTRY,\\n        ERC20_TOKEN_TRANSFER_PROXY,\\n        SECURITIZATION_MANAGEMENT_PROJECT,\\n        SECURITIZATION_POOL_VALUE_SERVICE,\\n        MINTED_INCREASING_INTEREST_TGE,\\n        MINTED_NORMAL_TGE,\\n        COLLATERAL_MANAGEMENT_TOKEN,\\n        SUPPLY_CHAIN_MANAGEMENT_PROGRAM,\\n        INVENTORY_LOAN_REGISTRY,\\n        INVENTORY_COLLATERALIZER,\\n        INVENTORY_INTEREST_TERMS_CONTRACT,\\n        INVENTORY_LOAN_KERNEL,\\n        INVENTORY_LOAN_REPAYMENT_ROUTER,\\n        INVOICE_COLLATERALIZER,\\n        INVOICE_DEBT_REGISTRY,\\n        INVOICE_FINANCE_INTEREST_TERMS_CONTRACT,\\n        INVOICE_LOAN_KERNEL,\\n        INVOICE_LOAN_REPAYMENT_ROUTER\\n    }\\n\\n    enum NOTE_TOKEN_TYPE {\\n        SENIOR,\\n        JUNIOR\\n    }\\n\\n    enum ASSET_PURPOSE {\\n        SALE,\\n        PLEDGE\\n    }\\n}\\n\",\"keccak256\":\"0x47c4b0db0aa0abd096bbaab7760f784b73ff903121260b177c26b230f09de6b4\",\"license\":\"MIT\"},\"contracts/libraries/SignaturesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SignaturesLib {\\n\\n    bytes constant internal PREFIX = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n\\n    struct ECDSASignature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n    public\\n    pure\\n    returns (bool valid)\\n    {\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(PREFIX, hash));\\n        return ecrecover(prefixedHash, v, r, s) == signer;\\n    }\\n}\\n\",\"keccak256\":\"0x1536fe295fcb617a8ee10f1798980c2e56c904bfb12c0f9ef22b47feb9a6e0f4\",\"license\":\"MIT\"},\"contracts/libraries/Unpack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary Unpack {\\n\\n    function unpackPrincipalAmount(bytes32 term) internal\\n    pure\\n    returns (uint) {\\n        return uint(term & 0x00ffffffffffffffffffffffff00000000000000000000000000000000000000) >> 152;\\n    }\\n\\n    function unpackInterestRate(bytes32 term) internal\\n    pure\\n    returns (uint) {\\n        return uint(term & 0x00000000000000000000000000ffffff00000000000000000000000000000000) >> 128;\\n    }\\n\\n    function unpackAmortizationUnitType(bytes32 term) internal\\n    pure\\n    returns (uint) {\\n        return uint(term & term & 0x00000000000000000000000000000000f0000000000000000000000000000000) >> 124;\\n    }\\n\\n    function unpackTermLengthInAmortizationUnits(bytes32 term) internal\\n    pure\\n    returns (uint) {\\n        return uint(term & term & 0x000000000000000000000000000000000ffffffffffffffffffffffff0000000) >> 28;\\n    }\\n\\n    function unpackGracePeriodInDays(bytes32 term) internal\\n    pure\\n    returns (uint gracePeriodInDays) {\\n        return uint(term & term & 0x000000000000000000000000000000000000000000000000000000000ff00000) >> 20;\\n    }\\n}\\n\",\"keccak256\":\"0xc9fb46b2c173be9195bf97135950b23f3690f10d1a5270806c1a47dddccafd2c\",\"license\":\"MIT\"},\"contracts/libraries/Unpack16.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary Unpack16 {\\n\\n    function unpackCollateralTokenId(bytes16 collateralParams) internal\\n    pure\\n    returns (uint) {\\n        return uint(uint128(collateralParams) & 0xffffffff000000000000000000000000) >> 96;\\n    }\\n\\n    function unpackCollateralAmount(bytes16 collateralParams) internal\\n    pure\\n    returns (uint) {\\n        return uint(uint128(collateralParams) & 0x00000000ffffffffffffffffffffffff);\\n    }\\n}\\n\",\"keccak256\":\"0x84e1bcf92668cce9f4e024539cb7c798cfb3b86da49b68de40c8d0d32998d683\",\"license\":\"MIT\"},\"contracts/libraries/UnpackLoanParamtersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.10;\\n\\nlibrary UnpackLoanParamtersLib {\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    /**\\n     *\\n     * Notice: * uint256 (a) reinterprets a as 256-bit unsigned integer. As long as 256 bit = 32 bytes\\n     */\\n    function _bitShiftRight(bytes32 value, uint256 amount) internal pure returns (uint256) {\\n        return uint256(value) / 2**amount;\\n    }\\n\\n    /**\\n     * Unpack parameters from packed bytes32 data\\n     */\\n    function _unpackLoanTermsParametersFromBytes(bytes32 parameters)\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\n        bytes32 principalAmountShifted = parameters &\\n            0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\n        bytes32 amortizationUnitTypeShifted = parameters &\\n            0x00000000000000000000000000000000f0000000000000000000000000000000;\\n        // The subsequent 12 bytes encode the term length, as denominated in\\n        // the encoded amortization unit.\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters &\\n            0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\n\\n        bytes32 gracePeriodInDaysShifted = parameters &\\n            0x000000000000000000000000000000000000000000000000000000000ff00000;\\n\\n        return (\\n            _bitShiftRight(principalAmountShifted, 152),\\n            _bitShiftRight(interestRateShifted, 128),\\n            _bitShiftRight(amortizationUnitTypeShifted, 124),\\n            _bitShiftRight(termLengthInAmortizationUnitsShifted, 28),\\n            _bitShiftRight(gracePeriodInDaysShifted, 20)\\n        );\\n    }\\n\\n    /**\\n     * Unpack data from hex string which including informations about Loan\\n     */\\n    function unpackParametersFromBytes(bytes32 parameters)\\n        internal\\n        pure\\n        returns (\\n            uint256 _principalAmount,\\n            uint256 _interestRate,\\n            uint256 _amortizationUnitType,\\n            uint256 _termLengthInAmortizationUnits,\\n            uint256 _gracePeriodInDays\\n        )\\n    {\\n        return _unpackLoanTermsParametersFromBytes(parameters);\\n    }\\n}\\n\",\"keccak256\":\"0xdfc3321de91862a54adbdbbe42f4eb658804d93b87301d458612c5939266b964\",\"license\":\"MIT\"},\"contracts/libraries/UntangledMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary UntangledMath {\\n    uint256 public constant ONE = 10**27;\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 base\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := base\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(base, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, base)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, base)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa97b9d1a627c84ea8208d1a56f6fb6fe635af03fcc5ac6c7bb633374e23762a0\",\"license\":\"MIT\"},\"contracts/protocol/cma/SupplyChainManagementProgram.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/ISupplyChainManagementProgram.sol\\\";\\nimport \\\"../../libraries/ConfigHelper.sol\\\";\\nimport \\\"../loan/inventory/InventoryLoanRegistry.sol\\\";\\n\\ncontract SupplyChainManagementProgram is ISupplyChainManagementProgram {\\n    using ConfigHelper for Registry;\\n\\n    /** CONSTRUCTOR */\\n    function initialize(\\n        Registry _registry\\n    ) public override initializer {\\n        __Pausable_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n\\n        address owner = _msgSender();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\\n        _setupRole(OWNER_ROLE, owner);\\n\\n        registry = _registry;\\n    }\\n\\n    function _isMovementExisting(\\n        uint256 projectId,\\n        string memory movementId\\n    ) internal view returns (bool) {\\n        bytes32 identifyHashMovement = keccak256(abi.encodePacked(movementId));\\n        return projectToExistedMovements[projectId][identifyHashMovement];\\n    }\\n\\n    function _isMovementExisting(\\n        uint256 projectId,\\n        bytes32 movementHash\\n    ) internal view returns (bool) {\\n        return projectToExistedMovements[projectId][movementHash];\\n    }\\n\\n    function _isCollateralManager(uint256 projectId, address manager) internal view returns (bool) {\\n        return collateralProjects[projectId].managerAddress == manager;\\n    }\\n\\n    modifier onlyCollateralManager(uint256 projectId) {\\n        require(_isCollateralManager(projectId, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Collateral Manager: caller is not the manager of the project\\\");\\n        _;\\n    }\\n\\n    modifier onlyTrader(uint256 projectId) {\\n        require(projectToTraders[projectId][msg.sender], \\\"Collateral Project: caller is not the trader of the project\\\");\\n        _;\\n    }\\n\\n    modifier onlyProjectExisted(uint256 projectId) {\\n        require(isExistingProjects[projectId], \\\"Project does not exists.\\\");\\n        _;\\n    }\\n\\n    modifier onlyPriceFeedManager() {\\n        require(\\n            isExistingManager[msg.sender] || hasRole(PRICE_FEED_ROLE, msg.sender),\\n            \\\"SupplyChainManagementProgram: Not authorized to update price\\\"\\n        );\\n        _;\\n    }\\n\\n    //************  */\\n    // EXTERNAL\\n    //************  *\\n    // Create new CMA project\\n    function newProject(\\n        uint256 projectId,\\n        string memory companyId,\\n        address projectWallet\\n    ) public override {\\n        // 1. Create new multisignature wallet as tokens recepient of this CMA project\\n        // 2. Record project information to metadata of new Non-Fungile Token\\n        // 3. Mint initBalance quantity of Fungible Token and credit to Multisign Wallet above\\n        require(!isExistingProjects[projectId], \\\"Project already existed\\\");\\n\\n        collateralProjects[projectId] = CollateralProject({\\n        managerAddress : msg.sender,\\n        projectWallet : projectWallet,\\n        companyHash : keccak256(abi.encodePacked(companyId))\\n        });\\n        isExistingProjects[projectId] = true;\\n        isExistingManager[msg.sender] = true;\\n    }\\n\\n    function updateCompanyId(uint256 projectId, string memory companyId) public override\\n    onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId){\\n\\n        CollateralProject memory collateralProject = collateralProjects[projectId];\\n        collateralProject.companyHash = keccak256(abi.encodePacked(companyId));\\n\\n        collateralProjects[projectId] = collateralProject;\\n\\n    }\\n\\n    function addCommodity (\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        string memory commodity,\\n        uint256 initBalance\\n    ) public override\\n    onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(!projectToExistedProjectCommodity[projectId][projectCommodityId], \\\"Project commodity already existed.\\\");\\n\\n        projectCommodityToCommodity[projectCommodityId] = keccak256(abi.encodePacked(commodity));\\n        projectCommodityToProject[projectCommodityId] = projectId;\\n        projectToExistedProjectCommodity[projectId][projectCommodityId] = true;\\n\\n        address walletAddress = collateralProjects[projectId].projectWallet;\\n\\n        bytes  memory data;\\n        registry.getCollateralManagementToken().mint(walletAddress, projectCommodityId, initBalance, data);\\n    }\\n\\n    // Add Trader for CMA project\\n    function addTrader(uint256 projectId, address trader)\\n    public override onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(!projectToTraders[projectId][trader], \\\"Trader already existed.\\\");\\n        projectToTraders[projectId][trader] = true;\\n    }\\n\\n    // Add Lender for CMA project\\n    function addLender(uint256 projectId, address lender)\\n    public\\n    override\\n    onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(!projectToLenders[projectId][lender], \\\"Lender already existed.\\\");\\n        projectToLenders[projectId][lender] = true;\\n    }\\n\\n    // Add Executor for CMA project\\n    function addExecutor(uint256 projectId, address executor)\\n    public override onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(!projectToExecutors[projectId][executor], \\\"Executor already existed.\\\");\\n        projectToExecutors[projectId][executor] = true;\\n    }\\n\\n    // Remove Trader for CMA project\\n    /** @dev NOTE: delete array element but still occupy storage space */\\n    function removeTrader(uint256 projectId, address trader)\\n    public override onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(projectToTraders[projectId][trader], \\\"Trader does not exist.\\\");\\n        delete projectToTraders[projectId][trader];\\n    }\\n\\n    // Remove Lender for CMA project\\n    function removeLender(uint256 projectId, address lender)\\n    public\\n    override\\n    onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(projectToLenders[projectId][lender], \\\"Lender does not exist.\\\");\\n        delete projectToLenders[projectId][lender];\\n    }\\n\\n    // Remove Executor for CMA project\\n    function removeExecutor(uint256 projectId, address executor)\\n    public override\\n    onlyProjectExisted(projectId)\\n    onlyCollateralManager(projectId) {\\n        require(projectToExecutors[projectId][executor], \\\"Executor does not exist.\\\");\\n        delete projectToExecutors[projectId][executor];\\n    }\\n\\n    function isTrader(uint256 projectId, address account) public override view returns (bool) {\\n        return projectToTraders[projectId][account];\\n    }\\n\\n    function isLender(uint256 projectId, address account) public override view returns (bool) {\\n        return projectToLenders[projectId][account];\\n    }\\n\\n    function isExecutor(uint256 projectId, address account) public override view returns (bool) {\\n        return projectToExecutors[projectId][account];\\n    }\\n\\n    function initMovement(\\n        string memory movementId,\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        uint8 _movementType\\n    ) public override onlyProjectExisted(projectId) onlyTrader(projectId) {\\n        require(!_isMovementExisting(projectId, movementId), \\\"Movement already existed.\\\");\\n        require(projectToExistedProjectCommodity[projectId][projectCommodityId], \\\"Project commodity not existed.\\\");\\n        require(_movementType != uint8(MovementType.UNKNOWN), \\\"Unknown movement type.\\\");\\n\\n        bytes32 identifyHashMovement = keccak256(abi.encodePacked(movementId));\\n\\n        Movement memory movement = Movement({\\n        projectCommodityId: projectCommodityId,\\n        movementType: MovementType.UNKNOWN,\\n        state: MovementState.INITIATED,\\n        quantity: 0,\\n        initiator: msg.sender,\\n        approver: address(0x0),\\n        executor: address(0x0)\\n        });\\n\\n        if (_movementType == uint8(MovementType.DEPOSIT)) {\\n            movement.movementType = MovementType.DEPOSIT;\\n\\n        } else if (_movementType == uint8(MovementType.WITHDRAW)) {\\n            movement.movementType = MovementType.WITHDRAW;\\n        }\\n\\n        projectToMovements[projectId][identifyHashMovement] = movement;\\n        projectToExistedMovements[projectId][identifyHashMovement] = true;\\n    }\\n\\n    function approveMovement(\\n        string memory movementId,\\n        uint256 projectId\\n    ) public override {\\n        updateStateMovement(\\n            movementId,\\n            projectId,\\n            MovementState.APPROVED,\\n            0,\\n            msg.sender\\n        );\\n    }\\n\\n    function executeMovement(\\n        string memory movementId,\\n        uint256 projectId,\\n        uint _quantity\\n    ) public override {\\n        updateStateMovement(\\n            movementId,\\n            projectId,\\n            MovementState.EXECUTED,\\n            _quantity,\\n            msg.sender\\n        );\\n    }\\n\\n    function updateStateMovement(\\n        string memory movementId,\\n        uint256 projectId,\\n        MovementState _movementState,\\n        uint _quantity,\\n        address caller\\n    ) public override onlyProjectExisted(projectId) {\\n        require(_isMovementExisting(projectId, movementId), \\\"Movement does not exist.\\\");\\n\\n        bytes32 identifyHashMovement = keccak256(abi.encodePacked(movementId));\\n\\n        Movement memory movement = projectToMovements[projectId][identifyHashMovement];\\n\\n        if (_movementState == MovementState.EXECUTED) {\\n            require(isExecutor(projectId, caller), \\\"Collateral Manager: caller is not the executor of the project\\\");\\n            require(movement.state == MovementState.INITIATED, \\\"Execute Movement: state invalid\\\");\\n            require(_quantity > 0, \\\"Invalid movement quantity.\\\");\\n\\n            if(movement.movementType == MovementType.WITHDRAW) {\\n                _doWithdraw(movement.initiator, movement.projectCommodityId, _quantity);\\n            } else if (movement.movementType == MovementType.DEPOSIT) {\\n                _doDeposit(movement.initiator, movement.projectCommodityId, _quantity);\\n            }\\n\\n            movement.quantity = _quantity;\\n            movement.state = MovementState.EXECUTED;\\n            movement.executor = caller;\\n        }\\n\\n        projectToMovements[projectId][identifyHashMovement] = movement;\\n    }\\n\\n    // Trader do withdraw\\n    function _doWithdraw(address trader, uint256 projectCommodityId, uint quantity) internal {\\n        registry.getCollateralManagementToken().burn(trader, projectCommodityId, quantity);\\n    }\\n\\n    // Trader do Deposit\\n    function _doDeposit(address trader, uint256 projectCommodityId, uint quantity) internal {\\n        registry.getCollateralManagementToken().mint(trader, projectCommodityId, quantity, \\\"\\\");\\n    }\\n\\n    function isProjectExisting(uint256 projectId) public override view returns (bool) {\\n        return isExistingProjects[projectId];\\n    }\\n\\n    /**\\n    * @dev NOTE: memory & public is not recommeneded for function which have input param is arrays, calldata & external function instead\\n     */\\n    function bulkInsertCompletedMovement(\\n        bytes32[] memory movementIdsHashes,\\n        uint256[] memory projectIds,\\n        uint256[] memory projectCommodityIds,\\n        uint8[] memory movementTypes,\\n        address[] memory traders,\\n        address[] memory executors,\\n        uint[] memory quantities\\n    ) public override {\\n        for (uint256 i = 0; i < movementIdsHashes.length; ++i) {\\n            require(isExistingProjects[projectIds[i]], \\\"Project does not exists.\\\");\\n            require(!_isMovementExisting(projectIds[i], movementIdsHashes[i]), \\\"Movement already existed.\\\");\\n            require(projectToExistedProjectCommodity[projectIds[i]][projectCommodityIds[i]], \\\"Project commodity not existed.\\\");\\n            require(movementTypes[i] != uint8(MovementType.UNKNOWN), \\\"Unknown movement type.\\\");\\n            require(quantities[i] != 0, \\\"Invalid movement quantity.\\\");\\n            require(_isCollateralManager(projectIds[i], msg.sender), \\\"Collateral Manager: caller is not the manager of the project\\\");\\n            require(isTrader(projectIds[i], traders[i]), \\\"Collateral Project: not the trader of the project\\\");\\n            require(isExecutor(projectIds[i], executors[i]), \\\"Collateral Manager: not the executor of the project\\\");\\n\\n            Movement memory movement = Movement({\\n            projectCommodityId: projectCommodityIds[i],\\n            movementType: MovementType.UNKNOWN,\\n            state: MovementState.EXECUTED,\\n            quantity: quantities[i],\\n            initiator: traders[i],\\n            approver: address(0x0),\\n            executor: executors[i]\\n            });\\n\\n            if (movementTypes[i] == uint8(MovementType.DEPOSIT)) {\\n                _doDeposit(traders[i], movement.projectCommodityId, movement.quantity);\\n                movement.movementType = MovementType.DEPOSIT;\\n\\n            } else if (movementTypes[i] == uint8(MovementType.WITHDRAW)) {\\n                _doWithdraw(traders[i], movement.projectCommodityId, movement.quantity);\\n                movement.movementType = MovementType.WITHDRAW;\\n            }\\n\\n            projectToMovements[projectIds[i]][movementIdsHashes[i]] = movement;\\n            projectToExistedMovements[projectIds[i]][movementIdsHashes[i]] = true;\\n        }\\n    }\\n\\n    function addExistedBalance(\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        address trader,\\n        uint quantity\\n    ) public override onlyProjectExisted(projectId) onlyCollateralManager(projectId) {\\n        require(projectToExistedProjectCommodity[projectId][projectCommodityId], \\\"Project commodity not existed.\\\");\\n        require(isTrader(projectId, trader), \\\"Collateral Project: trader is not the trader of the project\\\");\\n        require(quantity != 0, \\\"Invalid quantity.\\\");\\n\\n        registry.getCollateralManagementToken().mint(trader, projectCommodityId, quantity, \\\"\\\");\\n    }\\n\\n    function removeExistedBalance(\\n        uint256 projectId,\\n        uint256 projectCommodityId,\\n        address trader,\\n        uint quantity\\n    ) public override onlyProjectExisted(projectId) onlyCollateralManager(projectId) {\\n        require(projectToExistedProjectCommodity[projectId][projectCommodityId], \\\"Project commodity not existed.\\\");\\n        require(isTrader(projectId, trader), \\\"Collateral Project: trader is not the trader of the project\\\");\\n        require(quantity != 0, \\\"Invalid quantity.\\\");\\n\\n        registry.getCollateralManagementToken().burn(trader, projectCommodityId, quantity);\\n    }\\n\\n    function getCommodityPrice(uint256 projectCommodityId) public override view returns (uint256) {\\n        require(projectCommodityToCommodity[projectCommodityId] != bytes32(0), \\\"SupplyChainManagementProgram: project commodity not existed\\\");\\n        return projectCommodityToPrice[projectCommodityId];\\n    }\\n\\n    function updateCommodityPrice(uint256 projectCommodityId, uint256 price) public override onlyPriceFeedManager() {\\n        require(price > 0, \\\"SupplyChainManagementProgram: price must greater than 0\\\");\\n        require(projectCommodityToCommodity[projectCommodityId] != bytes32(0), \\\"SupplyChainManagementProgram: project commodity not existed\\\");\\n\\n        if (projectCommodityToPrice[projectCommodityId] != price) {\\n            projectCommodityToPrice[projectCommodityId] = price;\\n            InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n\\n            if (projectCommodityToAgreements[projectCommodityId].length > 0) {\\n                for (uint i = 0; i < projectCommodityToAgreements[projectCommodityId].length; ++i) {\\n                    debtRegistry.selfEvaluateCollateralRatio(projectCommodityToAgreements[projectCommodityId][i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function insertAgreementToCommodity(uint256 projectCommodityId, bytes32 agreementId) public override {\\n        require(msg.sender == address(registry.getInventoryLoanKernel()), \\\"SupplyChainManagementProgram: not authorized to add agreement\\\");\\n        require(projectCommodityToCommodity[projectCommodityId] != bytes32(0), \\\"SupplyChainManagementProgram: project commodity not existed\\\");\\n\\n        projectCommodityToAgreements[projectCommodityId].push(agreementId);\\n    }\\n\\n    function removeAgreementFromCommodity(uint256 projectCommodityId, bytes32 agreementId) public override onlyRole(OWNER_ROLE) {\\n//        require(isOwner() || _isAuthorizedContract(msg.sender), \\\"SupplyChainManagementProgram: not authorized to remove agreement\\\");\\n        require(projectCommodityToCommodity[projectCommodityId] != bytes32(0), \\\"SupplyChainManagementProgram: project commodity not existed\\\");\\n\\n        if (projectCommodityToAgreements[projectCommodityId].length > 0) {\\n            for (uint i = 0; i < projectCommodityToAgreements[projectCommodityId].length; ++i) {\\n                if (projectCommodityToAgreements[projectCommodityId][i] == agreementId) {\\n\\n                    // Remove i element from projectCommodityToAgreements[projectCommodityId]\\n                    for (uint index = i; index<projectCommodityToAgreements[projectCommodityId].length-1; index++){\\n                        projectCommodityToAgreements[projectCommodityId][index] = projectCommodityToAgreements[projectCommodityId][index+1];\\n                    }\\n                    projectCommodityToAgreements[projectCommodityId].pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getAgreementsOfProjectCommodity(uint256 projectCommodityId) public override view returns (bytes32[] memory) {\\n        return projectCommodityToAgreements[projectCommodityId];\\n    }\\n/*\\n    function getProjectDetail(uint256 projectId) public override view onlyProjectExisted(projectId)\\n    returns (address managerAddress, address projectWallet, bytes32 companyHash) {\\n        return (collateralProjects[projectId].managerAddress, collateralProjects[projectId].projectWallet, collateralProjects[projectId].companyHash);\\n    }\\n\\n    function getMovementDetail(string memory movementId, uint256 projectId)\\n    public\\n    override\\n    view\\n    onlyProjectExisted(projectId)\\n    returns (\\n        uint256 projectCommodityId,\\n        MovementType movementType,\\n        MovementState state,\\n        uint256 quantity,\\n        address initiator,\\n        address approver,\\n        address executor\\n    )\\n    {\\n        require(\\n            _isMovementExisting(projectId, movementId),\\n            'Movement does not exist.'\\n        );\\n        bytes32 identifyHashMovement = keccak256(abi.encodePacked(movementId));\\n\\n        Movement memory movement = projectToMovements[projectId][identifyHashMovement];\\n        return (\\n        movement.projectCommodityId,\\n        movement.movementType,\\n        movement.state,\\n        movement.quantity,\\n        movement.initiator,\\n        movement.approver,\\n        movement.executor\\n        );\\n    }\\n*/\\n\\n/*\\n    function getProjectCommodityDetail(uint256 projectCommodityId) public override view\\n    returns (\\n        uint256 projectId,\\n        uint256 price,\\n        bytes32 commoditySymbol\\n    ) {\\n        return (\\n        projectCommodityToProject[projectCommodityId],\\n        projectCommodityToPrice[projectCommodityId],\\n        projectCommodityToCommodity[projectCommodityId]\\n        );\\n    }\\n*/\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n}\",\"keccak256\":\"0xeb6081d35de0bdfc1be1bc15274ea62b0d4d971dc20de486c5c36f055ba201b9\",\"license\":\"MIT\"},\"contracts/protocol/loan/LoanTyping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ncontract LoanTyping {\\n\\n    enum LoanTypes {\\n        WAREHOUSE_RECEIPT,\\n        INPUT_FINANCE,\\n        INVOICE_FINANCE,\\n        INVENTORY_FINANCE\\n    }\\n}\",\"keccak256\":\"0x3094dd05f02860cd462daa61bcc9fed6c445bbb75b6efa0e9597ad8b2ffe1cb7\",\"license\":\"MIT\"},\"contracts/protocol/loan/inventory/CRInventoryDecisionEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../../libraries/SignaturesLib.sol\\\";\\n\\ncontract CRInventoryDecisionEngine is SignaturesLib {\\n    using SafeMath for uint;\\n\\n    uint public constant PRICE_PRECISION = 4; //Number decimals for price of collateral token\\n    uint public constant CR_PRECISION = 2; //Number decimals for collateral ratio\\n\\n    uint public constant MAX_PRICE_TTL_IN_SECONDS = 300;\\n\\n    // These values must be dynamic in future, query from token information in registry\\n    uint public COLLATERAL_PRECISION = 3; // Number decimals of CMA token\\n    uint public PRINCIPAL_PRECISION = 2; // Number decimals of FAT\\n\\n    uint256 constant MAX_UINT256 = ~uint256(0);\\n\\n    //==============================\\n    // Internal funcs\\n    //==============================\\n    function _computeCR(\\n        uint _collateralAmount,\\n        uint _price,\\n        uint _invoiceAmount,\\n        uint _principalAmount\\n    )\\n        internal view returns (uint)\\n    {\\n        if (_principalAmount == 0) {\\n            return MAX_UINT256;\\n        }\\n        uint collateralValue = (_price.mul(_collateralAmount) + _invoiceAmount.mul(10 ** (PRICE_PRECISION - PRINCIPAL_PRECISION)).mul(10 ** COLLATERAL_PRECISION))\\n                                    .mul(10 ** PRINCIPAL_PRECISION).mul(10 ** CR_PRECISION).mul(10 ** 2);\\n        uint principalValue = _principalAmount.mul(10 ** COLLATERAL_PRECISION).mul(10 ** PRICE_PRECISION);\\n        return collateralValue.div(principalValue);\\n    }\\n\\n    function _computeCR(uint _collateralAmount, uint _principalAmount) internal view returns (uint) {\\n        uint collateralValue = _collateralAmount.mul(10 ** PRINCIPAL_PRECISION).mul(10 ** CR_PRECISION).mul(10 ** 2);\\n        return collateralValue.div(_principalAmount);\\n    }\\n\\n    // Compute commodity value in principal decimals number\\n    function _computePriceValue(\\n        uint _collateralAmount,\\n        uint _price\\n    ) internal view returns (uint) {\\n        return _price.mul(_collateralAmount).div(10 ** (PRICE_PRECISION - PRINCIPAL_PRECISION + COLLATERAL_PRECISION));\\n    }\\n\\n    // Compute require principal value to satisfy min collateral ratio\\n    function _computePrincipalValueRequire(\\n        uint _collateralAmount,\\n        uint _price,\\n        uint256 invoiceValue,\\n        uint256 minCollateralRatio\\n    ) internal view returns (uint) {\\n        return _price.mul(_collateralAmount).mul(10 ** CR_PRECISION).mul(10 ** 2).div(10 ** (PRICE_PRECISION - PRINCIPAL_PRECISION + COLLATERAL_PRECISION))\\n            .div(minCollateralRatio) + invoiceValue.mul(10 ** CR_PRECISION).mul( 10 ** 2).div(minCollateralRatio);\\n    }\\n\\n    /**\\n    * @dev TODO: Verify Operator's signature here\\n    */\\n    function _verifyPrice(uint _timestamp) internal view returns(bool) {\\n        uint minPriceTimestamp = uint(block.timestamp).sub(MAX_PRICE_TTL_IN_SECONDS);\\n        if (_timestamp < minPriceTimestamp) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfe31f1c8f3fba8a4ac930eb1da9092088a078123afd994839fdff06b0121ec0d\",\"license\":\"MIT\"},\"contracts/protocol/loan/inventory/InventoryCollateralizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../loan/inventory/InventoryInterestTermsContract.sol\\\";\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC721ReceiverUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC1155ReceiverUpgradeable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol';\\nimport \\\"../../../base/UntangledBase.sol\\\";\\nimport \\\"../../../libraries/ConfigHelper.sol\\\";\\nimport \\\"../../../storage/Registry.sol\\\";\\nimport \\\"./InventoryLoanRegistry.sol\\\";\\nimport \\\"../../../tokens/ERC721/invoice/AcceptedInvoiceToken.sol\\\";\\n\\n\\n/**\\n*  Escrow account that hold all callaterals for Loans\\n*/\\ncontract InventoryCollateralizer is IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable, UntangledBase {\\n    using SafeMath for uint;\\n    using ConfigHelper for Registry;\\n\\n    Registry public registry;\\n\\n    bytes32 public constant COLLATERALIZER = keccak256('COLLATERALIZER');\\n\\n    // Collateralizer here refers to the owner of the asset that is being collateralized.\\n    mapping(bytes32 => address) public agreementToCollateralizer;\\n\\n    ///////////////////////////////\\n    // CONSTANTS               ///\\n    /////////////////////////////\\n    uint public constant SECONDS_IN_DAY = 24 * 60 * 60;\\n    string public constant CONTEXT = \\\"InventoryCollateralizer\\\";\\n    string public constant CONTEXT_COLLATERAL_SALE = \\\"collateral_sale\\\";\\n\\n    ///////////////////////////////\\n    // EVENTS                  ///\\n    /////////////////////////////\\n    event CollateralReturned(\\n        bytes32 indexed agreementID,\\n        address indexed collateralizer,\\n        address token,\\n        uint amount\\n    );\\n\\n    function initialize(Registry _registry) public initializer {\\n        __UntangledBase__init_unchained(_msgSender());\\n        registry = _registry;\\n    }\\n\\n    ///////////////////////////////\\n    // MODIFIERS               ///\\n    /////////////////////////////\\n\\n    modifier onlyPermissionedInventoryTermContract(bytes32 agreementId) {\\n        require(\\n            msg.sender == registry.getInventoryLoanRegistry().getTermsContract(agreementId),\\n            \\\"InventoryCollateralizer: Sender must be Term Contract of current Debt.\\\"\\n        );\\n        _;\\n    }\\n\\n    ///////////////////////////////\\n    // INTERNAL FUNCTIONS     ////\\n    /////////////////////////////\\n    function _unpackLoanTermsParametersFromBytes(bytes32 parameters)\\n    internal\\n    pure\\n    returns (\\n        uint _principalTokenIndex,\\n        uint _principalAmount,\\n        uint _interestRate,\\n        uint _amortizationUnitType,\\n        uint _termLengthInAmortizationUnits,\\n        uint _gracePeriodInDays\\n    )\\n    {\\n        // The first byte of the parameters encodes the principal token's index in the\\n        // token registry.\\n        bytes32 principalTokenIndexShifted = parameters & 0xff00000000000000000000000000000000000000000000000000000000000000;\\n        // The subsequent 12 bytes of the parameters encode the PRINCIPAL AMOUNT.\\n        bytes32 principalAmountShifted = parameters & 0x00ffffffffffffffffffffffff00000000000000000000000000000000000000;\\n        // The subsequent 3 bytes of the parameters encode the INTEREST RATE.\\n        bytes32 interestRateShifted = parameters & 0x00000000000000000000000000ffffff00000000000000000000000000000000;\\n        // The subsequent 4 bits (half byte) encode the AMORTIZATION UNIT TYPE code.\\n        bytes32 amortizationUnitTypeShifted = parameters & 0x00000000000000000000000000000000f0000000000000000000000000000000;\\n        // The subsequent 12 bytes encode the term length, as denominated in\\n        // the encoded amortization unit.\\n        bytes32 termLengthInAmortizationUnitsShifted = parameters & 0x000000000000000000000000000000000ffffffffffffffffffffffff0000000;\\n\\n        bytes32 gracePeriodInDaysShifted = parameters & 0x000000000000000000000000000000000000000000000000000000000ff00000;\\n\\n        return (\\n        uint(principalTokenIndexShifted >> 248),\\n        uint(principalAmountShifted >> 152),\\n        uint(interestRateShifted >> 128),\\n        uint(amortizationUnitTypeShifted >> 124),\\n        uint(termLengthInAmortizationUnitsShifted >> 28),\\n        uint(gracePeriodInDaysShifted >> 20)\\n        );\\n    }\\n\\n    function _unpackInventoryCollateralParametersFromBytes(bytes16 collateralParams)\\n    internal\\n    pure\\n    returns (uint, uint)\\n    {\\n        bytes16 collateralTokenIdShifted = collateralParams & 0xffffffff000000000000000000000000;\\n        bytes16 collateralAmountShifted = collateralParams & 0x00000000ffffffffffffffffffffffff;\\n\\n        return (\\n        uint256(uint128(collateralTokenIdShifted) >> 96),\\n        uint256(uint128(collateralAmountShifted))\\n        );\\n    }\\n\\n    // Parameters from Loan which have collateral is Inventory\\n    function retrieveInventoryCollateralParameters(bytes32 agreementId)\\n    internal\\n    view\\n    returns (\\n        address collateralToken,\\n        uint _collateralAmount,\\n        uint256 _collateralTokenId,\\n        uint gracePeriodInDays,\\n        InventoryInterestTermsContract termsContract\\n    )\\n    {\\n        address termsContractAddress;\\n        bytes32 termsContractParameters;\\n        bytes16 collateralInfoParameters;\\n\\n        // Pull the terms contract and associated parameters for the agreement\\n        (\\n        termsContractAddress,\\n        termsContractParameters,\\n        collateralInfoParameters\\n        ) = registry.getInventoryLoanRegistry().getTerms(agreementId);\\n\\n        // Unpack terms contract parameters in order to get inventory collateralization-specific params\\n        (_collateralTokenId, _collateralAmount) = _unpackInventoryCollateralParametersFromBytes(collateralInfoParameters);\\n        (,,,,, gracePeriodInDays) = _unpackLoanTermsParametersFromBytes(termsContractParameters);\\n\\n        // Resolve address of token associated with this agreement in token registry\\n        collateralToken = address(registry.getCollateralManagementToken());\\n        termsContract = InventoryInterestTermsContract(termsContractAddress);\\n    }\\n\\n    ///////////////////////////////\\n    // EXTERNAL FUNCTIONS     ///\\n    /////////////////////////////\\n\\n    /**\\n     * Transfers collateral from the debtor to the current contract, as custodian.\\n     *\\n     * @param agreementId bytes32 The debt agreement's ID\\n     * @param collateralizer address The owner of the asset being collateralized\\n     */\\n    function collateralizeERC1155(\\n        bytes32 agreementId,\\n        address debtor,\\n        address collateralizer\\n    )\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    {\\n        // The token in which collateral is denominated\\n        address collateralToken;\\n        // The amount being put up for collateral\\n        uint collateralAmount;\\n        // erc1155 token id\\n        uint256 collateralTokenId;\\n        // The number of days a debtor has after a debt enters default\\n        // before their collateral is eligible for seizure.\\n        uint gracePeriodInDays;\\n        // The terms contract according to which this asset is being collateralized.\\n        InventoryInterestTermsContract termsContract;\\n\\n        // Fetch all relevant collateralization parameters\\n        (\\n        collateralToken,\\n        collateralAmount,\\n        collateralTokenId,\\n        gracePeriodInDays,\\n        termsContract\\n        ) = retrieveInventoryCollateralParameters(agreementId);\\n\\n        require(\\n            address(termsContract) == msg.sender,\\n            \\\"InventoryCollateralizer: Sender must be Term Contract smart contract.\\\"\\n        );\\n        require(\\n            collateralAmount > 0,\\n            \\\"InventoryCollateralizer: Collateral amount must greater than 0.\\\"\\n        );\\n        require(\\n            collateralToken != address(0),\\n            \\\"InventoryCollateralizer: Token address must differ with address null.\\\"\\n        );\\n\\n        require(\\n            agreementToCollateralizer[agreementId] == address(0),\\n            \\\"InventoryCollateralizer: This Debt must be not collateralized.\\\"\\n        );\\n\\n        IERC1155 erc1155token = IERC1155(collateralToken);\\n        address custodian = address(this);\\n\\n        // agreement is now collateralized.\\n        agreementToCollateralizer[agreementId] = debtor;\\n\\n        IERC1155(erc1155token).safeTransferFrom(\\n            collateralizer,\\n            custodian,\\n            collateralTokenId,\\n            collateralAmount, \\\"\\\");\\n    }\\n\\n    /**\\n    * Add more collateral to increase CR\\n    */\\n    function additionInventoryCollateralize(\\n        bytes32 agreementId,\\n        address collateralizer,\\n        uint amount,\\n        address token\\n    )\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    {\\n\\n        // The token in which collateral is denominated\\n        address collateralToken;\\n        uint256 collateralTokenId;\\n        // The terms contract according to which this asset is being collateralized.\\n        InventoryInterestTermsContract termsContract;\\n\\n        (collateralToken,,collateralTokenId,,termsContract) = retrieveInventoryCollateralParameters(agreementId);\\n\\n        require(\\n            address(termsContract) == msg.sender,\\n            \\\"InventoryCollateralizer: Sender must be Term Contract smart contract.\\\"\\n        );\\n\\n        require(\\n            amount > 0,\\n            \\\"InventoryCollateralizer: Collateral amount must greater than 0.\\\"\\n        );\\n        require(\\n            collateralToken == token,\\n            \\\"InventoryCollateralizer: Invalid collateral token.\\\"\\n        );\\n\\n        IERC1155 erc1155token = IERC1155(collateralToken);\\n        address custodian = address(this);\\n\\n        require(\\n            erc1155token.balanceOf(collateralizer, collateralTokenId) >= amount,\\n            \\\"InventoryCollateralizer: Balance of collateralizer must sufficient with required amount.\\\"\\n        );\\n\\n        erc1155token.safeTransferFrom(\\n            collateralizer,\\n            custodian,\\n            collateralTokenId,\\n            amount, \\\"\\\");\\n    }\\n\\n    /**\\n    * withdraw more collateral to decrease CR\\n    */\\n    function withdrawInventoryCollateralize(\\n        bytes32 agreementId,\\n        address collateralizer,\\n        uint amount,\\n        address token\\n    )\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    {\\n        require(agreementToCollateralizer[agreementId] != address(0), \\\"Invalid agreedmentId\\\");\\n\\n        // The token in which collateral is denominated\\n        address collateralToken;\\n        uint collateralAmount;\\n        uint256 collateralTokenId;\\n        // The terms contract according to which this asset is being collateralized.\\n        InventoryInterestTermsContract termsContract;\\n\\n        (collateralToken,collateralAmount,collateralTokenId,,termsContract) = retrieveInventoryCollateralParameters(agreementId);\\n\\n        require(\\n            address(termsContract) == msg.sender,\\n            \\\"InventoryCollateralizer: Sender must be Term Contract smart contract.\\\"\\n        );\\n        require(\\n            amount > 0,\\n            \\\"InventoryCollateralizer: Withdraw amount must greater than 0.\\\"\\n        );\\n        require(\\n            collateralAmount >= amount,\\n            \\\"InventoryCollateralizer: Withdraw amount must less or equal collateral amount.\\\"\\n        );\\n        require(\\n            collateralToken == token,\\n            \\\"InventoryCollateralizer: Invalid collateral token.\\\"\\n        );\\n        require(collateralizer == agreementToCollateralizer[agreementId], \\\"InventoryCollateralizer: Invalid debtor of agreement\\\");\\n\\n        IERC1155(collateralToken).safeTransferFrom(\\n            address(this),\\n            collateralizer,\\n            collateralTokenId,\\n            amount,\\n            \\\"\\\"\\n        );\\n\\n        // log the return event.\\n        emit CollateralReturned(\\n            agreementId,\\n            collateralizer,\\n            collateralToken,\\n            collateralAmount\\n        );\\n    }\\n\\n    function burnInventoryCollateralize(\\n        bytes32 agreementId,\\n        uint amount,\\n        address token\\n    )\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    {\\n\\n        // The token in which collateral is denominated\\n        address collateralToken;\\n        uint256 collateralTokenId;\\n        // The terms contract according to which this asset is being collateralized.\\n        InventoryInterestTermsContract termsContract;\\n\\n        (collateralToken,,collateralTokenId,,termsContract) = retrieveInventoryCollateralParameters(agreementId);\\n\\n        require(\\n            address(termsContract) == msg.sender,\\n            \\\"InventoryCollateralizer: Sender must be Term Contract smart contract.\\\"\\n        );\\n\\n        require(\\n            amount > 0,\\n            \\\"InventoryCollateralizer: Collateral amount must greater than 0.\\\"\\n        );\\n        require(\\n            collateralToken == token,\\n            \\\"InventoryCollateralizer: Invalid collateral token.\\\"\\n        );\\n\\n        ERC1155Burnable erc1155token = ERC1155Burnable(collateralToken);\\n\\n        erc1155token.burn(address(this), collateralTokenId, amount);\\n    }\\n\\n    /**\\n     * Returns collateral to the debt agreement's original collateralizer\\n     * if and only if the debt agreement's term has lapsed and\\n     * the total expected repayment value has been repaid.\\n     *\\n     * @param agreementId bytes32 The debt agreement's ID\\n     */\\n    function returnInventoryCollateral(\\n        bytes32 agreementId\\n    )\\n    public\\n    whenNotPaused\\n    onlyPermissionedInventoryTermContract(agreementId)\\n    {\\n        require(agreementToCollateralizer[agreementId] != address(0), \\\"Invalid agreementId\\\");\\n        // The token in which collateral is denominated\\n        address collateralToken;\\n        // The amount being put up for collateral\\n        uint collateralAmount;\\n        uint256 collateralTokenId;\\n\\n        // The number of days a debtor has after a debt enters default\\n        // before their collateral is eligible for seizure.\\n        uint gracePeriodInDays;\\n        // The terms contract according to which this asset is being collateralized.\\n        InventoryInterestTermsContract termsContract;\\n\\n        // Fetch all relevant collateralization parameters.\\n        (\\n        collateralToken,\\n        collateralAmount,\\n        collateralTokenId,\\n        gracePeriodInDays,\\n        termsContract\\n        ) = retrieveInventoryCollateralParameters(agreementId);\\n\\n        // Ensure a valid form of collateral is tied to this agreement id\\n        require(collateralToken != address(0), \\\"Collateral token must different with NULL.\\\");\\n\\n        InventoryLoanRegistry inventoryLoanDebtRegistry = registry.getInventoryLoanRegistry();\\n        // Ensure that the debt is not in a state of default\\n        // Ensure Value Repaid to date is greater or equal expected value until this Debt expired\\n        require(\\n            inventoryLoanDebtRegistry.completedRepayment(agreementId),\\n            \\\"Debtor have not completed repayment.\\\"\\n        );\\n\\n        // determine collateralizer of the collateral.\\n        address collateralizer = agreementToCollateralizer[agreementId];\\n\\n        // Mark agreement's collateral as withdrawn by setting the agreement's\\n        // collateralizer to 0x0.\\n        delete agreementToCollateralizer[agreementId];\\n\\n        if (collateralAmount > 0) {\\n            ERC1155(collateralToken).safeTransferFrom(\\n                address(this),\\n                collateralizer,\\n                collateralTokenId,\\n                collateralAmount,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        // stop financing invoices\\n        uint256[] memory invoiceTokenIds = inventoryLoanDebtRegistry.getInvoiceIds(agreementId);\\n        if (invoiceTokenIds.length > 0) {\\n            AcceptedInvoiceToken invoiceToken = registry.getAcceptedInvoiceToken();\\n\\n            for (uint i = 0; i < invoiceTokenIds.length; ++i) {\\n                registry.getAcceptedInvoiceToken().transferFrom(\\n                    address(this),\\n                    collateralizer,\\n                    invoiceTokenIds[i]\\n                );\\n                // stop financing\\n                // TODO tanlm temporary disable\\n                //                    invoiceToken.stopInventoryFinancing(bytes32(invoiceTokenIds[i]));\\n            }\\n        }\\n\\n        // log the return event.\\n        emit CollateralReturned(\\n            agreementId,\\n            collateralizer,\\n            collateralToken,\\n            collateralAmount\\n        );\\n    }\\n\\n    // For receiving AIT token\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes memory data) public returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata)\\n    external returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata)\\n    external returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n    *\\n    */\\n    function timestampAdjustedForGracePeriod(uint gracePeriodInDays)\\n    public\\n    view\\n    returns (uint)\\n    {\\n        return block.timestamp.sub(\\n            SECONDS_IN_DAY.mul(gracePeriodInDays)\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0xae9eec968c28c383fff4ad009d10c253ac833bcd6c39e40317439d700a9a0a88\",\"license\":\"MIT\"},\"contracts/protocol/loan/inventory/InventoryInterestTermsContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './InventoryCollateralizer.sol';\\nimport './InventoryLoanRegistry.sol';\\nimport './InventoryLoanRepaymentRouter.sol';\\nimport \\\"../../../libraries/UnpackLoanParamtersLib.sol\\\";\\nimport \\\"../LoanTyping.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../../libraries/Unpack.sol\\\";\\nimport \\\"../../../libraries/Unpack16.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../../../protocol/loan/inventory/CRInventoryDecisionEngine.sol\\\";\\n\\ncontract InventoryInterestTermsContract is\\n    CRInventoryDecisionEngine, LoanTyping, PausableUpgradeable, OwnableUpgradeable\\n{\\n    using SafeMath for uint;\\n    using ConfigHelper for Registry;\\n    using Unpack for bytes32;\\n    using Unpack16 for bytes16;\\n\\n    Registry public registry;\\n    uint256 public constant NUM_AMORTIZATION_UNIT_TYPES = 6;\\n\\n    uint256 public constant YEAR_LENGTH_IN_DAYS = 365;\\n    // All time units in seconds\\n    uint256 public constant MINUTE_LENGTH_IN_SECONDS = 60;\\n    uint256 public constant HOUR_LENGTH_IN_SECONDS = MINUTE_LENGTH_IN_SECONDS * 60;\\n    uint256 public constant DAY_LENGTH_IN_SECONDS = HOUR_LENGTH_IN_SECONDS * 24;\\n    uint256 public constant WEEK_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * 7;\\n    uint256 public constant MONTH_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * 30;\\n    uint256 public constant YEAR_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * YEAR_LENGTH_IN_DAYS;\\n\\n    // To convert an encoded interest rate into its equivalent in percents,\\n    // divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 1% interest rate\\n    uint256 public constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10**4;\\n\\n    // To convert an encoded interest rate into its equivalent multiplier\\n    // (for purposes of calculating total interest), divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 0.01 interest multiplier\\n    uint256 public constant INTEREST_RATE_SCALING_FACTOR_MULTIPLIER = INTEREST_RATE_SCALING_FACTOR_PERCENT * 100;\\n\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    modifier onlyRouter(LoanTypes loanType) {\\n        require(\\n            msg.sender == address(registry.getInventoryLoanRepaymentRouter()),\\n            \\\"Only for Repayment Router.\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n    modifier onlyDebtKernel() {\\n        require(\\n            msg.sender == address(registry.getInventoryLoanKernel()),\\n            'Only for Debt Kernel.'\\n        );\\n        _;\\n    }\\n\\n    function collateralize(\\n        bytes32 agreementId, address[2]\\n        memory addresses // 0. Debtor, 1. assetHolder\\n    )\\n        private\\n    {\\n        return registry.getInventoryCollateralizer().collateralizeERC1155(agreementId, addresses[0], addresses[1]);\\n    }\\n\\n    /**\\n    *   Start terms contract and sieze collateral tokens\\n    */\\n\\n    function registerTermStart(bytes32 agreementId, address[2] memory addresses) // 0. Debtor, 1. assetHolder\\n        public\\n        returns (bool _success)\\n    {\\n        address termsContract;\\n        bytes32 termsContractParameters;\\n        bytes16 collateralInfoParameters;\\n\\n        (\\n            termsContract,\\n            termsContractParameters,\\n            collateralInfoParameters\\n        ) = registry.getInventoryLoanRegistry()\\n            .getTerms(agreementId);\\n        address principalTokenAddress = registry.getInventoryLoanRegistry().getAgreement(agreementId).principalTokenAddress;\\n\\n        uint256 principalAmount = termsContractParameters.unpackPrincipalAmount();\\n        uint256 interestRate = termsContractParameters.unpackInterestRate();\\n        uint256 amortizationUnitType= termsContractParameters.unpackAmortizationUnitType();\\n        uint256 termLengthInAmortizationUnits= termsContractParameters.unpackTermLengthInAmortizationUnits();\\n        uint256 gracePeriodInDays= termsContractParameters.unpackGracePeriodInDays();\\n\\n        collateralize(agreementId, addresses);\\n\\n        // Returns true (i.e. valid) if the specified principal token is valid,\\n        // the specified amortization unit type is valid, and the terms contract\\n        // associated with the agreement is this one.  We need not check\\n        // if any of the other simple interest parameters are valid, because\\n        // it is impossible to encode invalid values for them.\\n        if (\\n            principalTokenAddress != address(0) &&\\n            amortizationUnitType < NUM_AMORTIZATION_UNIT_TYPES &&\\n            termsContract == address(this)\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n   *   Get parameters by Agreement ID (commitment hash)\\n   */\\n    function _getAmortizationUnitLengthInSeconds(AmortizationUnitType amortizationUnitType)\\n    internal\\n    pure\\n    returns (uint)\\n    {\\n        if (amortizationUnitType == AmortizationUnitType.MINUTES) {\\n            return MINUTE_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.HOURS) {\\n            return HOUR_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.DAYS) {\\n            return DAY_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.WEEKS) {\\n            return WEEK_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.MONTHS) {\\n            return MONTH_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.YEARS) {\\n            return YEAR_LENGTH_IN_SECONDS;\\n        } else {\\n            revert(\\\"Unknown amortization unit type.\\\");\\n        }\\n    }\\n\\n    function _unpackParamsForAgreementID(\\n        LoanTypes loanType,\\n        bytes32 agreementId\\n    )\\n    internal\\n    view\\n    returns (InterestParams memory params)\\n    {\\n        bytes32 parameters;\\n        uint issuanceBlockTimestamp = 0;\\n        address principalTokenAddress;\\n        if (loanType == LoanTypes.WAREHOUSE_RECEIPT) {\\n/*\\n            CommodityDebtRegistry commodityDebtRegistry = CommodityDebtRegistry(contractRegistry.get(COMMODITY_DEBT_REGISTRY));\\n            parameters = commodityDebtRegistry.getTermsContractParameters(agreementId);\\n            issuanceBlockTimestamp = commodityDebtRegistry.getIssuanceBlockTimestamp(agreementId);\\n*/\\n        } else if (loanType == LoanTypes.INVENTORY_FINANCE) {\\n            InventoryLoanRegistry inventoryLoanDebtRegistry = registry.getInventoryLoanRegistry();\\n            parameters = inventoryLoanDebtRegistry.getTermsContractParameters(agreementId);\\n            issuanceBlockTimestamp = inventoryLoanDebtRegistry.getIssuanceBlockTimestamp(agreementId);\\n            principalTokenAddress = inventoryLoanDebtRegistry.getAgreement(agreementId).principalTokenAddress;\\n        } else {\\n/*\\n            InvoiceDebtRegistry invoiceDebtRegistry = InvoiceDebtRegistry(contractRegistry.get(INVOICE_DEBT_REGISTRY));\\n            issuanceBlockTimestamp = invoiceDebtRegistry.getIssuanceBlockTimestamp(agreementId);\\n            parameters = invoiceDebtRegistry.getTermsContractParameters(agreementId);\\n*/\\n        }\\n\\n        // The principal amount denominated in the aforementioned token.\\n        uint256 principalAmount = parameters.unpackPrincipalAmount();\\n        uint256 interestRate = parameters.unpackInterestRate();\\n        // The amortization unit in which the repayments installments schedule is defined.\\n        uint256 rawAmortizationUnitType= parameters.unpackAmortizationUnitType();\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\n        uint256 termLengthInAmortizationUnits= parameters.unpackTermLengthInAmortizationUnits();\\n        uint256 gracePeriodInDays= parameters.unpackGracePeriodInDays();\\n\\n        // Ensure that the encoded principal token address is valid\\n        require(principalTokenAddress != address(0), \\\"Invalid principal token address.\\\");\\n\\n        // Before we cast to `AmortizationUnitType`, ensure that the raw value being stored is valid.\\n        require(\\n            rawAmortizationUnitType <= uint(AmortizationUnitType.YEARS),\\n            \\\"Amortization Unit Type is invalid.\\\"\\n        );\\n\\n        AmortizationUnitType amortizationUnitType = AmortizationUnitType(rawAmortizationUnitType);\\n\\n        // Calculate term length base on Amortization Unit and number\\n        uint termLengthInSeconds = termLengthInAmortizationUnits.mul(\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType)\\n        );\\n\\n        return InterestParams({\\n            principalAmount: principalAmount,\\n            interestRate: interestRate,\\n            termStartUnixTimestamp: issuanceBlockTimestamp,\\n            termEndUnixTimestamp: termLengthInSeconds.add(issuanceBlockTimestamp),\\n            amortizationUnitType: amortizationUnitType,\\n            termLengthInAmortizationUnits: termLengthInAmortizationUnits\\n        });\\n    }\\n\\n\\n    /// When called, the registerRepayment function records the debtor's\\n    ///  repayment, as well as any auxiliary metadata needed by the contract\\n    ///  to determine ex post facto the value repaid (e.g. current USD\\n    ///  exchange rate)\\n    /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\\n    /// @param  unitsOfRepayment uint. The units-of-value repaid in the transaction.\\n    /// @param  tokenAddress address. The address of the token with which the repayment transaction was executed.\\n    function registerRepayment(\\n        bytes32 agreementId,\\n        uint256 unitsOfRepayment,\\n        address tokenAddress\\n    ) public onlyRouter(LoanTypes.INVENTORY_FINANCE) returns (uint256 remains) {\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        require(\\n            tokenAddress == debtRegistry.getAgreement(agreementId).principalTokenAddress,\\n            'LoanTermsContract: Invalid token for repayment.'\\n        );\\n\\n        // solium-disable-next-line\\n        uint256 currentTimestamp = block.timestamp;\\n\\n        uint256 expectedPrincipal;\\n        uint256 expectedInterest;\\n        // query total outstanding amounts\\n        (expectedPrincipal, expectedInterest) = getExpectedRepaymentValues(\\n            agreementId,\\n            currentTimestamp\\n        );\\n        // TODO: Currently only allow Debtor to repay with amount >= expectedInterest of that time\\n        // Because, we haven't made any mechanism to manage outstanding interest amounts in the case when Debtor\\n        // repaid with amount < expectedInterest (at that moment)\\n        require(\\n            unitsOfRepayment >= expectedInterest,\\n            'LoanTermsContract: Expected interest amount is minimum.'\\n        );\\n\\n        // exceed expectation, Debtor can pay all at once\\n        if (unitsOfRepayment >= expectedPrincipal.add(expectedInterest)) {\\n            debtRegistry.setCompletedRepayment(agreementId);\\n            debtRegistry.addRepaidInterestAmount(agreementId, expectedInterest);\\n            debtRegistry.addRepaidPrincipalAmount(\\n                agreementId,\\n                expectedPrincipal\\n            );\\n            // put the remain to interest\\n            remains = unitsOfRepayment.sub(\\n                expectedPrincipal.add(expectedInterest)\\n            );\\n        } else {\\n            // if currently Debtor no need to repay for interest\\n            if (expectedInterest == 0) {\\n                if (unitsOfRepayment >= expectedPrincipal) {\\n                    debtRegistry.addRepaidPrincipalAmount(\\n                        agreementId,\\n                        expectedPrincipal\\n                    );\\n                    // with the remains\\n                    if (unitsOfRepayment.sub(expectedPrincipal) > 0) {\\n                        debtRegistry.addRepaidInterestAmount(\\n                            agreementId,\\n                            unitsOfRepayment.sub(expectedPrincipal)\\n                        );\\n                    }\\n                } else {\\n                    debtRegistry.addRepaidPrincipalAmount(\\n                        agreementId,\\n                        unitsOfRepayment\\n                    );\\n                }\\n            } else {\\n                // if expectedInterest > 0 ( & unitsOfRepayment >= expectedInterest)\\n                debtRegistry.addRepaidInterestAmount(\\n                    agreementId,\\n                    expectedInterest\\n                );\\n                if (unitsOfRepayment.sub(expectedInterest) > 0) {\\n                    // Debtor is not able to fulfill the expectedPrincipal as we already validated from first IF statement\\n                    // -> there is no remains for adding to repaidInterestAmount\\n                    debtRegistry.addRepaidPrincipalAmount(\\n                        agreementId,\\n                        unitsOfRepayment.sub(expectedInterest)\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Update Debt registry record\\n        debtRegistry.updateLastRepaymentTimestamp(\\n            agreementId,\\n            currentTimestamp\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n\\n        return remains;\\n    }\\n    function _validateNewInventoryCollateralParamsSecureLoan(\\n        bytes16 _oldCollateralParams,\\n        bytes16 _newCollateralParams,\\n        uint _additionAmount\\n    ) internal pure returns (bool) {\\n        bool isCollateralTokenIdCorrect = _oldCollateralParams.unpackCollateralTokenId()\\n        == _newCollateralParams.unpackCollateralTokenId();\\n\\n        bool isValidAmount = _newCollateralParams.unpackCollateralAmount()\\n        .sub(_oldCollateralParams.unpackCollateralAmount()) == _additionAmount;\\n\\n        return (\\n            isCollateralTokenIdCorrect &&\\n            isValidAmount\\n        );\\n\\n    }\\n\\n    /**\\n        * Function will be called by Debt Kernel, supports Debtor to deposit more collateral\\n        */\\n    function registerSecureLoanWithCollateral(\\n        bytes32 agreementId,\\n        address debtor,\\n        uint256 additionAmount,\\n        address collateral,\\n        bytes16 collateralInfoParameters\\n    ) public {\\n        // query current terms contract parameters\\n        bytes16 currentTermsParameters;\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n\\n        (, , currentTermsParameters) = debtRegistry.getTerms(agreementId);\\n\\n        // validate new paramters, compare the amounts\\n        require(\\n            _validateNewInventoryCollateralParamsSecureLoan(\\n                currentTermsParameters,\\n                collateralInfoParameters,\\n                additionAmount\\n            ),\\n            'Terms Contract: Invalid collateral information parameters.'\\n        );\\n\\n        // Sezie collateral tokens with addition amount\\n        registry.getInventoryCollateralizer()\\n            .additionInventoryCollateralize(\\n                agreementId,\\n                debtor,\\n                additionAmount,\\n                collateral\\n            );\\n\\n        // update terms contract parameters, then re evaluate CR\\n        debtRegistry.updateCollateralInfoParameters(\\n            agreementId,\\n            collateralInfoParameters\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n    }\\n\\n    /**\\n    * Function will be called by Debt Kernel, supports Debtor to deposit more collateral\\n    */\\n    function registerInsecureLoanByWithdrawCollateral(\\n        bytes32 agreementId,\\n        address debtor,\\n        uint256 withdrawAmount,\\n        address collateral,\\n        bytes16 collateralInfoParameters\\n    ) public {\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        address debtorOfAgreement = debtRegistry.getDebtor(agreementId);\\n        require(debtor == debtorOfAgreement, 'Invalid debtor of agreement');\\n\\n        uint256 newCollateralAmount = _validateNewCollateralAmount(\\n            agreementId,\\n            collateralInfoParameters,\\n            withdrawAmount,\\n            debtRegistry\\n        );\\n        // Calculate CR after sell collateral by invoice\\n        require(\\n            _validateNewCollateralRatioWithInvoice(\\n                0,\\n                agreementId,\\n                newCollateralAmount,\\n                debtRegistry\\n            ),\\n            'InventoryInterest: Invalid collateral ratio, bellow min collateral ratio'\\n        );\\n\\n        // Sezie collateral tokens with addition amount\\n        registry.getInventoryCollateralizer()\\n            .withdrawInventoryCollateralize(\\n            agreementId,\\n            debtor,\\n            withdrawAmount,\\n            collateral\\n        );\\n\\n        // update terms contract parameters, then re evaluate CR\\n        debtRegistry.updateCollateralInfoParameters(\\n            agreementId,\\n            collateralInfoParameters\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n    }\\n\\n    /**\\n    * Function will be called by Debt Kernel, supports Debtor to sell collateral\\n    */\\n    function registerSellCollateral(\\n        bytes32 agreementId,\\n        uint256 amountCollateral,\\n        uint256 price,\\n        uint256 fiatTokenIndex,\\n        address collateral,\\n        bytes16 collateralInfoParameters\\n    ) public {\\n        // TODO tanlm Temporary. Fix this\\n        address fiatTokenAddress = address(0);\\n        require(\\n            fiatTokenAddress != address(0),\\n            'Token address must different with NULL.'\\n        );\\n        require(amountCollateral > 0, 'Amount must greater than 0.');\\n        require(price > 0, 'Price must greater than 0.');\\n\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n\\n        uint256 _amount = _computePriceValue(amountCollateral, price);\\n        _validateNewCollateralAmount(\\n            agreementId,\\n            collateralInfoParameters,\\n            amountCollateral,\\n            debtRegistry\\n        );\\n\\n        bytes32 sellId = _getSellCollateralId(\\n            agreementId,\\n            _amount,\\n            fiatTokenIndex\\n        );\\n        debtRegistry.setWaitingSellCollateral(\\n            agreementId,\\n            sellId,\\n            _amount,\\n            fiatTokenIndex\\n        );\\n\\n        //Burn collateral\\n        _burnCollateralAndUpdateInfo(\\n            agreementId,\\n            amountCollateral,\\n            collateral,\\n            collateralInfoParameters,\\n            debtRegistry\\n        );\\n    }\\n\\n    /**\\n    * Function will be called by Debt Kernel, supports Buyer to pay for collateral by fiat\\n    */\\n    function registerPayCollateralByFiat(\\n        bytes32 agreementId,\\n        bytes32 sellCollateralId,\\n        address payer\\n    ) public {\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        require(\\n            debtRegistry.isWaitingSellCollateralExisted(\\n                agreementId,\\n                sellCollateralId\\n            ),\\n            'InventoryInterestTermsContract: Sell info not existed'\\n        );\\n        (uint256 _amount, uint256 fiatTokenIndex) = debtRegistry\\n            .getWaitingSellCollateral(agreementId, sellCollateralId);\\n\\n        // TODO tanlm: temporary. Fix this\\n        address fiatTokenAddress = address(0);\\n        require(\\n            fiatTokenAddress != address(0),\\n            'Token address must different with NULL.'\\n        );\\n\\n        if (debtRegistry.liquidatedLoan(agreementId)) {\\n            // Repay fully to loan\\n            registry.getInventoryLoanRepaymentRouter()\\n                ._doRepay(agreementId, payer, _amount, fiatTokenAddress);\\n            _amount = 0;\\n\\n        } else {\\n            (, uint256 collateralAmount) = debtRegistry\\n                .getCollateralInfoParameters(agreementId);\\n            uint256 currentInvoiceAmount = debtRegistry._getTotalInvoiceAmount(\\n                agreementId\\n            );\\n            uint256 minCollateralRatio = debtRegistry.getMinCollateralRatio(\\n                agreementId\\n            );\\n            // Calculate CR after sell collateral. If CR bellow min CR, must repay for the loan to make it equal min CR\\n            _amount = _repayLoanIfNeed(\\n                _amount,\\n                agreementId,\\n                collateralAmount,\\n                currentInvoiceAmount,\\n                [payer, fiatTokenAddress],\\n                minCollateralRatio\\n            );\\n        }\\n\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n\\n        //Transfer fiat from payer to trader\\n        if (_amount > 0) {\\n            address debtor = debtRegistry.getDebtor(agreementId);\\n            require(\\n                    IERC20(fiatTokenAddress)\\n                    .transferFrom(payer, debtor, _amount),\\n                'Unsuccessfully transferred remains amount to Debtor.'\\n            );\\n        }\\n    }\\n\\n    /**\\n    * Function will be called by Debt Kernel, supports Buyer to pay for collateral by invoice\\n    */\\n    function registerPayCollateralByInvoice(\\n        bytes32 agreementId,\\n        bytes32 sellCollateralId,\\n        address payer,\\n        uint256 dueDate,\\n        uint256 salt\\n    ) public returns (uint256) {\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        require(\\n            debtRegistry.isWaitingSellCollateralExisted(\\n                agreementId,\\n                sellCollateralId\\n            ),\\n            'InventoryInterestTermsContract: Sell info not existed'\\n        );\\n        (uint256 _amount, uint256 fiatTokenIndex) = debtRegistry\\n            .getWaitingSellCollateral(agreementId, sellCollateralId);\\n\\n        //Create AIT to trader and financed to inventory loan\\n        uint256 invoiceTokenId = _createAITFinanced(\\n            agreementId,\\n            payer,\\n            _amount,\\n            fiatTokenIndex,\\n            dueDate,\\n            salt,\\n            debtRegistry\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n\\n        return invoiceTokenId;\\n    }\\n\\n    /**\\n    Calculate CR after invoice payment and repay to loan if CR bellow min CR\\n    */\\n    function registerPayFromInvoice(\\n        bytes32 agreementId,\\n        uint256 invoiceId,\\n        address fiatTokenAddress,\\n        address payer\\n    ) public returns (uint256 remainAmount) {\\n        uint256 invoiceAmount = registry.getAcceptedInvoiceToken()\\n            .getFiatAmount(invoiceId);\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n\\n        uint256 currentInvoiceAmount = debtRegistry._getTotalInvoiceAmount(\\n            agreementId\\n        );\\n\\n        // query current terms contract parameters\\n        bytes16 currentCollateralInfoParameters;\\n        (, , currentCollateralInfoParameters) = debtRegistry.getTerms(\\n            agreementId\\n        );\\n\\n        uint256 currentCollateralAmount = currentCollateralInfoParameters.unpackCollateralAmount();\\n\\n        if (debtRegistry.liquidatedLoan(agreementId)) {\\n            // Repay fully to loan\\n            registry.getInventoryLoanRepaymentRouter()\\n                ._doRepay(agreementId, payer, invoiceAmount, fiatTokenAddress);\\n            remainAmount = 0;\\n\\n        } else {\\n            uint256 minCollateralRatio = debtRegistry.getMinCollateralRatio(\\n                agreementId\\n            );\\n            // Calculate CR after pay invoice. If CR bellow min CR, must repay for the loan to make it equal min CR\\n            remainAmount = _repayLoanIfNeed(\\n                invoiceAmount,\\n                agreementId,\\n                currentCollateralAmount,\\n                currentInvoiceAmount - invoiceAmount,\\n                [payer, fiatTokenAddress],\\n                minCollateralRatio\\n            );\\n        }\\n\\n        //Remove invoice relate to loan\\n        debtRegistry.removeInvoiceId(agreementId, invoiceId);\\n    }\\n\\n    function _validateNewInventoryTermsContractParamsDrawdown(\\n        bytes32 _oldTermsContractParameters,\\n        bytes32 _newTermsContractParameters,\\n        uint _drawdownAmount\\n    ) internal pure returns (bool) {\\n        bool isValidPrincipalAmount = _newTermsContractParameters.unpackPrincipalAmount()\\n        .sub(_oldTermsContractParameters.unpackPrincipalAmount()) == _drawdownAmount;\\n\\n        bool isInterestRateCorrect = _oldTermsContractParameters.unpackInterestRate()\\n        == _newTermsContractParameters.unpackInterestRate();\\n\\n        bool isAmortizationUnitTypeCorrect = _oldTermsContractParameters.unpackAmortizationUnitType()\\n        == _newTermsContractParameters.unpackAmortizationUnitType();\\n\\n        bool isTermLengthInAmortizationUnitsCorrect = _oldTermsContractParameters.unpackTermLengthInAmortizationUnits()\\n        == _newTermsContractParameters.unpackTermLengthInAmortizationUnits();\\n\\n        bool isGracePeriodInDaysCorrect = _oldTermsContractParameters.unpackGracePeriodInDays()\\n        == _newTermsContractParameters.unpackGracePeriodInDays();\\n\\n        return (\\n            isValidPrincipalAmount &&\\n            isInterestRateCorrect &&\\n            isAmortizationUnitTypeCorrect &&\\n            isTermLengthInAmortizationUnitsCorrect &&\\n            isGracePeriodInDaysCorrect\\n        );\\n\\n    }\\n\\n    /**\\n    * Function will be called by Debt Kernel, supports Debtor to deposit more collateral\\n    */\\n    function registerDrawdownLoan(\\n        bytes32 agreementId,\\n        uint256 drawdownAmount,\\n        bytes32 termsContractParameters\\n    ) public {\\n        // query current terms contract parameters\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        require(\\n            drawdownAmount > 0,\\n            'Inventory Terms Contract: Drawdown amount must greater than 0.'\\n        );\\n\\n        (, bytes32 currentTermsParameters, ) = debtRegistry.getTerms(\\n            agreementId\\n        );\\n        // validate new paramters, compare the amounts\\n        require(\\n            _validateNewInventoryTermsContractParamsDrawdown(\\n                currentTermsParameters,\\n                termsContractParameters,\\n                drawdownAmount\\n            ),\\n            'Inventory Terms Contract: Invalid terms contract parameters.'\\n        );\\n        require(\\n            _validateNewCollateralRatioWhenDrawdown(\\n                agreementId,\\n                drawdownAmount,\\n                debtRegistry\\n            ),\\n            'InventoryInterest: Invalid collateral ratio, bellow min collateral ratio'\\n        );\\n\\n        // update terms contract parameters, then re evaluate CR\\n        debtRegistry.updateLoanTermParameters(\\n            agreementId,\\n            termsContractParameters\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n\\n    }\\n\\n    function _validateNewInventoryCollateralParamsSellCollateral(\\n        bytes16 _oldCollateralParams,\\n        bytes16 _newCollateralParams,\\n        uint _sellAmount\\n    ) internal pure returns (bool) {\\n        bool isCollateralTokenIdCorrect = _oldCollateralParams & 0xffffffff000000000000000000000000\\n        == _newCollateralParams & 0xffffffff000000000000000000000000;\\n\\n        bool isValidAmount = uint256(uint128(_oldCollateralParams) & 0x00000000ffffffffffffffffffffffff)\\n        .sub(uint256(uint128(_newCollateralParams) & 0x00000000ffffffffffffffffffffffff)) == _sellAmount;\\n\\n        return (\\n        isCollateralTokenIdCorrect &&\\n        isValidAmount\\n        );\\n\\n    }\\n\\n    // helper for sellCollateral\\n    function _validateNewCollateralAmount(\\n        bytes32 agreementId,\\n        bytes16 collateralInfoParameters,\\n        uint256 amountCollateral,\\n        InventoryLoanRegistry debtRegistry\\n    ) private view returns (uint256 newCollateralAmount) {\\n        // query current terms contract parameters\\n        bytes16 currentCollateralInfoParameters;\\n        (, , currentCollateralInfoParameters) = debtRegistry.getTerms(\\n            agreementId\\n        );\\n\\n        // validate new paramters, compare the amounts\\n        require(\\n            _validateNewInventoryCollateralParamsSellCollateral(\\n                currentCollateralInfoParameters,\\n                collateralInfoParameters,\\n                amountCollateral\\n            ),\\n            'Inventory Terms Contract: Invalid collateral information parameters.'\\n        );\\n\\n        newCollateralAmount = collateralInfoParameters.unpackCollateralAmount();\\n    }\\n\\n    /**\\n    *\\n    */\\n    function registerForeclosureLoan(bytes32 agreementId)\\n        public\\n    {\\n        InventoryLoanRegistry inventoryLoanDebtRegistry = registry.getInventoryLoanRegistry();\\n        require(\\n            !inventoryLoanDebtRegistry.completedLoans(agreementId),\\n            'InventoryInterestTermsContract: Unable to foreclosure loan when Loan terms is fulfilled.'\\n        );\\n        require(\\n            inventoryLoanDebtRegistry.isExpiredOrReadyForLiquidation(\\n                agreementId\\n            ),\\n            'InventoryInterestTermsContract: Still not meet the requirements to foreclosure.'\\n        );\\n\\n        inventoryLoanDebtRegistry.setLoanLiquidated(agreementId);\\n    }\\n\\n    function _validateNewCollateralRatioWithInvoice(\\n        uint256 _amountSold,\\n        bytes32 agreementId,\\n        uint256 newCollateralAmount,\\n        InventoryLoanRegistry inventoryLoanDebtRegistry\\n    ) private view returns (bool) {\\n        uint256 currentInvoiceAmount = inventoryLoanDebtRegistry\\n            ._getTotalInvoiceAmount(agreementId);\\n        (uint256 cr, , ) = _computeExpectedCR(\\n            agreementId,\\n            newCollateralAmount,\\n            currentInvoiceAmount + _amountSold,\\n            0\\n        );\\n        uint256 minCollateralRatio = inventoryLoanDebtRegistry\\n            .getMinCollateralRatio(agreementId);\\n\\n        if (cr < minCollateralRatio) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function _validateNewCollateralRatioWhenDrawdown(\\n        bytes32 agreementId,\\n        uint256 _amountDrawdown,\\n        InventoryLoanRegistry inventoryLoanDebtRegistry\\n    ) private view returns (bool) {\\n        uint256 currentInvoiceAmount = inventoryLoanDebtRegistry\\n            ._getTotalInvoiceAmount(agreementId);\\n        (, uint256 collateralAmount) = inventoryLoanDebtRegistry\\n            .getCollateralInfoParameters(agreementId);\\n\\n        (uint256 cr, , ) = _computeExpectedCR(\\n            agreementId,\\n            collateralAmount,\\n            currentInvoiceAmount,\\n            _amountDrawdown\\n        );\\n        uint256 minCollateralRatio = inventoryLoanDebtRegistry\\n            .getMinCollateralRatio(agreementId);\\n\\n        if (cr < minCollateralRatio) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    // Calculate CR after sell collateral. If CR bellow min CR, must repay for the loan to make it equal min CR\\n    function _repayLoanIfNeed(\\n        uint256 _amountSold,\\n        bytes32 agreementId,\\n        uint256 newCollateralAmount,\\n        uint256 invoiceValue,\\n        address[2] memory payerInfo, //1-payer, 2-fiatTokenAddress\\n        uint256 minCollateralRatio\\n    ) private returns (uint256) {\\n        (uint256 cr, uint256 lastPrice, uint256 totalRemain) = _computeExpectedCR(\\n            agreementId,\\n            newCollateralAmount,\\n            invoiceValue,\\n            0\\n        );\\n\\n        if (cr < minCollateralRatio) {\\n            // repay loan until CR = min CR\\n            uint256 principalValueToSatisfyMinCR = _computePrincipalValueRequire(\\n                newCollateralAmount,\\n                lastPrice,\\n                invoiceValue,\\n                minCollateralRatio\\n            );\\n            uint256 repayValueToSatisfyMinCR;\\n\\n            if (principalValueToSatisfyMinCR == 0) {\\n                repayValueToSatisfyMinCR = totalRemain;\\n            } else {\\n                repayValueToSatisfyMinCR =\\n                    totalRemain -\\n                    principalValueToSatisfyMinCR;\\n            }\\n\\n            if (repayValueToSatisfyMinCR > _amountSold) {\\n                registry.getInventoryLoanRepaymentRouter()\\n                    ._doRepay(\\n                    agreementId,\\n                    payerInfo[0],\\n                    _amountSold,\\n                    payerInfo[1]\\n                );\\n                _amountSold = 0;\\n\\n            } else {\\n                registry.getInventoryLoanRepaymentRouter()\\n                    ._doRepay(\\n                    agreementId,\\n                    payerInfo[0],\\n                    repayValueToSatisfyMinCR,\\n                    payerInfo[1]\\n                );\\n                _amountSold = _amountSold.sub(repayValueToSatisfyMinCR);\\n            }\\n        }\\n\\n        return _amountSold;\\n    }\\n\\n    // Calculate CR after sell collateral\\n    function _computeExpectedCR(\\n        bytes32 agreementId,\\n        uint256 newCollateralAmount,\\n        uint256 invoiceAmount,\\n        uint256 drawdownAmount\\n    )\\n        private\\n        view\\n        returns (uint256 cr, uint256 lastPrice, uint256 totalRemain)\\n    {\\n        lastPrice = registry.getInventoryLoanRegistry()\\n            .getCollateralLastPrice(agreementId);\\n\\n        uint256 currentTimestamp = block.timestamp;\\n        totalRemain = getTotalExpectedRepaymentValue(\\n            agreementId,\\n            currentTimestamp\\n        );\\n\\n        cr = _computeCR(\\n            newCollateralAmount,\\n            lastPrice,\\n            invoiceAmount,\\n            totalRemain + drawdownAmount\\n        );\\n    }\\n\\n    function _burnCollateralAndUpdateInfo(\\n        bytes32 agreementId,\\n        uint256 amountCollateral,\\n        address collateral,\\n        bytes16 collateralInfoParameters,\\n        InventoryLoanRegistry debtRegistry\\n    ) private {\\n        registry.getInventoryCollateralizer()\\n            .burnInventoryCollateralize(\\n            agreementId,\\n            amountCollateral,\\n            collateral\\n        );\\n\\n        // update terms contract parameters, then re evaluate CR\\n        debtRegistry.updateCollateralInfoParameters(\\n            agreementId,\\n            collateralInfoParameters\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n    }\\n\\n    function _createAITFinanced(\\n        bytes32 agreementId,\\n        address payer,\\n        uint256 _amount,\\n        uint256 fiatTokenIndex,\\n        uint256 dueDate,\\n        uint256 salt,\\n        InventoryLoanRegistry debtRegistry\\n    ) private returns (uint256 invoiceTokenId) {\\n        AcceptedInvoiceToken ait = registry.getAcceptedInvoiceToken();\\n\\n        // TODO tanlm Temporary disable\\n//        invoiceTokenId = ait.mint(\\n//            [payer, address(registry.getInventoryCollateralizer())],\\n//            _amount,\\n//            fiatTokenIndex,\\n//            dueDate,\\n//            false,\\n//            salt\\n//        );\\n//        invoiceTokenId = 0;\\n/*\\n        ait.beginInventoryFinancing(invoiceTokenId, agreementId);\\n        ait.modifyBeneficiary(\\n            invoiceTokenId,\\n            debtRegistry.getDebtor(agreementId)\\n        );\\n*/\\n        debtRegistry.insertInvoiceFinancedToInventoryLoan(\\n            agreementId,\\n            invoiceTokenId\\n        );\\n    }\\n\\n    /**\\n     * Helper function for computing the hash of a given issuance,\\n     * and, in turn, its agreementId\\n     */\\n    function _getSellCollateralId(\\n        bytes32 agreementId,\\n        uint256 amountPayment,\\n        uint256 fiatTokenIndex\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(agreementId, amountPayment, fiatTokenIndex)\\n            );\\n    }\\n\\n    /**\\n    *\\n    */\\n    function getTermEndTimestamp(bytes32 _agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        InterestParams memory params = _unpackParamsForAgreementID(\\n            LoanTypes.INVENTORY_FINANCE,\\n            _agreementId\\n        );\\n        return params.termEndUnixTimestamp;\\n    }\\n\\n    /**\\n    * Term will be completed if participants met all of conditions\\n    */\\n    function registerConcludeTerm(bytes32 agreementId) public {\\n        // validate repayment status\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        require(\\n            debtRegistry.completedRepayment(agreementId),\\n            'Debtor has not completed repayment yet.'\\n        );\\n        registry.getInventoryCollateralizer()\\n            .returnInventoryCollateral(agreementId);\\n        if (debtRegistry.liquidatedLoan(agreementId)) {\\n            debtRegistry.removeLiquidatedLoan(agreementId);\\n        }\\n\\n        debtRegistry.setCompletedLoan(agreementId);\\n    }\\n\\n    /**\\n    * Expected repayment value with Amortization of Interest and Principal\\n    * (AMORTIZATION) - will be used for repayment from Debtor\\n    */\\n    function getExpectedRepaymentValues(bytes32 agreementId, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256 expectedPrincipal, uint256 expectedInterest)\\n    {\\n        InterestParams memory params = _unpackParamsForAgreementID(\\n            LoanTypes.INVENTORY_FINANCE,\\n            agreementId\\n        );\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n\\n        uint256 repaidPrincipalAmount = debtRegistry.getRepaidPrincipalAmount(\\n            agreementId\\n        );\\n        uint256 repaidInterestAmount = debtRegistry.getRepaidInterestAmount(\\n            agreementId\\n        );\\n        uint256 lastRepaymentTimestamp = debtRegistry.getLastRepaymentTimestamp(\\n            agreementId\\n        );\\n\\n        bool isManualInterestLoan = debtRegistry.manualInterestLoan(agreementId);\\n        uint256 manualInterestAmountLoan;\\n        if (isManualInterestLoan) {\\n            manualInterestAmountLoan = debtRegistry.getManualInterestAmountLoan(\\n                agreementId\\n            );\\n        }\\n\\n        (\\n            expectedPrincipal,\\n            expectedInterest\\n        ) = _getExpectedRepaymentValuesToTimestamp(\\n            params,\\n            lastRepaymentTimestamp,\\n            timestamp,\\n            repaidPrincipalAmount,\\n            repaidInterestAmount,\\n            isManualInterestLoan,\\n            manualInterestAmountLoan\\n        );\\n    }\\n\\n    // Calculate interest amount for a duration with specific Principal amount\\n    function _calculateInterestForDuration(\\n        uint _principalAmount,\\n        uint _interestRate,\\n        uint _durationLengthInSec\\n    ) internal pure returns (uint) {\\n        return _principalAmount.mul(_interestRate).mul(_durationLengthInSec.div(DAY_LENGTH_IN_SECONDS))\\n        .div(INTEREST_RATE_SCALING_FACTOR_MULTIPLIER).div(YEAR_LENGTH_IN_DAYS);\\n    }\\n\\n    function getStartDateInTimestamp(uint _timestamp) private pure returns (uint) {\\n        uint secondInDay = _timestamp.mod(DAY_LENGTH_IN_SECONDS);\\n        return  _timestamp.sub(secondInDay);\\n    }\\n    // Calculate interest amount Debtor need to pay until current date\\n    function _calculateInterestAmountToTimestamp(\\n        uint _principalAmount,\\n        uint _currentPrincipalAmount,\\n        uint _paidInterestAmount,\\n        uint _annualInterestRate,\\n        uint _startTermTimestamp,\\n        uint _endTermTimestamp,\\n        uint _lastRepayTimestamp,\\n        uint _timestamp\\n    ) internal pure returns (uint) {\\n        if (_timestamp <= _startTermTimestamp) {\\n            return 0;\\n        }\\n        uint interest = 0;\\n\\n        uint startOfDayOfLastRepay = getStartDateInTimestamp(_lastRepayTimestamp);\\n        uint startOfDayOfTermsStart = getStartDateInTimestamp(_startTermTimestamp);\\n        uint startOfDayToCalculateInterest = getStartDateInTimestamp(_timestamp);\\n\\n        uint elapseTimeFromLastRepay = startOfDayToCalculateInterest.sub(startOfDayOfLastRepay);\\n        uint elapseTimeFromStart = startOfDayToCalculateInterest.sub(startOfDayOfTermsStart).add(DAY_LENGTH_IN_SECONDS);\\n\\n        // If still within the term length\\n        if (_timestamp < _endTermTimestamp) {\\n            // Have just made new repayment\\n            if (elapseTimeFromLastRepay == 0 && _paidInterestAmount > 0) {\\n                interest = 0;\\n            } else {\\n                if (_paidInterestAmount > 0) {\\n                    // Has made at least 1 repayment\\n                    interest = _calculateInterestForDuration(\\n                        _currentPrincipalAmount,\\n                        _annualInterestRate,\\n                        elapseTimeFromLastRepay\\n                    );\\n                } else {\\n                    // Haven't made any repayment\\n                    interest = _calculateInterestForDuration(\\n                        _principalAmount,\\n                        _annualInterestRate,\\n                        elapseTimeFromStart\\n                    );\\n                }\\n            }\\n\\n        } else if (_timestamp >= _endTermTimestamp) {\\n            // If debtor has made at least 1 repayment\\n            if (_paidInterestAmount > 0) {\\n                interest = _calculateInterestForDuration(\\n                    _currentPrincipalAmount,\\n                    _annualInterestRate,\\n                    elapseTimeFromLastRepay\\n                );\\n            } else {\\n                interest = _calculateInterestForDuration(\\n                    _principalAmount,\\n                    _annualInterestRate,\\n                    elapseTimeFromStart\\n                );\\n            }\\n        } else {\\n            interest = 0;\\n        }\\n        return interest;\\n    }\\n\\n    function _getExpectedRepaymentValuesToTimestamp(\\n        InterestParams memory _params,\\n        uint _lastRepaymentTimestamp, // timestamp of last repayment from debtor\\n        uint _timestamp,\\n        uint repaidPrincipalAmount,\\n        uint repaidInterestAmount,\\n        bool isManualInterestLoan,\\n        uint manualInterestAmountLoan\\n    ) internal pure returns (uint expectedPrinciapal, uint expectedInterest) {\\n        uint outstandingPrincipal = _params.principalAmount.sub(repaidPrincipalAmount);\\n\\n        expectedPrinciapal = outstandingPrincipal;\\n\\n        if (isManualInterestLoan) {\\n            expectedInterest = manualInterestAmountLoan;\\n        } else {\\n            expectedInterest = _calculateInterestAmountToTimestamp(\\n                _params.principalAmount,\\n                outstandingPrincipal,\\n                repaidInterestAmount,\\n                _params.interestRate,\\n                _params.termStartUnixTimestamp,\\n                _params.termEndUnixTimestamp,\\n                _lastRepaymentTimestamp,\\n                _timestamp\\n            );\\n        }\\n    }\\n\\n    function getTermStartUnixTimestamp(bytes32 _agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        InterestParams memory params = _unpackParamsForAgreementID(\\n            LoanTypes.INVENTORY_FINANCE,\\n            _agreementId\\n        );\\n        return params.termStartUnixTimestamp;\\n    }\\n\\n    /**\\n    * Get TOTAL expected repayment value at specific timestamp\\n    * (NO AMORTIZATION)\\n    */\\n    function getTotalExpectedRepaymentValue(\\n        bytes32 agreementId,\\n        uint256 timestamp\\n    )\\n        public\\n        view\\n        returns (uint256 expectedRepaymentValue)\\n    {\\n        uint256 principalAmount;\\n        uint256 interestAmount;\\n        (principalAmount, interestAmount) = getExpectedRepaymentValues(\\n            agreementId,\\n            timestamp\\n        );\\n        expectedRepaymentValue = principalAmount.add(interestAmount);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x9f10c3b1d683b06797c7d7c061d52fb9b5a1922523746b2e6d19263dc47a9199\",\"license\":\"MIT\"},\"contracts/protocol/loan/inventory/InventoryLoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport './InventoryInterestTermsContract.sol';\\nimport '../../cma/SupplyChainManagementProgram.sol';\\nimport './InventoryLoanRegistry.sol';\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract InventoryLoanKernel is PausableUpgradeable, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using ConfigHelper for Registry;\\n\\n    Registry registry;\\n\\n    bytes32 public constant NULL_ISSUANCE_HASH = bytes32(0);\\n\\n    /* NOTE: Currently, the `view` keyword does not actually enforce the\\n    static nature of the method; this will change in the future, but for now, in\\n    order to prevent reentrancy we'll need to arbitrarily set an upper bound on\\n    the gas limit allotted for certain method calls. */\\n    uint16 public constant EXTERNAL_QUERY_GAS_LIMIT = 8000;\\n\\n    mapping(bytes32 => bool) public issuanceCancelled;\\n    mapping(bytes32 => bool) public debtOrderCancelled;\\n    mapping(bytes32 => bool) public debtOrderCompleted;\\n\\n\\n    ///////////////////////////\\n    // EVENTS\\n    ///////////////////////////\\n\\n    event LogDebtOrderFilled(\\n        bytes32 indexed _agreementId,\\n        uint256 _principal,\\n        address _principalToken,\\n        address _relayer\\n    );\\n\\n    event LogIssuanceCancelled(\\n        bytes32 indexed _agreementId,\\n        address indexed _cancelledBy\\n    );\\n\\n    event LogDebtOrderCancelled(\\n        bytes32 indexed _debtOrderHash,\\n        address indexed _cancelledBy\\n    );\\n\\n    event LogFeeTransfer(\\n        address indexed payer,\\n        address token,\\n        uint256 amount,\\n        address indexed beneficiary\\n    );\\n\\n    struct Issuance {\\n        address version;\\n        address debtor;\\n        address termsContract;\\n        bytes32 termsContractParameters;\\n        bytes16 collateralInfoParameters;\\n        uint256 salt;\\n        bytes32 agreementId;\\n    }\\n\\n    struct DebtOrder {\\n        Issuance issuance;\\n        uint256 principalAmount;\\n        address principalToken;\\n        uint256 creditorFee;\\n        uint256 debtorFee;\\n        address relayer;\\n        uint256 expirationTimestampInSec;\\n        bytes32 debtOrderHash;\\n        address priceFeedOperator;\\n        uint256 minCollateralRatio;\\n        uint256 liquidationRatio;\\n    }\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n    ////////////////////////\\n    // INTERNAL FUNCTIONS //\\n    ////////////////////////\\n\\n    /**\\n     * Returns the hash of the debt order.\\n     */\\n    function _getDebtOrderHash(DebtOrder memory debtOrder)\\n        internal\\n        view\\n        returns (bytes32 _debtorMessageHash)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    debtOrder.issuance.agreementId,\\n                    debtOrder.principalAmount,\\n                    debtOrder.principalToken,\\n                    debtOrder.debtorFee,\\n                    debtOrder.creditorFee,\\n                    debtOrder.relayer,\\n                    debtOrder.expirationTimestampInSec\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Helper function that constructs a hashed debt order struct given the raw parameters\\n     * of a debt order.\\n     */\\n    function _getDebtOrder(\\n        address[6] memory orderAddresses,\\n        uint256[7] memory orderValues,\\n        bytes32[1] memory orderBytes32,\\n        bytes16[1] memory orderBytes16\\n    ) internal view returns (DebtOrder memory _debtOrder) {\\n        DebtOrder memory debtOrder = DebtOrder({\\n            issuance: _getIssuance(\\n                orderAddresses[0],\\n                orderAddresses[1],\\n                orderAddresses[2],\\n                orderValues[0],\\n                orderBytes32[0],\\n                orderBytes16[0]\\n            ),\\n            principalToken: orderAddresses[3],\\n            relayer: orderAddresses[4],\\n            principalAmount: orderValues[1],\\n            creditorFee: orderValues[2],\\n            debtorFee: orderValues[3],\\n            expirationTimestampInSec: orderValues[4],\\n            debtOrderHash: bytes32(0),\\n            priceFeedOperator: orderAddresses[5],\\n            minCollateralRatio: orderValues[5],\\n            liquidationRatio: orderValues[6]\\n        });\\n\\n        debtOrder.debtOrderHash = _getDebtOrderHash(debtOrder);\\n\\n        return debtOrder;\\n    }\\n\\n    /**\\n     * Helper function that returns an issuance's hash\\n     */\\n    function _getAgreementId(\\n        address version,\\n        address debtor,\\n        address termsContract,\\n        uint256 salt,\\n        bytes32 termsContractParameters\\n    ) internal pure returns (bytes32 _agreementId) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    debtor,\\n                    termsContract,\\n                    termsContractParameters,\\n                    salt\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Helper function that constructs a hashed issuance structs from the given\\n     * parameters.\\n     */\\n    function _getIssuance(\\n        address _version,\\n        address _debtor,\\n        address _termsContract,\\n        uint256 _salt,\\n        bytes32 _termsContractParameters,\\n        bytes16 _collateralInfoParameters\\n    ) internal pure returns (Issuance memory _issuance) {\\n        Issuance memory issuance = Issuance({\\n            version: _version,\\n            debtor: _debtor,\\n            termsContract: _termsContract,\\n            salt: _salt,\\n            termsContractParameters: _termsContractParameters,\\n            collateralInfoParameters: _collateralInfoParameters,\\n            agreementId: _getAgreementId(\\n                _version,\\n                _debtor,\\n                _termsContract,\\n                _salt,\\n                _termsContractParameters\\n            )\\n        });\\n\\n        return issuance;\\n    }\\n\\n    /**\\n     * Helper function that mints LAT associated with the\\n     * given issuance and grants it to the beneficiary (creditor).\\n     */\\n    function _issueDebtAgreement(\\n        address beneficiary,\\n        DebtOrder memory debtOrder\\n    ) internal returns (bytes32) {\\n        uint256[4] memory valueParams = [\\n            debtOrder.minCollateralRatio,\\n            debtOrder.liquidationRatio,\\n            debtOrder.expirationTimestampInSec,\\n            debtOrder.issuance.salt\\n        ];\\n        //\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n        bytes32 entryHash = debtRegistry.insert(\\n            debtOrder.issuance.version,\\n            beneficiary,\\n            debtOrder.issuance.debtor,\\n            debtOrder.issuance.termsContract,\\n            debtOrder.priceFeedOperator,\\n            debtOrder.principalToken,\\n            debtOrder.issuance.termsContractParameters,\\n            debtOrder.issuance.collateralInfoParameters,\\n            valueParams\\n        );\\n\\n        registry.getLoanAssetToken().mint(beneficiary, uint256(entryHash));\\n\\n        //\\n        require(\\n            entryHash == debtOrder.issuance.agreementId,\\n            \\\"Newly minted token's Id is different with agreement Id.\\\"\\n        );\\n\\n        return (debtOrder.issuance.agreementId);\\n    }\\n\\n    function _burnLoanAssetToken(address creditor, bytes32 agreementId)\\n        internal\\n    {\\n        registry.getLoanAssetToken().burn(uint256(agreementId));\\n    }\\n\\n    /**\\n     * Helper function for querying an address' balance on a given token.\\n     */\\n    function _getBalance(address token, address owner)\\n        internal\\n        view\\n        returns (uint256 _balance)\\n    {\\n        // Limit gas to prevent reentrancy.\\n        return IERC20(token).balanceOf(owner);\\n    }\\n\\n    /**\\n     * Helper function for querying an address' allowance to the 0x transfer proxy.\\n     */\\n    function _getAllowance(address token, address owner)\\n        internal\\n        view\\n        returns (uint256 _allowance)\\n    {\\n        // Limit gas to prevent reentrancy.\\n        return IERC20(token).allowance(owner, address(this));\\n    }\\n\\n    /**\\n     * Given a hashed message, a signer's address, and a signature, returns\\n     * whether the signature is valid.\\n     */\\n    function _isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bool _valid) {\\n        return\\n            signer ==\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash)\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n    }\\n\\n    /**\\n     * Helper function transfers a specified amount of tokens between two parties\\n     * using the token transfer proxy contract.\\n     */\\n    function _transferTokensFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool success) {\\n        return IERC20(token).transferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * Asserts that debt order meets all validity requirements described in\\n     * the Kernel specification document.\\n     */\\n    function _assertDebtOrderValidityInvariants(DebtOrder memory debtOrder)\\n        internal\\n        returns (bool _orderIsValid)\\n    {\\n        // Validate fee amount\\n        // uint totalFees = debtOrder.creditorFee.add(debtOrder.debtorFee);\\n\\n        // Invariant: debtor is given enough principal to cover at least debtorFees\\n        if (debtOrder.principalAmount < debtOrder.debtorFee) {\\n            return false;\\n        }\\n\\n        // Invariant: debt order must not be expired\\n        // solhint-disable-next-line not-rely-on-time\\n        if (debtOrder.expirationTimestampInSec < block.timestamp) {\\n            return false;\\n        }\\n\\n        // Invariant: debt order's issuance must not have been cancelled\\n        if (issuanceCancelled[debtOrder.issuance.agreementId]) {\\n            return false;\\n        }\\n\\n        // Invariant: debt order itself must not have been cancelled\\n        if (debtOrderCancelled[debtOrder.debtOrderHash]) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Asserts that a debt order meets all consensuality requirements\\n     * described in the DebtKernel specification document.\\n     */\\n    function _assertDebtOrderConsensualityInvariants(\\n        DebtOrder memory debtOrder,\\n        address creditor,\\n        uint8[2] memory signaturesV,\\n        bytes32[2] memory signaturesR,\\n        bytes32[2] memory signaturesS\\n    ) internal returns (bool _orderIsConsensual) {\\n        // Invariant: debtor's signature must be valid, unless debtor is submitting order\\n        if (msg.sender != debtOrder.issuance.debtor) {\\n            if (\\n                !_isValidSignature(\\n                    debtOrder.issuance.debtor,\\n                    debtOrder.debtOrderHash,\\n                    signaturesV[0],\\n                    signaturesR[0],\\n                    signaturesS[0]\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        // Invariant: creditor's signature must be valid, unless creditor is submitting order\\n        if (msg.sender != creditor) {\\n            if (\\n                !_isValidSignature(\\n                    creditor,\\n                    debtOrder.debtOrderHash,\\n                    signaturesV[1],\\n                    signaturesR[1],\\n                    signaturesS[1]\\n                )\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *\\n     */\\n    function _assertDebtExisting(bytes32 agreementId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return registry.getLoanAssetToken().ownerOf(uint256(agreementId)) != address(0);\\n    }\\n\\n    /**\\n     */\\n    function _assertCompletedRepayment(bytes32 agreementId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // TODO change to InventoryLoanRegistry\\n        return registry.getInventoryLoanRegistry().completedRepayment(agreementId);\\n    }\\n\\n    //Conclude a loan, stop lending/loan terms or allow the loan loss\\n    function _concludeLoan(\\n        address creditor,\\n        bytes32 agreementId,\\n        address termContract\\n    ) internal {\\n        require(creditor != address(0), 'Invalid creditor account.');\\n        require(agreementId != bytes32(0), 'Invalid agreement id.');\\n        require(termContract != address(0), 'Invalid terms contract.');\\n\\n        if (\\n            !_assertDebtExisting(agreementId) ||\\n            !_assertCompletedRepayment(agreementId)\\n        ) {\\n            revert(\\n                'Debt does not exsits or Debtor have not completed repayment.'\\n            );\\n        }\\n\\n        InventoryInterestTermsContract(termContract)\\n            .registerConcludeTerm(agreementId);\\n\\n        _burnLoanAssetToken(creditor, agreementId);\\n\\n        (uint256 collateralId, ) = registry.getInventoryLoanRegistry()\\n            .getCollateralInfoParameters(agreementId);\\n        registry.getSupplyChainManagementProgram()\\n            .removeAgreementFromCommodity(collateralId, agreementId);\\n    }\\n\\n    // Transfer fee to beneficiaries\\n    function _transferFeesToBeneficiaries(\\n        address payer,\\n        address from,\\n        address token,\\n        address[5] memory beneficiaries,\\n        uint256[5] memory amounts\\n    ) internal {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0 && beneficiaries[i] != address(0x0)) {\\n                _transferTokensFrom(token, from, beneficiaries[i], amounts[i]);\\n                emit LogFeeTransfer(payer, token, amounts[i], beneficiaries[i]);\\n            }\\n        }\\n    }\\n\\n    function _sumTotalFees(uint256[5] memory amounts)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            totalAmount = totalAmount.add(amounts[i]);\\n        }\\n        return totalAmount;\\n    }\\n\\n    function getSignatureRS()\\n        internal\\n        pure\\n        returns (bytes32[2] memory signatures)\\n    {\\n        bytes32[2] memory signaturesRS;\\n        return signaturesRS;\\n    }\\n\\n    function getSignatureV()\\n        internal\\n        pure\\n        returns (uint8[2] memory signatures)\\n    {\\n        uint8[2] memory signaturesV;\\n        return signaturesV;\\n    }\\n\\n    function _fillDebtOrder(\\n        address creditor,\\n        address buyer,\\n        uint256 principalAmount,\\n        address[6] calldata orderAddresses, // 1-repayment router, 2-debtor, 3-termcontract, 4-principalTokenAddress, 5-relayer, 6-priceFeeOperator, 7-creditor\\n        uint256[7] calldata orderValues, // 1-salt, 2-principalAmount, 3-creditorFee, 4-debtorFee, 5-expirationTimestampInSec, 6-minCR, 7-liquidationRatio\\n        bytes32[1] calldata orderBytes32, // 1-termsContractParameters\\n        bytes16[1] calldata orderBytes16, // 1-collateralInfoParameters\\n        address[5] calldata debtorFeeBeneficiaries,\\n        address[5] calldata creditorFeeBeneficiaries,\\n        uint256[5] calldata debtorFeeAmounts,\\n        uint256[5] calldata creditorFeeAmounts\\n    ) external whenNotPaused returns (bytes32 _agreementId) {\\n        address[6] memory _orderAddresses = orderAddresses;\\n        _orderAddresses[1] = buyer;\\n        uint256[7] memory _orderValues = orderValues;\\n        _orderValues[1] = principalAmount;\\n\\n        return\\n            fillDebtOrder(\\n                creditor,\\n                _orderAddresses,\\n                _orderValues,\\n                orderBytes32,\\n                orderBytes16,\\n                getSignatureV(),\\n                getSignatureRS(),\\n                getSignatureRS(),\\n                debtorFeeBeneficiaries,\\n                creditorFeeBeneficiaries,\\n                debtorFeeAmounts,\\n                creditorFeeAmounts\\n            );\\n    }\\n\\n    function getAssetHolder(DebtOrder memory debtOrder)\\n        internal\\n        view\\n        returns (address _assetHolder)\\n    {\\n/*\\n        bool isEmbeddedFlow = EReceiptInventoryTradeFactory(\\n            contractRegistry.get(E_RECEIPT_INVENTORY_TRADE_FACTORY)\\n        )\\n            .isExistedTrade(msg.sender);\\n        address assetHolder = isEmbeddedFlow\\n            ? msg.sender\\n            : debtOrder.issuance.debtor;\\n*/\\n\\n        return debtOrder.issuance.debtor;\\n    }\\n\\n    ////////////////////////\\n    // EXTERNAL FUNCTIONS //\\n    ////////////////////////\\n\\n    /**\\n     * Fills a given debt order if it is valid and consensual.\\n     */\\n    function fillDebtOrder(\\n        address creditor,\\n        address[6] memory orderAddresses, // 1-repayment router, 2-debtor, 3-termcontract, 4-principalTokenAddress, 5-relayer, 6-priceFeeOperator\\n        uint256[7] memory orderValues, // 1-salt, 2-principalAmount, 3-creditorFee, 4-debtorFee, 5-expirationTimestampInSec, 6-minCR, 7-liquidationRatio\\n        bytes32[1] memory orderBytes32, // 1-termsContractParameters\\n        bytes16[1] memory orderBytes16, // 1-collateralInfoParameters\\n        uint8[2] memory signaturesV, // 1-debtorSignatureV, 2-creditorSignatureV\\n        bytes32[2] memory signaturesR, // 1-debtorSignatureR, 2-creditorSignatureR\\n        bytes32[2] memory signaturesS, // 1-debtorSignatureS, 2-creditorSignatureS,\\n        address[5] memory debtorFeeBeneficiaries,\\n        address[5] memory creditorFeeBeneficiaries,\\n        uint256[5] memory debtorFeeAmounts,\\n        uint256[5] memory creditorFeeAmounts\\n    ) public whenNotPaused returns (bytes32 _agreementId) {\\n        DebtOrder memory debtOrder = _getDebtOrder(\\n            orderAddresses,\\n            orderValues,\\n            orderBytes32,\\n            orderBytes16\\n        );\\n\\n        //_assertDebtOrderConsensualityInvariants\\n        if (!_assertDebtOrderValidityInvariants(debtOrder)) {\\n            revert('InventoryLoanDebtKernel: Invalid Debt Order');\\n        }\\n\\n        // Mint debt token and finalize debt agreement\\n        _issueDebtAgreement(creditor, debtOrder);\\n\\n        // Register debt agreement's start with terms contract\\n        // We permit terms contracts to be undefined (for debt agreements which\\n        // may not have terms contracts associated with them), and only\\n        // register a term's start if the terms contract address is defined.\\n        if (debtOrder.issuance.termsContract != address(0x0)) {\\n            require(\\n                InventoryInterestTermsContract(debtOrder.issuance.termsContract)\\n                    .registerTermStart(\\n                    debtOrder.issuance.agreementId,\\n                    [debtOrder.issuance.debtor, getAssetHolder(debtOrder)]\\n                ),\\n                'Register terms start was failed.'\\n            );\\n        }\\n\\n        // Transfer principal to debtor\\n        if (debtOrder.principalAmount > 0) {\\n            require(\\n                _transferTokensFrom(\\n                    debtOrder.principalToken,\\n                    creditor,\\n                    getAssetHolder(debtOrder),\\n                    debtOrder.principalAmount.sub(\\n                        _sumTotalFees(debtorFeeAmounts).add(debtOrder.debtorFee)\\n                    )\\n                ),\\n                'Unable to transfer principal tokens to Debtor.'\\n            );\\n        }\\n\\n        // Transfer debtorFee to relayer\\n        if (debtOrder.debtorFee > 0) {\\n            require(\\n                _transferTokensFrom(\\n                    debtOrder.principalToken,\\n                    creditor, // because creditor is the person who approved Tranfer Proxy to transfer, not Debtor\\n                    debtOrder.relayer,\\n                    debtOrder.debtorFee\\n                ),\\n                \\\"Unable to transfer debtor's fee to Relayer.\\\"\\n            );\\n            emit LogFeeTransfer(\\n                debtOrder.issuance.debtor,\\n                debtOrder.principalToken,\\n                debtOrder.debtorFee,\\n                debtOrder.relayer\\n            );\\n        }\\n\\n        // require(false, 'checkpoint DEBT_KERNEL REGISTER_TERM_START_1');\\n\\n        // Transfer debtorFee to relayer\\n        if (debtOrder.creditorFee > 0) {\\n            require(\\n                _transferTokensFrom(\\n                    debtOrder.principalToken,\\n                    creditor,\\n                    debtOrder.relayer,\\n                    debtOrder.creditorFee\\n                ),\\n                \\\"Unable to transfer creditor's fee to Relayer.\\\"\\n            );\\n            emit LogFeeTransfer(\\n                creditor,\\n                debtOrder.principalToken,\\n                debtOrder.creditorFee,\\n                debtOrder.relayer\\n            );\\n        }\\n\\n        _transferFeesToBeneficiaries(\\n            creditor,\\n            creditor,\\n            debtOrder.principalToken,\\n            creditorFeeBeneficiaries,\\n            creditorFeeAmounts\\n        );\\n\\n        _transferFeesToBeneficiaries(\\n            debtOrder.issuance.debtor,\\n            creditor, // because deducted directly from principal amount\\n            debtOrder.principalToken,\\n            debtorFeeBeneficiaries,\\n            debtorFeeAmounts\\n        );\\n\\n        (uint256 collateralId, ) = registry.getInventoryLoanRegistry()\\n            .getCollateralInfoParameters(debtOrder.issuance.agreementId);\\n        registry.getSupplyChainManagementProgram()\\n            .insertAgreementToCommodity(\\n            collateralId,\\n            debtOrder.issuance.agreementId\\n        );\\n\\n        emit LogDebtOrderFilled(\\n            debtOrder.issuance.agreementId,\\n            debtOrder.principalAmount,\\n            debtOrder.principalToken,\\n            debtOrder.relayer\\n        );\\n\\n        return debtOrder.issuance.agreementId;\\n    }\\n\\n    /**\\n     * Debtor call to complete this Debt whenever he thinks that he completed all repayment\\n     */\\n    function concludeLoan(\\n        address creditor,\\n        bytes32 agreementId,\\n        address termContract\\n    ) public whenNotPaused {\\n        _concludeLoan(creditor, agreementId, termContract);\\n    }\\n\\n    /**\\n     *\\n     */\\n    function secureLoanWithCollateral(\\n        bytes32 agreementId,\\n        address termsContract,\\n        address debtor,\\n        uint256 amount,\\n        address collateral,\\n        bytes16 collateralInfoParameters\\n    ) public whenNotPaused {\\n        InventoryInterestTermsContract(termsContract)\\n            .registerSecureLoanWithCollateral(\\n            agreementId,\\n            debtor,\\n            amount,\\n            collateral,\\n            collateralInfoParameters\\n        );\\n    }\\n\\n    /**\\n     * Allows a debtor to cancel a debt order before it's been filled\\n     * -- preventing any counterparty from filling it in the future.\\n     */\\n    function cancelDebtOrder(\\n        address[6] memory orderAddresses,\\n        uint256[7] memory orderValues,\\n        bytes32[1] memory orderBytes32,\\n        bytes16[1] memory orderBytes16\\n    ) public whenNotPaused {\\n        DebtOrder memory debtOrder = _getDebtOrder(\\n            orderAddresses,\\n            orderValues,\\n            orderBytes32,\\n            orderBytes16\\n        );\\n\\n        require(\\n            msg.sender == debtOrder.issuance.debtor,\\n            \\\"Debtor cancelation's requestor must be the Debtor.\\\"\\n        );\\n\\n        debtOrderCancelled[debtOrder.debtOrderHash] = true;\\n\\n        emit LogDebtOrderCancelled(debtOrder.debtOrderHash, msg.sender);\\n    }\\n\\n    /**\\n     * Allows debtors to prevent a debt issuance in which they're involved from being used in\\n     * a future debt order.\\n     */\\n    function cancelIssuance(\\n        address version,\\n        address debtor,\\n        address termsContract,\\n        bytes32 termsContractParameters,\\n        bytes16 collateralInfoParameters,\\n        uint256 salt\\n    ) public whenNotPaused {\\n        require(\\n            msg.sender == debtor,\\n            \\\"Issuance cancelation's requestor must be the Debtor.\\\"\\n        );\\n\\n        Issuance memory issuance = _getIssuance(\\n            version,\\n            debtor,\\n            termsContract,\\n            salt,\\n            termsContractParameters,\\n            collateralInfoParameters\\n        );\\n\\n        issuanceCancelled[issuance.agreementId] = true;\\n\\n        emit LogIssuanceCancelled(issuance.agreementId, msg.sender);\\n    }\\n\\n    function _isParticipantOfProject(\\n        uint256 projectId,\\n        address trader,\\n        address lender,\\n        address executor\\n    ) private view returns (bool) {\\n        SupplyChainManagementProgram supplyChainManagementProgram = registry.getSupplyChainManagementProgram();\\n        if (\\n            supplyChainManagementProgram.isTrader(projectId, trader) &&\\n            supplyChainManagementProgram.isLender(projectId, lender) &&\\n            supplyChainManagementProgram.isExecutor(projectId, executor)\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Trader sell cma collateral\\n     */\\n    function sellCollateral(\\n        bytes32 agreementId,\\n        uint256 projectId,\\n        uint256 amountCollateral,\\n        uint256 price,\\n        uint256 fiatTokenIndex,\\n        address collateral,\\n        bytes16 collateralInfoParameters,\\n        address[3] memory participantAddresses, // 1-debtor, 2-approval(creditor), 3-executor\\n        uint8[3] memory signaturesV, // 1-debtorSignatureV, 2-creditorSignatureV, 3-executorSignatureV\\n        bytes32[3] memory signaturesR, // 1-debtorSignatureR, 2-creditorSignatureR, 3-executorSignatureR\\n        bytes32[3] memory signaturesS // 1-debtorSignatureS, 2-creditorSignatureS, 3-executorSignatureS\\n    ) public whenNotPaused {\\n        // TODO: validate participant from project, remove to get rid of versioning\\n        //        require(\\n        //            _isParticipantOfProject(projectId, participantAddresses[0], participantAddresses[1], participantAddresses[2]),\\n        //            \\\"Participant is not valid in project\\\"\\n        //        );\\n\\n        //_assertDebtOrderConsensualityInvariants check signature\\n\\n        registry.getInventoryInterestTermsContract()\\n            .registerSellCollateral(\\n            agreementId,\\n            amountCollateral,\\n            price,\\n            fiatTokenIndex,\\n            collateral,\\n            collateralInfoParameters\\n        );\\n    }\\n\\n    /**\\n     * Buyer pay the cma collateral by fiat\\n     */\\n    function payCollateralByFiat(\\n        bytes32 agreementId,\\n        bytes32 sellCollateralId,\\n        address payer\\n    ) public whenNotPaused {\\n        registry.getInventoryInterestTermsContract()\\n            .registerPayCollateralByFiat(\\n            agreementId,\\n            sellCollateralId,\\n            payer\\n        );\\n    }\\n\\n    /**\\n     * Buyer pay the cma collateral by invoice\\n     */\\n    function payCollateralByInvoice(\\n        bytes32 agreementId,\\n        bytes32 sellCollateralId,\\n        address payer,\\n        uint256 dueDate,\\n        uint256 salt\\n    ) public whenNotPaused returns (uint256) {\\n        require(msg.sender == payer, 'InventoryLoanDebtKernel: Invalid payer');\\n\\n        uint256 aitTokenId = registry.getInventoryInterestTermsContract()\\n            .registerPayCollateralByInvoice(\\n            agreementId,\\n            sellCollateralId,\\n            payer,\\n            dueDate,\\n            salt\\n        );\\n\\n        require(\\n            aitTokenId != 0,\\n            'Register sell collateral by invoice was failed.'\\n        );\\n        return aitTokenId;\\n    }\\n\\n    /**\\n     * Debtor withdraw collateral when CR is still safe\\n     */\\n    function insecureLoanByWithdrawCollateral(\\n        bytes32 agreementId,\\n        address termsContract,\\n        uint256 amount,\\n        address collateral,\\n        bytes16 collateralInfoParameters\\n    ) public whenNotPaused {\\n        InventoryInterestTermsContract(termsContract)\\n            .registerInsecureLoanByWithdrawCollateral(\\n            agreementId,\\n            msg.sender,\\n            amount,\\n            collateral,\\n            collateralInfoParameters\\n        );\\n    }\\n\\n    /**\\n     * Creditor foreclosure if loan is expired or meet the liquidation ratio\\n     */\\n    function foreclosureLoanBySellCollateral(\\n        bytes32 agreementId,\\n        uint256 projectId,\\n        uint256 amountCollateral,\\n        uint256 price,\\n        uint256 fiatTokenIndex,\\n        address collateral,\\n        bytes16 collateralInfoParameters,\\n        uint8 signaturesV, // executorSignatureV\\n        bytes32 signaturesR, // executorSignatureR\\n        bytes32 signaturesS // executorSignatureS\\n    ) public whenNotPaused {\\n        //_assertDebtOrderConsensualityInvariants check signature\\n        //        require(\\n        //            SupplyChainManagementProgram(contractRegistry.get(SUPPLY_CHAIN_MANAGEMENT_PROGRAM)).isExecutor(projectId, executor),\\n        //            \\\"InventoryLoanDebtKernel: Invalid executor\\\");\\n\\n        require(\\n            msg.sender ==\\n                    registry.getInventoryLoanRegistry()\\n                    .getBeneficiary(agreementId),\\n            'InventoryLoanDebtKernel: Invalid creditor'\\n        );\\n\\n        registry.getInventoryInterestTermsContract()\\n            .registerForeclosureLoan(agreementId);\\n\\n        registry.getInventoryInterestTermsContract()\\n            .registerSellCollateral(\\n            agreementId,\\n            amountCollateral,\\n            price,\\n            fiatTokenIndex,\\n            collateral,\\n            collateralInfoParameters\\n        );\\n    }\\n\\n    function drawdownLoan(\\n        bytes32 agreementId,\\n        uint256 drawdownAmount,\\n        bytes32 termsContractParameters,\\n        uint8[2] memory signaturesV, // 1-debtorSignatureV, 2-creditorSignatureV\\n        bytes32[2] memory signaturesR, // 1-debtorSignatureR, 2-creditorSignatureR\\n        bytes32[2] memory signaturesS // 1-debtorSignatureS, 2-creditorSignatureS\\n    ) public whenNotPaused {\\n        //_assertDebtOrderConsensualityInvariants check signature\\n\\n        InventoryLoanRegistry inventoryLoanDebtRegistry = registry.getInventoryLoanRegistry();\\n        //        require(\\n        //            msg.sender == inventoryLoanDebtRegistry.getBeneficiary(agreementId),\\n        //            \\\"InventoryLoanDebtKernel: Invalid creditor\\\"\\n        //        );\\n        //        require(\\n        //            msg.sender == inventoryLoanDebtRegistry.getDebtor(agreementId),\\n        //            \\\"InventoryLoanDebtKernel: Invalid debtor\\\"\\n        //        );\\n        require(\\n            inventoryLoanDebtRegistry.doesEntryExist(agreementId),\\n            'Agreement not existed'\\n        );\\n\\n        registry.getInventoryInterestTermsContract().registerDrawdownLoan(\\n            agreementId,\\n            drawdownAmount,\\n            termsContractParameters\\n        );\\n\\n        // Transfer drawdown amount to debtor\\n        address creditor = inventoryLoanDebtRegistry.getBeneficiary(\\n            agreementId\\n        );\\n        address debtor = inventoryLoanDebtRegistry.getDebtor(agreementId);\\n        address fiatTokenAddress = inventoryLoanDebtRegistry.getAgreement(agreementId).principalTokenAddress;\\n        require(\\n            fiatTokenAddress != address(0),\\n            'Token address must different with NULL.'\\n        );\\n\\n        require(\\n                IERC20(fiatTokenAddress)\\n                .transferFrom(\\n                creditor,\\n                debtor,\\n                drawdownAmount\\n            ),\\n            'InventoryLoanDebtKernel: Unsuccessfully transferred drawdown amount to Debtor.'\\n        );\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x31b3a8b5af3bf93740d07f0c553852e4a692d76b3b037ff0abc759ec164b2508\",\"license\":\"MIT\"},\"contracts/protocol/loan/inventory/InventoryLoanRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../loan/inventory/InventoryInterestTermsContract.sol\\\";\\nimport \\\"../../loan/inventory/InventoryLoanKernel.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../../tokens/ERC721/invoice/AcceptedInvoiceToken.sol\\\";\\nimport \\\"./CRInventoryDecisionEngine.sol\\\";\\nimport \\\"../../../libraries/Unpack.sol\\\";\\nimport \\\"../../../libraries/Unpack16.sol\\\";\\n\\ncontract InventoryLoanRegistry is\\n    UntangledBase,\\n    CRInventoryDecisionEngine\\n{\\n    using SafeMath for uint256;\\n    using ConfigHelper for Registry;\\n    using Unpack for bytes32;\\n    using Unpack16 for bytes16;\\n    Registry public registry;\\n\\n    struct CollateralRatioValues {\\n        address priceFeedOperator; // Who responsible to update collateral price\\n        uint initCollateralRatio; // Collateral ratio when setup Loan\\n        uint lastCollateralRatio;\\n        uint minCollateralRatio; // Minimum calculate collateral ratio\\n        uint liquidationRatio; // Minimum acceptable collateral ratio\\n    }\\n\\n\\n    struct Entry {\\n        address version; // address of current repayment router\\n        address beneficiary;\\n        address debtor;\\n        address termsContract;\\n        address principalTokenAddress;\\n        bytes32 termsContractParameters;\\n        bytes16 collateralInfoParameters;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 lastRepayTimestamp;\\n        uint256 expirationTimestamp;\\n        CollateralRatioValues collateralRatioValues;\\n    }\\n    // Primary entries mapping agreement IDs to their corresponding entries\\n    mapping(bytes32 => Entry) public entries;\\n    // Helper mapping agreement IDs to their corresponding invoice token id\\n    mapping(bytes32 => uint256[]) public registryToInvoice;\\n    // Maps debtor addresses to a list of their debts' agreement IDs\\n    mapping(address => bytes32[]) internal debtorToDebts;\\n    // agreement id -> waiting for payment of sell collateral id -> sell info\\n    mapping (bytes32 => mapping (bytes32 => SellCollateralInfo)) public waitingSellCollateral;\\n    mapping (bytes32 => mapping (bytes32 => bool)) public waitingSellCollateralExisted;\\n    // agreement id -> is foreclosure\\n    mapping (bytes32 => bool) public liquidatedLoan;\\n\\n    // List of terms which have completed repayment\\n    mapping (bytes32 => bool) public completedRepayment;\\n    mapping (bytes32 => uint) public repaidPrincipalAmount;\\n    mapping (bytes32 => uint) public repaidInterestAmount;\\n\\n    mapping (bytes32 => bool) public completedLoans;\\n\\n    // Setting manual for interest amount\\n    mapping (bytes32 => bool) public manualInterestLoan;\\n    mapping (bytes32 => uint) internal manualInterestAmountLoan;\\n\\n    struct SellCollateralInfo {\\n        bytes32 agreementId;\\n        uint256 amountPayment;\\n        uint256 fiatTokenIndex;\\n    }\\n\\n    //////////////////////////////\\n    // CONSTANTS               //\\n    ////////////////////////////\\n    string public constant INSERT_CONTEXT = \\\"commodity-debt-entries-insert\\\";\\n    string public constant EDIT_CONTEXT = \\\"commodity-debt-entries-edit\\\";\\n\\n    //////////////////////////////\\n    // EVENTS                   //\\n    //////////////////////////////\\n\\n    event LogInsertEntry(\\n        bytes32 indexed agreementId,\\n        address indexed beneficiary,\\n        address termsContract,\\n        bytes32 termsContractParameters\\n    );\\n\\n    event LogModifyEntryBeneficiary(\\n        bytes32 indexed agreementId,\\n        address indexed previousBeneficiary,\\n        address indexed newBeneficiary\\n    );\\n\\n    event CollateralRatioChanged(\\n        bytes32 indexed agreementId,\\n        uint256 previousCR,\\n        uint256 latestCR\\n    );\\n\\n    function initialize(Registry _registry) public initializer {\\n        __UntangledBase__init_unchained(_msgSender());\\n        registry = _registry;\\n    }\\n\\n    //////////////////////////////\\n    // MODIFIERS                //\\n    //////////////////////////////\\n\\n    modifier nonNullBeneficiary(address beneficiary) {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Inventory Debt Registry: Beneficiary must be different with address 0.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExtantEntry(bytes32 agreementId) {\\n        require(\\n            doesEntryExist(agreementId),\\n            \\\"Inventory Debt Registry: Agreement Id does not exists.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedToEdit() {\\n        require(\\n            _msgSender() == address(registry.getInventoryInterestTermsContract()),\\n            \\\"Inventory Debt Registry: Sender does not have permission to edit.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPriceFeedOperator(bytes32 agreementId) {\\n        require(\\n            msg.sender ==\\n            entries[agreementId].collateralRatioValues.priceFeedOperator,\\n            \\\"Inventory Debt Registry: Not authorized to update price.\\\"\\n        );\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////\\n    // INTERNAL FUNCTIONS                    //\\n    //////////////////////////////////////////\\n    /**\\n     * Helper function for computing the hash of a given issuance,\\n     * and, in turn, its agreementId\\n     */\\n    function _getAgreementId(\\n        Entry memory _entry,\\n        address _debtor,\\n        uint256 _salt\\n    ) internal pure returns (bytes32) {\\n        return\\n        keccak256(\\n            abi.encodePacked(\\n                _entry.version,\\n                _debtor,\\n                _entry.termsContract,\\n                _entry.termsContractParameters,\\n                _salt\\n            )\\n        );\\n    }\\n\\n    function _evaluateCollateralRatio(bytes32 agreementId, uint256 price)\\n    internal\\n    {\\n        uint256 collateralAmount = entries[agreementId].collateralInfoParameters.unpackCollateralAmount();\\n\\n        uint256 invoiceAmount = _getTotalInvoiceAmount(agreementId);\\n\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 totalRemain = registry.getInventoryInterestTermsContract().getTotalExpectedRepaymentValue(\\n            agreementId,\\n            currentTimestamp\\n        );\\n\\n        uint256 cr = _computeCR(collateralAmount, price, invoiceAmount, totalRemain);\\n\\n        uint256 previousCR = entries[agreementId].collateralRatioValues.lastCollateralRatio;\\n\\n        if (cr != previousCR) {\\n            entries[agreementId]\\n                .collateralRatioValues\\n                .lastCollateralRatio = cr;\\n            emit CollateralRatioChanged(agreementId, previousCR, cr);\\n        }\\n    }\\n\\n    ///////////////////////////////////////////\\n    // CROSS-CONTRACT & EXTERNAL FUNCTIONS ///\\n    /////////////////////////////////////////\\n\\n    //--------------\\n    // SENDs\\n    //--------------\\n    /**\\n     * TODO: Limitation for inserting\\n     * Inserts a new entry into the entries, if the entry is valid and sender is\\n     * authorized to make 'insert' mutations to the entries.\\n     */\\n    function insert(\\n        address _version,\\n        address _beneficiary,\\n        address _debtor,\\n        address _termsContract,\\n        address _priceFeedOperator,\\n        address _principalTokenAddress,\\n        bytes32 _termsContractParameters,\\n        bytes16 _collateralInfoParameters,\\n        uint256[4] memory values\\n    )\\n    public\\n    whenNotPaused\\n    nonNullBeneficiary(_beneficiary)\\n    returns (bytes32)\\n    {\\n        CollateralRatioValues memory crValues = CollateralRatioValues({\\n            priceFeedOperator: _priceFeedOperator,\\n            initCollateralRatio: 0,\\n            lastCollateralRatio: 0,\\n            minCollateralRatio: values[0],\\n            liquidationRatio: values[1]\\n        });\\n\\n        Entry memory entry = Entry({\\n            version: _version,\\n            beneficiary: _beneficiary,\\n            debtor: _debtor,\\n            termsContract: _termsContract,\\n            termsContractParameters: _termsContractParameters,\\n            collateralInfoParameters: _collateralInfoParameters,\\n            // solium-disable-next-line security\\n            issuanceBlockTimestamp: block.timestamp,\\n            lastRepayTimestamp: 0,\\n            expirationTimestamp: values[2],\\n            collateralRatioValues: crValues,\\n            principalTokenAddress: _principalTokenAddress\\n        });\\n        bytes32 agreementId = _getAgreementId(entry, _debtor, values[3]);\\n\\n        require(\\n            entries[agreementId].beneficiary == address(0),\\n            \\\"Beneficiary account already exists.\\\"\\n        );\\n\\n        entries[agreementId] = entry;\\n\\n        selfEvaluateCollateralRatio(agreementId);\\n        entries[agreementId]\\n            .collateralRatioValues\\n            .initCollateralRatio = entries[agreementId].collateralRatioValues.lastCollateralRatio;\\n\\n        debtorToDebts[_debtor].push(agreementId);\\n\\n        emit LogInsertEntry(\\n            agreementId,\\n            entry.beneficiary,\\n            entry.termsContract,\\n            entry.termsContractParameters\\n        );\\n\\n        return agreementId;\\n    }\\n\\n    function insertInvoiceFinancedToInventoryLoan(bytes32 agreementId, uint256 invoiceTokenId) public {\\n        registryToInvoice[agreementId].push(invoiceTokenId);\\n    }\\n\\n    /**\\n    * Price Feed Operator will call this function to evaluate the CR and update Liquidation satus\\n    */\\n    function evaluateCollateralRatio(\\n        bytes32 agreementId,\\n        uint256 price,\\n        uint256 _timestamp\\n    ) public onlyPriceFeedOperator(agreementId) returns (bool) {\\n        require(_verifyPrice(_timestamp), \\\"Inventory Debt Registry: Invalid price data.\\\");\\n        _evaluateCollateralRatio(agreementId, price);\\n        return true;\\n    }\\n\\n    function selfEvaluateCollateralRatio(bytes32 agreementId)\\n    public\\n    returns (bool)\\n    {\\n        uint256 lastPrice = getCollateralLastPrice(agreementId);\\n        _evaluateCollateralRatio(agreementId, lastPrice);\\n        return true;\\n    }\\n\\n    /**\\n    * @dev TODO: Security restriction\\n    * Restriction: only if terms parameters is validated\\n    */\\n    function updateLoanTermParameters(\\n        bytes32 agreementId,\\n        bytes32 newLoanTermsParameters\\n    ) public {\\n        entries[agreementId].termsContractParameters = newLoanTermsParameters;\\n    }\\n\\n    /**\\n    * @dev TODO: Security restriction\\n    */\\n    function updateCollateralInfoParameters(\\n        bytes32 agreementId,\\n        bytes16 newCollateralInfoParameters\\n    ) public {\\n        entries[agreementId].collateralInfoParameters = newCollateralInfoParameters;\\n\\n        uint256 collateralAmount = newCollateralInfoParameters.unpackCollateralAmount();\\n\\n        require(\\n            collateralAmount >= 0,\\n            \\\"Inventory Debt Registry: Invalid new collateral info parameters.\\\"\\n        );\\n    }\\n\\n    function setMinCollateralRatio(bytes32 agreementId, uint256 minCollateralRatio) public {\\n        entries[agreementId].collateralRatioValues.minCollateralRatio = minCollateralRatio;\\n    }\\n\\n    function setLiquidationRatio(bytes32 agreementId, uint256 liquidationRatio) public {\\n        entries[agreementId].collateralRatioValues.liquidationRatio = liquidationRatio;\\n    }\\n\\n    /**\\n     * Modifies the beneficiary of a debt issuance, if the sender\\n     * is authorized to make 'modifyBeneficiary' mutations to\\n     * the entries.\\n    */\\n    function modifyBeneficiary(bytes32 agreementId, address newBeneficiary)\\n    public\\n    whenNotPaused\\n    onlyExtantEntry(agreementId)\\n    nonNullBeneficiary(newBeneficiary)\\n    {\\n        address previousBeneficiary = entries[agreementId].beneficiary;\\n        entries[agreementId].beneficiary = newBeneficiary;\\n\\n        emit LogModifyEntryBeneficiary(\\n            agreementId,\\n            previousBeneficiary,\\n            newBeneficiary\\n        );\\n    }\\n\\n\\n    // Update timestamp of the last repayment from Debtor\\n    function updateLastRepaymentTimestamp(bytes32 agreementId, uint newTimestamp)\\n    public\\n    onlyAuthorizedToEdit\\n    {\\n        entries[agreementId].lastRepayTimestamp = newTimestamp;\\n    }\\n\\n    //-----------------\\n    // CALLs\\n    //-----------------\\n\\n    /* Ensures an entry with the specified agreement ID exists within the debt entries. */\\n    function doesEntryExist(bytes32 agreementId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return entries[agreementId].beneficiary != address(0);\\n    }\\n\\n    /**\\n     * Returns the beneficiary of a given issuance\\n     */\\n    function getBeneficiary(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (address)\\n    {\\n        // Lender\\n        return entries[agreementId].beneficiary;\\n    }\\n\\n    function getDebtor(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (address)\\n    {\\n        return entries[agreementId].debtor;\\n    }\\n\\n    /**\\n     * Returns a tuple of the terms contract and its associated parameters\\n     * for a given issuance\\n    */\\n    function getTerms(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (address, bytes32, bytes16)\\n    {\\n        return (\\n            entries[agreementId].termsContract,\\n            entries[agreementId].termsContractParameters,\\n            entries[agreementId].collateralInfoParameters\\n        );\\n    }\\n\\n    /**\\n    * Returns the terms contract address of a given issuance\\n    */\\n    function getTermsContract(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (address)\\n    {\\n        return entries[agreementId].termsContract;\\n    }\\n\\n    /**\\n     * Returns the terms contract parameters of a given issuance\\n     */\\n    function getTermsContractParameters(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (bytes32)\\n    {\\n        return entries[agreementId].termsContractParameters;\\n    }\\n\\n    /**\\n     * Returns the timestamp of the block at which a debt agreement was issued.\\n     */\\n    function getIssuanceBlockTimestamp(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (uint256 timestamp)\\n    {\\n        return entries[agreementId].issuanceBlockTimestamp;\\n    }\\n\\n    function getLastRepaymentTimestamp(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (uint256 timestamp)\\n    {\\n        return entries[agreementId].lastRepayTimestamp;\\n    }\\n\\n    function getExpirationTimestamp(bytes32 agreementId)\\n    public\\n    view\\n    onlyExtantEntry(agreementId)\\n    returns (uint256)\\n    {\\n        // solhint-disable-next-line not-rely-on-time\\n        return entries[agreementId].expirationTimestamp;\\n    }\\n\\n    /**\\n     * Returns the parameters of a debt issuance in the entries.\\n     *\\n     * TODO: protect this function with our `onlyExtantEntry` modifier once the restriction\\n     * on the size of the call stack has been addressed.\\n     */\\n    function get(bytes32 agreementId)\\n    public\\n    view\\n    returns (address, address, address, bytes32, uint256)\\n    {\\n        return (\\n            entries[agreementId].version,\\n            entries[agreementId].beneficiary,\\n            entries[agreementId].termsContract,\\n            entries[agreementId].termsContractParameters,\\n            entries[agreementId].issuanceBlockTimestamp\\n        );\\n    }\\n\\n    function getLiquidationRatio(bytes32 agreementId)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return entries[agreementId].collateralRatioValues.liquidationRatio;\\n    }\\n\\n    function getMinCollateralRatio(bytes32 agreementId)\\n    public view\\n    returns (uint256)\\n    {\\n        return entries[agreementId].collateralRatioValues.minCollateralRatio;\\n    }\\n\\n    function getCollateralLastPrice(bytes32 agreementId) public view returns (uint256) {\\n        uint collateralId = entries[agreementId].collateralInfoParameters.unpackCollateralTokenId();\\n        return registry.getSupplyChainManagementProgram().getCommodityPrice(collateralId);\\n    }\\n\\n    function getInitCollateralRatio(bytes32 agreementId)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return entries[agreementId].collateralRatioValues.initCollateralRatio;\\n    }\\n\\n    function isReadyForLiquidation(bytes32 agreementId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return entries[agreementId].collateralRatioValues.liquidationRatio >= entries[agreementId].collateralRatioValues.lastCollateralRatio;\\n    }\\n\\n    function latestCollateralRatio(bytes32 agreementId)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return entries[agreementId].collateralRatioValues.lastCollateralRatio;\\n    }\\n\\n    function getCollateralInfoParameters(bytes32 agreementId)\\n    public\\n    view\\n    returns (uint256 collateralId, uint256 collateralAmount)\\n    {\\n        collateralId = entries[agreementId].collateralInfoParameters.unpackCollateralTokenId();\\n        collateralAmount = entries[agreementId].collateralInfoParameters.unpackCollateralAmount();\\n    }\\n\\n    function getInvoiceIds(bytes32 agreementId) public view returns (uint256[] memory) {\\n        return registryToInvoice[agreementId];\\n    }\\n\\n    function removeInvoiceId(bytes32 agreementId, uint256 invoiceId) public {\\n        if (registryToInvoice[agreementId].length > 0) {\\n            for (uint i = 0; i < registryToInvoice[agreementId].length; ++i) {\\n                if (registryToInvoice[agreementId][i] == invoiceId) {\\n\\n                    // Remove i element from registryToInvoice[agreementId]\\n                    for (uint index = i; index<registryToInvoice[agreementId].length-1; index++){\\n                        registryToInvoice[agreementId][index] = registryToInvoice[agreementId][index+1];\\n                    }\\n                    registryToInvoice[agreementId].pop();\\n\\n                    selfEvaluateCollateralRatio(agreementId);\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getTotalInvoiceAmount(bytes32 agreementId) public view returns (uint256 amount) {\\n        AcceptedInvoiceToken acceptedInvoiceToken = registry.getAcceptedInvoiceToken();\\n\\n        amount = 0;\\n        if (registryToInvoice[agreementId].length > 0) {\\n            for (uint i = 0; i < registryToInvoice[agreementId].length; ++i) {\\n                amount += acceptedInvoiceToken.getFiatAmount(registryToInvoice[agreementId][i]);\\n            }\\n        }\\n    }\\n\\n    function setWaitingSellCollateral(bytes32 agreementId, bytes32 sellId, uint256 amount, uint256 fiatTokenIndex)\\n        public\\n    {\\n        SellCollateralInfo memory sellCollateralInfo = SellCollateralInfo({\\n            agreementId: agreementId,\\n            amountPayment: amount,\\n            fiatTokenIndex: fiatTokenIndex\\n        });\\n        waitingSellCollateral[agreementId][sellId] = sellCollateralInfo;\\n        waitingSellCollateralExisted[agreementId][sellId] = true;\\n    }\\n\\n    function isWaitingSellCollateralExisted(bytes32 agreementId, bytes32 sellId) public view returns (bool) {\\n        return waitingSellCollateralExisted[agreementId][sellId];\\n    }\\n\\n    function getWaitingSellCollateral(bytes32 _agreementId, bytes32 _sellId)\\n        public view\\n        returns (uint256 amountPayment, uint256 fiatTokenIndex)\\n    {\\n        SellCollateralInfo memory sellInfo = waitingSellCollateral[_agreementId][_sellId];\\n        return (sellInfo.amountPayment, sellInfo.fiatTokenIndex);\\n    }\\n\\n    function setLoanLiquidated(bytes32 agreementId) public {\\n        liquidatedLoan[agreementId] = true;\\n    }\\n\\n    function removeLiquidatedLoan(bytes32 agreementId) public {\\n        delete liquidatedLoan[agreementId];\\n    }\\n\\n    function isExpiredOrReadyForLiquidation(bytes32 agreementId) public view returns (bool){\\n        uint expTimestamp = entries[agreementId].expirationTimestamp;\\n        // solium-disable-next-line\\n        if (expTimestamp <= block.timestamp) {\\n            return true;\\n        }\\n\\n        return isReadyForLiquidation(agreementId);\\n    }\\n\\n    function setCompletedRepayment(bytes32 agreementId) public {\\n        completedRepayment[agreementId] = true;\\n    }\\n\\n    function getRepaidPrincipalAmount(bytes32 agreementId) public view returns (uint) {\\n        return repaidPrincipalAmount[agreementId];\\n    }\\n\\n    function addRepaidPrincipalAmount(bytes32 agreementId, uint repaidAmount) public {\\n        repaidPrincipalAmount[agreementId] = repaidPrincipalAmount[agreementId].add(repaidAmount);\\n    }\\n\\n    function setRepaidPrincipalAmount(bytes32 agreementId, uint repaidAmount) public {\\n        repaidPrincipalAmount[agreementId] = repaidAmount;\\n    }\\n\\n    function getRepaidInterestAmount(bytes32 agreementId) public view returns (uint) {\\n        return repaidInterestAmount[agreementId];\\n    }\\n\\n    function addRepaidInterestAmount(bytes32 agreementId, uint repaidAmount) public {\\n        repaidInterestAmount[agreementId] = repaidInterestAmount[agreementId].add(repaidAmount);\\n    }\\n\\n    function setRepaidInterestAmount(bytes32 agreementId, uint repaidAmount) public {\\n        repaidInterestAmount[agreementId] = repaidAmount;\\n    }\\n\\n    function getValueRepaidToDate(bytes32 agreementId) public view returns (uint, uint) {\\n        return (\\n            repaidPrincipalAmount[agreementId],\\n            repaidInterestAmount[agreementId]\\n        );\\n    }\\n\\n    function setCompletedLoan(bytes32 agreementId) public {\\n        completedLoans[agreementId] = true;\\n    }\\n\\n    function setManualInterestLoan(bytes32 agreementId, bool isManualInterest) public {\\n        manualInterestLoan[agreementId] = isManualInterest;\\n    }\\n\\n    function getManualInterestAmountLoan(bytes32 agreementId) public view returns (uint) {\\n        return manualInterestAmountLoan[agreementId];\\n    }\\n\\n    function setManualInterestAmountLoan(bytes32 agreementId, uint interestAmount) public {\\n        manualInterestAmountLoan[agreementId] = interestAmount;\\n    }\\n\\n    function getAgreement(bytes32 agreementId) public view returns(Entry memory) {\\n        return entries[agreementId];\\n    }\\n}\\n\",\"keccak256\":\"0x79289c789507a2e3651dd20e437ba3e10eb625657bc13e530d2a1b9248c26e69\",\"license\":\"MIT\"},\"contracts/protocol/loan/inventory/InventoryLoanRepaymentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./InventoryLoanRegistry.sol\\\";\\nimport \\\"./InventoryInterestTermsContract.sol\\\";\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport \\\"../../../libraries/ConfigHelper.sol\\\";\\nimport \\\"../../../storage/Registry.sol\\\";\\n\\n\\ncontract InventoryLoanRepaymentRouter is PausableUpgradeable, OwnableUpgradeable {\\n    using ConfigHelper for Registry;\\n\\n    Registry public registry;\\n\\n    enum Errors {\\n        DEBT_AGREEMENT_NONEXISTENT,\\n        PAYER_BALANCE_OR_ALLOWANCE_INSUFFICIENT,\\n        REPAYMENT_REJECTED_BY_TERMS_CONTRACT\\n    }\\n\\n    event LogRepayment(\\n        bytes32 indexed _agreementId,\\n        address indexed _payer,\\n        address indexed _beneficiary,\\n        uint _amount,\\n        address _token\\n    );\\n\\n    event LogError(uint8 indexed _errorId, bytes32 indexed _agreementId);\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n    // Validate repayment request parametters\\n    function _assertRepaymentRequest(bytes32 _agreementId, address _payer, uint256 _amount, address _tokenAddress)\\n    internal\\n    {\\n        require(_tokenAddress != address(0), \\\"Token address must different with NULL.\\\");\\n        require(_amount > 0, \\\"Amount must greater than 0.\\\");\\n\\n        // Ensure agreement exists.\\n        require(\\n            registry.getInventoryLoanRegistry().doesEntryExist(_agreementId),\\n            \\\"Inventory Debt Registry: Agreement Id does not exists.\\\"\\n        );\\n    }\\n\\n\\n    function _doRepay(bytes32 _agreementId, address _payer, uint256 _amount, address _tokenAddress)\\n    public\\n    {\\n        // Notify terms contract\\n        InventoryLoanRegistry debtRegistry = registry.getInventoryLoanRegistry();\\n\\n        address termsContract = debtRegistry.getTermsContract(_agreementId);\\n        address beneficiary = debtRegistry.getBeneficiary(_agreementId);\\n        address debtor = debtRegistry.getDebtor(_agreementId);\\n\\n        uint remains = InventoryInterestTermsContract(termsContract).registerRepayment(\\n            _agreementId,\\n            _amount,\\n            _tokenAddress\\n        );\\n\\n        // Transfer amount to creditor\\n        require(\\n            IERC20(_tokenAddress).transferFrom(_payer, beneficiary, _amount - remains),\\n            \\\"Unsuccessfully transferred repayment amount to Creditor.\\\"\\n        );\\n\\n        // Transfer remain amount to debtor\\n        if (debtor != _payer && remains > 0) {\\n            require(\\n                IERC20(_tokenAddress).transferFrom(_payer, debtor, remains),\\n                \\\"Unsuccessfully transferred repayment amount to Creditor.\\\"\\n            );\\n        }\\n\\n        // Log event for repayment\\n        emit LogRepayment(_agreementId, _payer, beneficiary, _amount - remains, _tokenAddress);\\n    }\\n\\n    // Mannual repay by using Fiat tokens\\n    function repay(bytes32 agreementId, address payer, uint256 amount, address tokenAddress)\\n    public\\n    whenNotPaused\\n    returns (uint)\\n    {\\n        _assertRepaymentRequest(agreementId, payer, amount, tokenAddress);\\n        _doRepay(agreementId, payer, amount, tokenAddress);\\n        return amount;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x6721758fc8e41b227923fee884155be03cf9b806427064bd493d27df550b1906\",\"license\":\"MIT\"},\"contracts/protocol/loan/invoice/CRDecisionEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../../libraries/SignaturesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract CRDecisionEngine is SignaturesLib {\\n    using SafeMath for uint;\\n\\n    // Maximum 4 decmal places for the price of collteral token\\n    uint public constant PRICE_PRECISION = 4;\\n    uint public constant CR_PRECISION = 2;\\n\\n    uint public constant MAX_PRICE_TTL_IN_SECONDS = 300;\\n\\n    // These values must be dynamic in future, query from token information in registry\\n    uint public COLLATERAL_PRECISION = 3; // Number decimals of CAT token\\n    uint public PRINCIPAL_PRECISION = 2; // Number decimaals of FAT\\n\\n    uint256 constant MAX_UINT256 = ~uint256(0);\\n\\n    //==============================\\n    // Internal funcs\\n    //==============================\\n    function _computeCR(\\n        uint _collateralAmount,\\n        uint _price,\\n        uint _principalAmount\\n    )\\n        internal view returns (uint)\\n    {\\n        if (_principalAmount == 0) {\\n            return MAX_UINT256;\\n        }\\n\\n        uint collateralValue = _price.mul(_collateralAmount).mul(10 ** PRINCIPAL_PRECISION).mul(10 ** CR_PRECISION).mul(10 ** 2);\\n        uint principalValue = _principalAmount.mul(10 ** COLLATERAL_PRECISION).mul(10 ** PRICE_PRECISION);\\n        return collateralValue.div(principalValue);\\n    }\\n\\n    function _computeInvoiceCR(uint _collateralAmount, uint _principalAmount) internal view returns (uint) {\\n        if (_principalAmount == 0) {\\n            return MAX_UINT256;\\n        }\\n\\n        uint collateralValue = _collateralAmount.mul(10 ** PRINCIPAL_PRECISION).mul(10 ** CR_PRECISION).mul(10 ** 2);\\n        return collateralValue.div(_principalAmount.mul(10 ** PRINCIPAL_PRECISION));\\n    }\\n\\n    /**\\n    * @dev TODO: Verify Operator's signature here\\n    */\\n    function _verifyPrice(uint _timestamp) internal view returns(bool) {\\n        uint minPriceTimestamp = uint(block.timestamp).sub(MAX_PRICE_TTL_IN_SECONDS);\\n        if (_timestamp < minPriceTimestamp) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2f575318776b88f5ddbec39d5108668ef9f50b2a869d42e61f7cf2ac3b4f73b4\",\"license\":\"MIT\"},\"contracts/protocol/loan/invoice/InvoiceCollateralizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './InvoiceFinanceInterestTermsContract.sol';\\nimport './InvoiceFinanceInterestTermsContract.sol';\\nimport './InvoiceDebtRegistry.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC721.sol';\\n\\n/**\\n*  Escrow account that hold all callaterals for Loans\\n*/\\ncontract InvoiceCollateralizer is Initializable, PausableUpgradeable, AccessControlEnumerableUpgradeable, IERC721ReceiverUpgradeable {\\n    using SafeMath for uint256;\\n    using ConfigHelper for Registry;\\n    using Unpack for bytes32;\\n\\n    Registry public registry;\\n\\n    bytes32 public constant COLLATERALIZER = keccak256('COLLATERALIZER');\\n\\n    // Collateralizer here refers to the owner of the asset that is being collateralized.\\n    mapping(bytes32 => address) public agreementToCollateralizer;\\n\\n    ///////////////////////////////\\n    // CONSTANTS               ///\\n    /////////////////////////////\\n    uint256 public constant SECONDS_IN_DAY = 24 * 60 * 60;\\n    string public constant CONTEXT = 'InvoiceCollateralizer';\\n    string public constant CONTEXT_COLLATERAL_SALE = 'collateral_sale';\\n\\n    ///////////////////////////////\\n    // EVENTS                  ///\\n    /////////////////////////////\\n    event InvoiceCollateralLocked(\\n        bytes32 indexed agreementID,\\n        address indexed token,\\n        uint256 tokenId\\n    );\\n\\n    event CollateralReturned(\\n        bytes32 indexed agreementID,\\n        address indexed collateralizer,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        registry = _registry;\\n    }\\n\\n    ///////////////////////////////\\n    // MODIFIERS               ///\\n    /////////////////////////////\\n\\n    modifier onlyPermissionedInvoiceTermContract(bytes32 agreementId) {\\n        require(\\n            msg.sender ==\\n            registry.getInvoiceDebtRegistry()\\n            .getTermsContract(agreementId),\\n            'Collateralizer: Sender must be Term Contract of current Debt.'\\n        );\\n        _;\\n    }\\n\\n    ///////////////////////////////\\n    // INTERNAL FUNCTIONS     ////\\n    /////////////////////////////\\n    // Paramerters from Loan which have collateral is Invoice\\n    function retrieveInvoiceCollateralParameters(bytes32 agreementId)\\n    internal\\n    view\\n    returns (\\n        address collateralToken,\\n        uint256[] memory invoiceTokenIds,\\n        uint256 gracePeriodInDays,\\n        InvoiceFinanceInterestTermsContract termsContract\\n    )\\n    {\\n        address termsContractAddress;\\n        bytes32 termsContractParameters;\\n\\n        // Pull the terms contract and associated parameters for the agreement\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n        (termsContractAddress, termsContractParameters) = invoiceDebtRegistry\\n        .getTerms(agreementId);\\n\\n        invoiceTokenIds = invoiceDebtRegistry.getInvoiceTokenIds(agreementId);\\n\\n        gracePeriodInDays = termsContractParameters.unpackGracePeriodInDays();\\n\\n        // Resolve address of token associated with this agreement in token registry\\n        collateralToken = address(registry.getAcceptedInvoiceToken());\\n        termsContract = InvoiceFinanceInterestTermsContract(\\n            termsContractAddress\\n        );\\n    }\\n\\n    ///////////////////////////////\\n    // EXTERNAL FUNCTIONS     ///\\n    /////////////////////////////\\n    function collateralizeERC721(bytes32 agreementId, address collateralizer)\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    returns (bool)\\n    {\\n        uint256[] memory invoiceTokenIds;\\n        address collateralToken;\\n        InvoiceFinanceInterestTermsContract termsContract;\\n\\n        // Fetch all relevant collateralization parameters\\n        (\\n        collateralToken,\\n        invoiceTokenIds,\\n        ,\\n        termsContract\\n        ) = retrieveInvoiceCollateralParameters(agreementId);\\n\\n        require(\\n            address(termsContract) == msg.sender,\\n            'Collateralizer: Sender must be Term Contract smart contract.'\\n        );\\n\\n        require(\\n            agreementToCollateralizer[agreementId] == address(0),\\n            'Collateralizer: This Debt must be not collateralized.'\\n        );\\n\\n        AcceptedInvoiceToken invoiceToken = AcceptedInvoiceToken(\\n            collateralToken\\n        );\\n        address custodian = address(this);\\n        // store collaterallizer in mapping, effectively demarcating that the\\n        // agreement is now collateralized.\\n        agreementToCollateralizer[agreementId] = collateralizer;\\n\\n        for (uint256 i = 0; i < invoiceTokenIds.length; i++) {\\n            /*\\n            The collateralizer must have sufficient balance equal to or greater\\n            than the amount being put up for collateral.\\n            */\\n            require(\\n                invoiceToken.ownerOf(invoiceTokenIds[i]) == collateralizer,\\n                'Invoice Collateralizer: Collateralizer must owner of invoice.'\\n            );\\n\\n            // the collateral must be successfully transferred to this contract, via a proxy.\\n            invoiceToken.safeTransferFrom(\\n                collateralizer,\\n                custodian,\\n                invoiceTokenIds[i]\\n            );\\n\\n            // emit event that collateral has been secured.\\n            emit InvoiceCollateralLocked(\\n                agreementId,\\n                address(registry.getAcceptedInvoiceToken()),\\n                invoiceTokenIds[i]\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * Add more collateral to increase CR\\n    */\\n    function additionERC721Collateralize(\\n        bytes32 agreementId,\\n        address collateralizer,\\n        bytes32 invoiceTokenId,\\n        address token\\n    )\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    returns (bool _success)\\n    {\\n        address collateralToken;\\n        InvoiceFinanceInterestTermsContract termsContract;\\n\\n        (\\n        collateralToken,\\n        ,\\n        ,\\n        termsContract\\n        ) = retrieveInvoiceCollateralParameters(agreementId);\\n\\n        require(\\n            address(termsContract) == msg.sender,\\n            'Collateralizer: Sender must be Term Contract smart contract.'\\n        );\\n\\n        require(\\n            collateralToken == token,\\n            'InvoiceCollateralizer: Invalid collateral token.'\\n        );\\n\\n        AcceptedInvoiceToken invoiceToken = AcceptedInvoiceToken(\\n            collateralToken\\n        );\\n        address custodian = address(this);\\n\\n        require(\\n            invoiceToken.ownerOf(uint256(invoiceTokenId)) == collateralizer,\\n            'Invoice Collateralizer: Collateralizer must owner of invoice.'\\n        );\\n\\n        // the collateral must be successfully transferred to this contract, via a proxy.\\n        invoiceToken.safeTransferFrom(collateralizer, custodian, uint256(invoiceTokenId));\\n\\n        return true;\\n    }\\n\\n    function withdrawERC721Collateralize(\\n        bytes32 agreementId,\\n        address collateralizer,\\n        bytes32 invoiceTokenId,\\n        address token\\n    )\\n    public\\n    onlyRole(COLLATERALIZER)\\n    whenNotPaused\\n    returns (bool _success)\\n    {\\n        if (agreementToCollateralizer[agreementId] != address(0)) {\\n            // The token in which collateral is denominated\\n            address collateralToken;\\n            // The terms contract according to which this asset is being collateralized.\\n            InvoiceFinanceInterestTermsContract termsContract;\\n\\n            (\\n            collateralToken,\\n            ,\\n            ,\\n            termsContract\\n            ) = retrieveInvoiceCollateralParameters(agreementId);\\n\\n            require(\\n                address(termsContract) == msg.sender,\\n                'Collateralizer: Sender must be Term Contract smart contract.'\\n            );\\n\\n            require(\\n                collateralToken == token,\\n                'InvoiceCollateralizer: Invalid collateral token.'\\n            );\\n            require(\\n                collateralizer == agreementToCollateralizer[agreementId],\\n                'InvoiceCollateralizer: Invalid debtor of agreement'\\n            );\\n\\n            // transfer the collateral this contract was holding in escrow back to collateralizer.\\n            AcceptedInvoiceToken invoiceToken = AcceptedInvoiceToken(\\n                collateralToken\\n            );\\n\\n            require(\\n                invoiceToken.ownerOf(uint256(invoiceTokenId)) == address(this),\\n                'Invoice Collateralizer: Collateralizer must owner of invoice.'\\n            );\\n\\n            invoiceToken.safeTransferFrom(address(this), collateralizer, uint256(invoiceTokenId));\\n\\n            // stop financing\\n//            invoiceToken.stopFinancing(invoiceTokenId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Returns collateral to the debt agreement's original collateralizer\\n     * if and only if the debt agreement's term has lapsed and\\n     * the total expected repayment value has been repaid.\\n     *\\n     * @param agreementId bytes32 The debt agreement's ID\\n     */\\n    function returnInvoiceCollateral(bytes32 agreementId)\\n    public\\n    whenNotPaused\\n    onlyPermissionedInvoiceTermContract(agreementId)\\n    returns (bool)\\n    {\\n        if (agreementToCollateralizer[agreementId] != address(0)) {\\n            // The token in which collateral is denominated\\n            address collateralToken;\\n\\n            // Fetch all relevant collateralization parameters.\\n            (collateralToken,,,) = retrieveInvoiceCollateralParameters(\\n                agreementId\\n            );\\n\\n            InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n\\n            // Ensure a valid form of collateral is tied to this agreement id\\n            require(\\n                collateralToken != address(0),\\n                'Collateral token must different with NULL.'\\n            );\\n            // Ensure that the debt is not in a state of default\\n            // Ensure Value Repaid to date is greater or equal expected value until this Debt expired\\n            require(\\n                invoiceDebtRegistry.isCompletedRepayment(agreementId),\\n                'Debtor have not completed repayment.'\\n            );\\n            // determine collateralizer of the collateral.\\n            address collateralizer = agreementToCollateralizer[agreementId];\\n\\n            // Mark agreement's collateral as withdrawn by setting the agreement's\\n            // collateralizer to 0x0.\\n            delete agreementToCollateralizer[agreementId];\\n\\n            // transfer the collateral this contract was holding in escrow back to collateralizer.\\n            uint256[] memory invoiceTokenIds = invoiceDebtRegistry\\n            .getInvoiceTokenIds(agreementId);\\n            if (invoiceTokenIds.length > 0) {\\n                AcceptedInvoiceToken invoiceToken = registry.getAcceptedInvoiceToken();\\n\\n                for (uint256 i = 0; i < invoiceTokenIds.length; ++i) {\\n                    if (invoiceToken.ownerOf(uint256(invoiceTokenIds[i])) != address(0)) {\\n                        IERC721(collateralToken).safeTransferFrom(address(this), collateralizer, invoiceTokenIds[i]);\\n                        // stop financing\\n                        // invoiceToken.stopFinancing(bytes32(invoiceTokenIds[i]));\\n\\n                        // log the return event.\\n                        emit CollateralReturned(\\n                            agreementId,\\n                            collateralizer,\\n                            collateralToken,\\n                            uint256(invoiceTokenIds[i])\\n                        );\\n                    }\\n                }\\n            }\\n\\n        }\\n\\n        return true;\\n    }\\n\\n    // For receiving AIT token\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n    *\\n    */\\n    function timestampAdjustedForGracePeriod(uint256 gracePeriodInDays)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return block.timestamp.sub(SECONDS_IN_DAY.mul(gracePeriodInDays));\\n    }\\n\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x213e53236473fb08058321983ca007de92e2364d003112978ccf70cba719a217\",\"license\":\"MIT\"},\"contracts/protocol/loan/invoice/InvoiceDebtRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './CRDecisionEngine.sol';\\nimport \\\"../../../libraries/Unpack16.sol\\\";\\nimport \\\"../../../libraries/Unpack.sol\\\";\\nimport \\\"../../../libraries/ConfigHelper.sol\\\";\\nimport '../../../storage/Registry.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '../../../tokens/ERC721/invoice/AcceptedInvoiceToken.sol';\\n\\n/**\\n * The CommodityDebtRegistry stores the parameters and beneficiaries of all debt agreements in\\n * Binkabi protocol.  It authorizes a limited number of agents to\\n * perform mutations on it -- those agents can be changed at any\\n * time by the contract's owner.\\n */\\ncontract InvoiceDebtRegistry is Initializable, PausableUpgradeable, OwnableUpgradeable, CRDecisionEngine {\\n    using SafeMath for uint256;\\n    using ConfigHelper for Registry;\\n    using Unpack for bytes32;\\n    using Unpack16 for bytes16;\\n\\n    struct Entry {\\n        address version; // address of current repayment router\\n        address beneficiary;\\n        address debtor;\\n        address termsContract;\\n        address principalTokenAddress;\\n        bytes32 termsContractParameters;\\n        uint256 issuanceBlockTimestamp;\\n        uint256 lastRepayTimestamp;\\n        uint256 expirationTimestamp;\\n        uint256 collateralRatio;\\n        uint256 minCollateralRatio;\\n    }\\n\\n    Registry public registry;\\n    // Primary registry mapping agreement IDs to their corresponding entries\\n    mapping(bytes32 => Entry) internal entries;\\n    mapping(bytes32 => uint256[]) internal registryToInvoice;\\n\\n    // Maps debtor addresses to a list of their debts' agreement IDs\\n    mapping(address => bytes32[]) internal debtorToDebts;\\n\\n    // List of terms which have completed repayment\\n    mapping(bytes32 => bool) public completedRepayment;\\n    mapping(bytes32 => uint256) public repaidPrincipalAmount;\\n    mapping(bytes32 => uint256) public repaidInterestAmount;\\n\\n    mapping(bytes32 => bool) public completedLoans;\\n\\n    // Setting manual for interest amount\\n    mapping(bytes32 => bool) public manualInterestLoan;\\n    mapping(bytes32 => uint256) public manualInterestAmountLoan;\\n\\n    //////////////////////////////\\n    // EVENTS                   //\\n    //////////////////////////////\\n\\n    event LogInsertEntry(\\n        bytes32 indexed agreementId,\\n        address indexed beneficiary,\\n        address termsContract,\\n        bytes32 termsContractParameters\\n    );\\n\\n    event LogModifyEntryBeneficiary(\\n        bytes32 indexed agreementId,\\n        address indexed previousBeneficiary,\\n        address indexed newBeneficiary\\n    );\\n\\n    //////////////////////////////\\n    // MODIFIERS                //\\n    //////////////////////////////\\n\\n    modifier nonNullBeneficiary(address beneficiary) {\\n        require(\\n            beneficiary != address(0),\\n            'Invoice Debt Registry: Beneficiary must be different with address 0.'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExtantEntry(bytes32 agreementId) {\\n        require(\\n            doesEntryExist(agreementId),\\n            'Invoice Debt Registry: Agreement Id does not exists.'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedToEdit() {\\n        require(\\n            _msgSender() == address(registry.getInvoiceFinanceInterestTermsContract()),\\n            'Invoice Debt Registry: Sender does not have permission to edit.'\\n        );\\n        _;\\n    }\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n    ////////////////////////////////////////////\\n    // INTERNAL FUNCTIONS                    //\\n    //////////////////////////////////////////\\n    /**\\n     * Helper function for computing the hash of a given issuance,\\n     * and, in turn, its agreementId\\n     */\\n    function _getAgreementId(\\n        Entry memory _entry,\\n        address _debtor,\\n        uint256 _salt\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _entry.version,\\n                    _debtor,\\n                    _entry.termsContract,\\n                    _entry.termsContractParameters,\\n                    _salt\\n                )\\n            );\\n    }\\n\\n    function _evaluateCollateralRatio(bytes32 agreementId) internal {\\n        uint256 invoiceAmount = _getTotalInvoiceAmount(agreementId);\\n        uint256 totalRemain = registry.getInvoiceFinanceInterestTermsContract()\\n            .getTotalExpectedRepaymentValue(agreementId, block.timestamp);\\n\\n        uint256 cr = _computeInvoiceCR(invoiceAmount, totalRemain);\\n\\n        uint256 previousCR = entries[agreementId].collateralRatio;\\n\\n        if (cr != previousCR) {\\n            entries[agreementId].collateralRatio = cr;\\n        }\\n    }\\n\\n    ///////////////////////////////////////////\\n    // CROSS-CONTRACT & EXTERNAL FUNCTIONS ///\\n    /////////////////////////////////////////\\n    //--------------\\n    // SENDs\\n    //--------------\\n    /**\\n     * TODO: Limitation for inserting\\n     * Inserts a new entry into the registry, if the entry is valid and sender is\\n     * authorized to make 'insert' mutations to the registry.\\n     */\\n    function insert(\\n        address _version,\\n        address _beneficiary,\\n        address _debtor,\\n        address _termsContract,\\n        address _principalTokenAddress,\\n        bytes32 _termsContractParameters,\\n        bytes32[] memory _invoiceTokenIds,\\n        uint256[3] memory values\\n    )\\n        public\\n        whenNotPaused\\n        nonNullBeneficiary(_beneficiary)\\n        returns (bytes32 _agreementId)\\n    {\\n        Entry memory entry = Entry({\\n            version: _version,\\n            beneficiary: _beneficiary,\\n            debtor: _debtor,\\n            termsContract: _termsContract,\\n            termsContractParameters: _termsContractParameters, //solium-disable-next-line security\\n            issuanceBlockTimestamp: block.timestamp,\\n            lastRepayTimestamp: 0,\\n            collateralRatio: 0,\\n            minCollateralRatio: values[0],\\n            expirationTimestamp: values[1],\\n            principalTokenAddress: _principalTokenAddress\\n        });\\n        bytes32 agreementId = _getAgreementId(entry, _debtor, values[2]); // entry, debtor, salt\\n\\n        require(\\n            entries[agreementId].beneficiary == address(0),\\n            'Beneficiary account already exists.'\\n        );\\n\\n        entries[agreementId] = entry;\\n\\n        for (uint256 i = 0; i < _invoiceTokenIds.length; i++) {\\n            registryToInvoice[agreementId].push(uint256(_invoiceTokenIds[i]));\\n        }\\n\\n        selfEvaluateCollateralRatio(agreementId);\\n\\n        debtorToDebts[_debtor].push(agreementId);\\n\\n        emit LogInsertEntry(\\n            agreementId,\\n            entry.beneficiary,\\n            entry.termsContract,\\n            entry.termsContractParameters\\n        );\\n\\n        return agreementId;\\n    }\\n\\n    /**\\n    * @dev TODO: Security restriction\\n    * Restriction: only if terms parameters is validated\\n    */\\n    function updateLoanTermParameters(\\n        bytes32 agreementId,\\n        bytes32 newLoanTermsParameters\\n    ) public {\\n        entries[agreementId].termsContractParameters = newLoanTermsParameters;\\n    }\\n\\n    function setMinCollateralRatio(\\n        bytes32 agreementId,\\n        uint256 minCollateralRatio\\n    ) public {\\n        entries[agreementId].minCollateralRatio = minCollateralRatio;\\n    }\\n\\n    //@TODO security restriction\\n    /**\\n     * Modifies the beneficiary of a debt issuance, if the sender\\n     * is authorized to make 'modifyBeneficiary' mutations to\\n     * the entries.\\n    */\\n    function modifyBeneficiary(bytes32 agreementId, address newBeneficiary)\\n        public\\n        whenNotPaused\\n        onlyExtantEntry(agreementId)\\n        nonNullBeneficiary(newBeneficiary)\\n    {\\n        address previousBeneficiary = entries[agreementId].beneficiary;\\n        entries[agreementId].beneficiary = newBeneficiary;\\n\\n        emit LogModifyEntryBeneficiary(\\n            agreementId,\\n            previousBeneficiary,\\n            newBeneficiary\\n        );\\n    }\\n\\n    function selfEvaluateCollateralRatio(bytes32 agreementId) public {\\n        _evaluateCollateralRatio(agreementId);\\n    }\\n\\n    // Update timestamp of the last repayment from Debtor\\n    function updateLastRepaymentTimestamp(\\n        bytes32 agreementId,\\n        uint256 newTimestamp\\n    ) public onlyAuthorizedToEdit {\\n        entries[agreementId].lastRepayTimestamp = newTimestamp;\\n    }\\n\\n    //-----------------\\n    // CALLs\\n    //-----------------\\n\\n    /* Ensures an entry with the specified agreement ID exists within the debt entries. */\\n    function doesEntryExist(bytes32 agreementId)\\n        public\\n        view\\n        returns (bool exists)\\n    {\\n        return entries[agreementId].beneficiary != address(0);\\n    }\\n\\n    /**\\n     * Returns the beneficiary of a given issuance\\n     */\\n    function getBeneficiary(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (address)\\n    {\\n        // Lender\\n        return entries[agreementId].beneficiary;\\n    }\\n\\n    function getDebtor(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (address)\\n    {\\n        return entries[agreementId].debtor;\\n    }\\n\\n    /**\\n     * Returns a tuple of the terms contract and its associated parameters\\n     * for a given issuance\\n    */\\n    function getTerms(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (address, bytes32)\\n    {\\n        return (\\n            entries[agreementId].termsContract,\\n            entries[agreementId].termsContractParameters\\n        );\\n    }\\n\\n    function getInvoiceTokenIds(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return registryToInvoice[agreementId];\\n    }\\n\\n    function insertInvoiceFinancedToInvoiceLoan(\\n        bytes32 agreementId,\\n        uint256 invoiceTokenId\\n    ) public {\\n        registryToInvoice[agreementId].push(invoiceTokenId);\\n    }\\n\\n    function removeInvoiceId(bytes32 agreementId, uint256 invoiceId) public {\\n        if (registryToInvoice[agreementId].length > 0) {\\n            for (\\n                uint256 i = 0;\\n                i < registryToInvoice[agreementId].length;\\n                ++i\\n            ) {\\n                if (registryToInvoice[agreementId][i] == invoiceId) {\\n                    // Remove i element from registryToInvoice[agreementId]\\n                    for (\\n                        uint256 index = i;\\n                        index < registryToInvoice[agreementId].length - 1;\\n                        index++\\n                    ) {\\n                        registryToInvoice[agreementId][index] = registryToInvoice[agreementId][index +\\n                            1];\\n                    }\\n                    registryToInvoice[agreementId].pop();\\n\\n                    selfEvaluateCollateralRatio(agreementId);\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getTotalInvoiceAmount(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        AcceptedInvoiceToken acceptedInvoiceToken = registry.getAcceptedInvoiceToken();\\n\\n        amount = 0;\\n        if (registryToInvoice[agreementId].length > 0) {\\n            for (\\n                uint256 i = 0;\\n                i < registryToInvoice[agreementId].length;\\n                ++i\\n            ) {\\n                if (\\n                    acceptedInvoiceToken.ownerOf(\\n                        registryToInvoice[agreementId][i]\\n                    ) != address(0)\\n                ) {\\n                    amount += acceptedInvoiceToken.getFiatAmount(\\n                        registryToInvoice[agreementId][i]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n    * Returns the terms contract address of a given issuance\\n    */\\n    function getTermsContract(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (address)\\n    {\\n        return entries[agreementId].termsContract;\\n    }\\n\\n    /**\\n     * Returns the terms contract parameters of a given issuance\\n     */\\n    function getTermsContractParameters(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (bytes32)\\n    {\\n        return entries[agreementId].termsContractParameters;\\n    }\\n\\n    /**\\n     * Returns the timestamp of the block at which a debt agreement was issued.\\n     */\\n    function getIssuanceBlockTimestamp(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (uint256 timestamp)\\n    {\\n        return entries[agreementId].issuanceBlockTimestamp;\\n    }\\n\\n    function getLastRepaymentTimestamp(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (uint256 timestamp)\\n    {\\n        return entries[agreementId].lastRepayTimestamp;\\n    }\\n\\n    function getExpirationTimestamp(bytes32 agreementId)\\n        public\\n        view\\n        onlyExtantEntry(agreementId)\\n        returns (uint256)\\n    {\\n        // solhint-disable-next-line not-rely-on-time\\n        return entries[agreementId].expirationTimestamp;\\n    }\\n\\n    /**\\n     * Returns the parameters of a debt issuance in the entries.\\n     *\\n     * TODO: protect this function with our `onlyExtantEntry` modifier once the restriction\\n     * on the size of the call stack has been addressed.\\n     */\\n    function get(bytes32 agreementId)\\n        public\\n        view\\n        returns (address, address, address, bytes32, uint256)\\n    {\\n        return (\\n            entries[agreementId].version,\\n            entries[agreementId].beneficiary,\\n            entries[agreementId].termsContract,\\n            entries[agreementId].termsContractParameters,\\n            entries[agreementId].issuanceBlockTimestamp\\n        );\\n    }\\n\\n    function getCollateralRatio(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entries[agreementId].collateralRatio;\\n    }\\n\\n    function getMinCollateralRatio(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entries[agreementId].minCollateralRatio;\\n    }\\n\\n    function isCompletedRepayment(bytes32 agreementId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return completedRepayment[agreementId];\\n    }\\n\\n    function setCompletedRepayment(bytes32 agreementId) public {\\n        completedRepayment[agreementId] = true;\\n    }\\n\\n    function getRepaidPrincipalAmount(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return repaidPrincipalAmount[agreementId];\\n    }\\n\\n    function addRepaidPrincipalAmount(bytes32 agreementId, uint256 repaidAmount)\\n        public\\n    {\\n        repaidPrincipalAmount[agreementId] = repaidPrincipalAmount[agreementId]\\n            .add(repaidAmount);\\n    }\\n\\n    function setRepaidPrincipalAmount(bytes32 agreementId, uint256 repaidAmount)\\n        public\\n    {\\n        repaidPrincipalAmount[agreementId] = repaidAmount;\\n    }\\n\\n    function getRepaidInterestAmount(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return repaidInterestAmount[agreementId];\\n    }\\n\\n    function addRepaidInterestAmount(bytes32 agreementId, uint256 repaidAmount)\\n        public\\n    {\\n        repaidInterestAmount[agreementId] = repaidInterestAmount[agreementId]\\n            .add(repaidAmount);\\n    }\\n\\n    function setRepaidInterestAmount(bytes32 agreementId, uint256 repaidAmount)\\n        public\\n    {\\n        repaidInterestAmount[agreementId] = repaidAmount;\\n    }\\n\\n    function getValueRepaidToDate(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            repaidPrincipalAmount[agreementId],\\n            repaidInterestAmount[agreementId]\\n        );\\n    }\\n\\n    function isCompletedLoan(bytes32 agreementId) public view returns (bool) {\\n        return completedLoans[agreementId];\\n    }\\n\\n    function setCompletedLoan(bytes32 agreementId) public {\\n        completedLoans[agreementId] = true;\\n    }\\n\\n    function isManualInterestLoan(bytes32 agreementId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return manualInterestLoan[agreementId];\\n    }\\n\\n    function setManualInterestLoan(bytes32 agreementId, bool isManualInterest)\\n        public\\n    {\\n        manualInterestLoan[agreementId] = isManualInterest;\\n    }\\n\\n    function getManualInterestAmountLoan(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return manualInterestAmountLoan[agreementId];\\n    }\\n\\n    function setManualInterestAmountLoan(\\n        bytes32 agreementId,\\n        uint256 interestAmount\\n    ) public {\\n        manualInterestAmountLoan[agreementId] = interestAmount;\\n    }\\n\\n    function getAgreement(bytes32 agreementId) public view returns(Entry memory) {\\n        return entries[agreementId];\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x42b5d9a6facab6089f7962c21fd1afca65b4f0f10ccda260b35fef90173dd09e\",\"license\":\"MIT\"},\"contracts/protocol/loan/invoice/InvoiceFinanceInterestTermsContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './InvoiceDebtRegistry.sol';\\nimport './InvoiceCollateralizer.sol';\\nimport \\\"../LoanTyping.sol\\\";\\nimport \\\"../../../storage/Registry.sol\\\";\\nimport \\\"./CRDecisionEngine.sol\\\";\\nimport \\\"../../../libraries/Unpack16.sol\\\";\\nimport \\\"../../../libraries/Unpack.sol\\\";\\nimport \\\"../../../libraries/ConfigHelper.sol\\\";\\n\\ncontract InvoiceFinanceInterestTermsContract is PausableUpgradeable, OwnableUpgradeable, CRDecisionEngine {\\n    using SafeMath for uint;\\n    using ConfigHelper for Registry;\\n    using Unpack for bytes32;\\n    using Unpack16 for bytes16;\\n\\n    uint public constant NUM_AMORTIZATION_UNIT_TYPES = 6;\\n\\n    uint public constant YEAR_LENGTH_IN_DAYS = 365;\\n    // All time units in seconds\\n    uint public constant MINUTE_LENGTH_IN_SECONDS = 60;\\n    uint public constant HOUR_LENGTH_IN_SECONDS = MINUTE_LENGTH_IN_SECONDS * 60;\\n    uint public constant DAY_LENGTH_IN_SECONDS = HOUR_LENGTH_IN_SECONDS * 24;\\n    uint public constant WEEK_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * 7;\\n    uint public constant MONTH_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * 30;\\n    uint public constant YEAR_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * YEAR_LENGTH_IN_DAYS;\\n\\n    // To convert an encoded interest rate into its equivalent in percents,\\n    // divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 1% interest rate\\n    uint public constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10 ** 4;\\n\\n    // To convert an encoded interest rate into its equivalent multiplier\\n    // (for purposes of calculating total interest), divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 0.01 interest multiplier\\n    uint public constant INTEREST_RATE_SCALING_FACTOR_MULTIPLIER = INTEREST_RATE_SCALING_FACTOR_PERCENT * 100;\\n\\n    Registry public registry;\\n\\n    enum AmortizationUnitType {\\n        MINUTES, // 0 - since 1.0.13\\n        HOURS, // 1\\n        DAYS, // 2\\n        WEEKS, // 3\\n        MONTHS, // 4\\n        YEARS // 5\\n    }\\n\\n    struct InterestParams {\\n        uint256 principalAmount;\\n        uint256 termStartUnixTimestamp;\\n        uint256 termEndUnixTimestamp;\\n        AmortizationUnitType amortizationUnitType;\\n        uint256 termLengthInAmortizationUnits;\\n        // interest rates can, at a maximum, have 4 decimal places of precision.\\n        uint256 interestRate;\\n    }\\n\\n    event LogInterestTermStart(\\n        bytes32 indexed agreementId,\\n        address indexed principalToken,\\n        uint principalAmount,\\n        uint interestRate,\\n        uint indexed amortizationUnitType,\\n        uint termLengthInAmortizationUnits\\n    );\\n\\n    event LogRegisterRepayment(\\n        bytes32 agreementId,\\n        address payer,\\n        address beneficiary,\\n        uint256 unitsOfRepayment,\\n        address tokenAddress\\n    );\\n\\n    event LogRegisterCompleteTerm (\\n        bytes32 agreementId\\n    );\\n\\n    modifier onlyRouter() {\\n        require(\\n            msg.sender == address(registry.getInvoiceLoanRepaymentRouter()),\\n            \\\"Only for Repayment Router.\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n\\n    function registerInvoiceLoanTermStart(bytes32 agreementId, address debtor)\\n        external\\n        returns (bool)\\n    {\\n        require(_msgSender() == address(registry.getInvoiceLoanKernel()), \\\"InvoiceFinanceInterestTermsContract: only debt kernel\\\");\\n        address termsContract;\\n        bytes32 termsContractParameters;\\n\\n        (termsContract, termsContractParameters) = registry.getInvoiceDebtRegistry()\\n            .getTerms(agreementId);\\n\\n        uint256 principalAmount = termsContractParameters.unpackPrincipalAmount();\\n        uint256 interestRate = termsContractParameters.unpackInterestRate();\\n        uint256 amortizationUnitType= termsContractParameters.unpackAmortizationUnitType();\\n        uint256 termLengthInAmortizationUnits= termsContractParameters.unpackTermLengthInAmortizationUnits();\\n        uint256 gracePeriodInDays= termsContractParameters.unpackGracePeriodInDays();\\n\\n        address principalTokenAddress = registry.getInvoiceDebtRegistry().getAgreement(agreementId).principalTokenAddress;\\n\\n        // Collateralize AIT token\\n        bool collateralized = registry.getInvoiceCollateralizer()\\n            .collateralizeERC721(agreementId, debtor);\\n\\n        // Returns true (i.e. valid) if the specified principal token is valid,\\n        // the specified amortization unit type is valid, and the terms contract\\n        // associated with the agreement is this one.  We need not check\\n        // if any of the other simple interest parameters are valid, because\\n        // it is impossible to encode invalid values for them.\\n        if (\\n            principalTokenAddress != address(0) &&\\n            amortizationUnitType < NUM_AMORTIZATION_UNIT_TYPES &&\\n            termsContract == address(this) &&\\n            collateralized\\n        ) {\\n            emit LogInterestTermStart(\\n                agreementId,\\n                principalTokenAddress,\\n                principalAmount,\\n                interestRate,\\n                amortizationUnitType,\\n                termLengthInAmortizationUnits\\n            );\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// When called, the registerRepayment function records the debtor's\\n    ///  repayment, as well as any auxiliary metadata needed by the contract\\n    ///  to determine ex post facto the value repaid (e.g. current USD\\n    ///  exchange rate)\\n    /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\\n    /// @param  payer address. The address of the payer.\\n    /// @param  beneficiary address. The address of the payment's beneficiary.\\n    /// @param  unitsOfRepayment uint. The units-of-value repaid in the transaction.\\n    /// @param  tokenAddress address. The address of the token with which the repayment transaction was executed.\\n    function registerRepayment(\\n        bytes32 agreementId,\\n        address payer,\\n        address beneficiary,\\n        uint256 unitsOfRepayment,\\n        address tokenAddress\\n    ) public onlyRouter() returns (uint256 remains) {\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n        require(\\n            tokenAddress == invoiceDebtRegistry.getAgreement(agreementId).principalTokenAddress,\\n            'LoanTermsContract: Invalid token for repayment.'\\n        );\\n        // solium-disable-next-line\\n        uint256 currentTimestamp = block.timestamp;\\n\\n        uint256 expectedPrincipal;\\n        uint256 expectedInterest;\\n        // query total outstanding amounts\\n        (expectedPrincipal, expectedInterest) = getExpectedRepaymentValues(\\n            agreementId,\\n            currentTimestamp\\n        );\\n        // TODO: Currently only allow Debtor to repay with amount >= expectedInterest of that time\\n        // Because, we haven't made any mechanism to manage outstanding interest amounts in the case when Debtor\\n        // repaid with amount < expectedInterest (at that moment)\\n        require(\\n            unitsOfRepayment >= expectedInterest,\\n            'LoanTermsContract: Expected interest amount is minimum.'\\n        );\\n\\n        // exceed expectation, Debtor can pay all at once\\n        if (unitsOfRepayment >= expectedPrincipal.add(expectedInterest)) {\\n            invoiceDebtRegistry.setCompletedRepayment(agreementId);\\n            invoiceDebtRegistry.addRepaidInterestAmount(\\n                agreementId,\\n                expectedInterest\\n            );\\n            invoiceDebtRegistry.addRepaidPrincipalAmount(\\n                agreementId,\\n                expectedPrincipal\\n            );\\n            // put the remain to interest\\n            remains = unitsOfRepayment.sub(\\n                expectedPrincipal.add(expectedInterest)\\n            );\\n        } else {\\n            // if currently Debtor no need to repay for interest\\n            if (expectedInterest == 0) {\\n                if (unitsOfRepayment >= expectedPrincipal) {\\n                    invoiceDebtRegistry.addRepaidPrincipalAmount(\\n                        agreementId,\\n                        expectedPrincipal\\n                    );\\n                    // with the remains\\n                    if (unitsOfRepayment.sub(expectedPrincipal) > 0) {\\n                        invoiceDebtRegistry.addRepaidInterestAmount(\\n                            agreementId,\\n                            unitsOfRepayment.sub(expectedPrincipal)\\n                        );\\n                    }\\n                } else {\\n                    invoiceDebtRegistry.addRepaidPrincipalAmount(\\n                        agreementId,\\n                        unitsOfRepayment\\n                    );\\n                }\\n            } else {\\n                // if expectedInterest > 0 ( & unitsOfRepayment >= expectedInterest)\\n                invoiceDebtRegistry.addRepaidInterestAmount(\\n                    agreementId,\\n                    expectedInterest\\n                );\\n                if (unitsOfRepayment.sub(expectedInterest) > 0) {\\n                    // Debtor is not able to fulfill the expectedPrincipal as we already validated from first IF statement\\n                    // -> there is no remains for adding to repaidInterestAmount\\n                    invoiceDebtRegistry.addRepaidPrincipalAmount(\\n                        agreementId,\\n                        unitsOfRepayment.sub(expectedInterest)\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Update Debt registry record\\n        invoiceDebtRegistry.updateLastRepaymentTimestamp(\\n            agreementId,\\n            currentTimestamp\\n        );\\n        invoiceDebtRegistry.selfEvaluateCollateralRatio(agreementId);\\n\\n        // Emit new event\\n        emit LogRegisterRepayment(\\n            agreementId,\\n            payer,\\n            beneficiary,\\n            unitsOfRepayment,\\n            tokenAddress\\n        );\\n\\n        return remains;\\n    }\\n\\n    /**\\n        * Function will be called by Debt Kernel, supports Debtor to deposit more invoice\\n        */\\n    function registerSecureLoanWithInvoice(\\n        bytes32 agreementId,\\n        address debtor,\\n        address collateral,\\n        bytes32[] memory invoiceTokenIds\\n    ) public returns (bool) {\\n        InvoiceDebtRegistry debtRegistry = registry.getInvoiceDebtRegistry();\\n        require(\\n            debtor == debtRegistry.getDebtor(agreementId),\\n            'Invalid debtor of agreement'\\n        );\\n\\n        for (uint256 i = 0; i < invoiceTokenIds.length; i++) {\\n            // Sezie collateral tokens with addition amount\\n            bool collateralized = registry.getInvoiceCollateralizer()\\n                .additionERC721Collateralize(\\n                agreementId,\\n                debtor,\\n                invoiceTokenIds[i],\\n                collateral\\n            );\\n\\n            if (collateralized) {\\n                // update terms contract parameters, then re evaluate CR\\n                debtRegistry.insertInvoiceFinancedToInvoiceLoan(\\n                    agreementId,\\n                    uint256(invoiceTokenIds[i])\\n                );\\n                debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function registerInsecureLoanByWithdrawInvoice(\\n        bytes32 agreementId,\\n        address debtor,\\n        address collateral,\\n        bytes32[] memory invoiceTokenIds\\n    ) public returns (bool) {\\n        InvoiceDebtRegistry debtRegistry = registry.getInvoiceDebtRegistry();\\n        address debtorOfAgreement = debtRegistry.getDebtor(agreementId);\\n        require(debtor == debtorOfAgreement, 'Invalid debtor of agreement');\\n\\n        for (uint256 i = 0; i < invoiceTokenIds.length; i++) {\\n            // Sezie collateral tokens with addition amount\\n            bool collateralized = registry.getInvoiceCollateralizer()\\n                .withdrawERC721Collateralize(\\n                agreementId,\\n                debtor,\\n                invoiceTokenIds[i],\\n                collateral\\n            );\\n\\n            if (collateralized) {\\n                // update terms contract parameters, then re evaluate CR\\n                debtRegistry.removeInvoiceId(\\n                    agreementId,\\n                    uint256(invoiceTokenIds[i])\\n                );\\n                debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n            }\\n\\n        }\\n\\n        uint256 cr = debtRegistry.getCollateralRatio(agreementId);\\n        uint256 minCollateralRatio = debtRegistry.getMinCollateralRatio(\\n            agreementId\\n        );\\n\\n        if (cr < minCollateralRatio) {\\n            revert(\\n                'InvoiceInterest: Invalid collateral ratio, bellow min collateral ratio'\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    function registerConcludeInvoiceLoan(bytes32 agreementId)\\n        external\\n        returns (bool)\\n    {\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n        require(\\n            invoiceDebtRegistry.isCompletedRepayment(agreementId),\\n            'Debtor has not completed repayment yet.'\\n        );\\n        require(\\n            registry.getInvoiceCollateralizer()\\n                .returnInvoiceCollateral(agreementId),\\n            'Unable to return AIT to its owner'\\n        );\\n\\n        invoiceDebtRegistry.setCompletedLoan(agreementId);\\n        emit LogRegisterCompleteTerm(agreementId);\\n        return true;\\n    }\\n\\n    function _unpackParamsForAgreementID(\\n        bytes32 agreementId\\n    )\\n    internal\\n    view\\n    returns (InterestParams memory params)\\n    {\\n        bytes32 parameters;\\n        uint issuanceBlockTimestamp = 0;\\n\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n        issuanceBlockTimestamp = invoiceDebtRegistry.getIssuanceBlockTimestamp(agreementId);\\n        parameters = invoiceDebtRegistry.getTermsContractParameters(agreementId);\\n\\n        // The principal amount denominated in the aforementioned token.\\n        uint256 principalAmount = parameters.unpackPrincipalAmount();\\n        uint256 interestRate = parameters.unpackInterestRate();\\n        // The amortization unit in which the repayments installments schedule is defined.\\n        uint256 rawAmortizationUnitType= parameters.unpackAmortizationUnitType();\\n        // The debt's entire term's length, denominated in the aforementioned amortization units\\n        uint256 termLengthInAmortizationUnits= parameters.unpackTermLengthInAmortizationUnits();\\n\\n        // Before we cast to `AmortizationUnitType`, ensure that the raw value being stored is valid.\\n        require(\\n            rawAmortizationUnitType <= uint(AmortizationUnitType.YEARS),\\n            \\\"Amortization Unit Type is invalid.\\\"\\n        );\\n\\n        AmortizationUnitType amortizationUnitType = AmortizationUnitType(rawAmortizationUnitType);\\n\\n        // Calculate term length base on Amortization Unit and number\\n        uint termLengthInSeconds = termLengthInAmortizationUnits.mul(\\n            _getAmortizationUnitLengthInSeconds(amortizationUnitType)\\n        );\\n\\n        return InterestParams({\\n            principalAmount: principalAmount,\\n            interestRate: interestRate,\\n            termStartUnixTimestamp: issuanceBlockTimestamp,\\n            termEndUnixTimestamp: termLengthInSeconds.add(issuanceBlockTimestamp),\\n            amortizationUnitType: amortizationUnitType,\\n            termLengthInAmortizationUnits: termLengthInAmortizationUnits\\n        });\\n    }\\n\\n    function _getAmortizationUnitLengthInSeconds(AmortizationUnitType amortizationUnitType)\\n    internal\\n    pure\\n    returns (uint)\\n    {\\n        if (amortizationUnitType == AmortizationUnitType.MINUTES) {\\n            return MINUTE_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.HOURS) {\\n            return HOUR_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.DAYS) {\\n            return DAY_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.WEEKS) {\\n            return WEEK_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.MONTHS) {\\n            return MONTH_LENGTH_IN_SECONDS;\\n        } else if (amortizationUnitType == AmortizationUnitType.YEARS) {\\n            return YEAR_LENGTH_IN_SECONDS;\\n        } else {\\n            revert(\\\"Unknown amortization unit type.\\\");\\n        }\\n    }\\n    /**\\n    * Expected repayment value with Amortization of Interest and Principal\\n    * (AMORTIZATION) - will be used for repayment from Debtor\\n    */\\n    function getExpectedRepaymentValues(bytes32 agreementId, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256 expectedPrincipal, uint256 expectedInterest)\\n    {\\n        InterestParams memory params = _unpackParamsForAgreementID(agreementId);\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n\\n        uint256 repaidPrincipalAmount = invoiceDebtRegistry\\n            .getRepaidPrincipalAmount(agreementId);\\n        uint256 repaidInterestAmount = invoiceDebtRegistry\\n            .getRepaidInterestAmount(agreementId);\\n        uint256 lastRepaymentTimestamp = invoiceDebtRegistry\\n            .getLastRepaymentTimestamp(agreementId);\\n\\n        bool isManualInterestLoan = invoiceDebtRegistry.isManualInterestLoan(\\n            agreementId\\n        );\\n        uint256 manualInterestAmountLoan;\\n        if (isManualInterestLoan) {\\n            manualInterestAmountLoan = invoiceDebtRegistry\\n                .getManualInterestAmountLoan(agreementId);\\n        }\\n\\n        (\\n            expectedPrincipal,\\n            expectedInterest\\n        ) = _getExpectedRepaymentValuesToTimestamp(\\n            params,\\n            lastRepaymentTimestamp,\\n            timestamp,\\n            repaidPrincipalAmount,\\n            repaidInterestAmount,\\n            isManualInterestLoan,\\n            manualInterestAmountLoan\\n        );\\n    }\\n\\n    /**\\n   * Calculate values which Debtor need to pay to conclude current Loan\\n   */\\n    function _getExpectedRepaymentValuesToTimestamp(\\n        InterestParams memory _params,\\n        uint _lastRepaymentTimestamp, // timestamp of last repayment from debtor\\n        uint _timestamp,\\n        uint repaidPrincipalAmount,\\n        uint repaidInterestAmount,\\n        bool isManualInterestLoan,\\n        uint manualInterestAmountLoan\\n    ) internal pure returns (uint expectedPrinciapal, uint expectedInterest) {\\n        uint outstandingPrincipal = _params.principalAmount.sub(repaidPrincipalAmount);\\n\\n        expectedPrinciapal = outstandingPrincipal;\\n\\n        if (isManualInterestLoan) {\\n            expectedInterest = manualInterestAmountLoan;\\n        } else {\\n            expectedInterest = _calculateInterestAmountToTimestamp(\\n                _params.principalAmount,\\n                outstandingPrincipal,\\n                repaidInterestAmount,\\n                _params.interestRate,\\n                _params.termStartUnixTimestamp,\\n                _params.termEndUnixTimestamp,\\n                _lastRepaymentTimestamp,\\n                _timestamp\\n            );\\n        }\\n    }\\n\\n    // Calculate interest amount for a duration with specific Principal amount\\n    function _calculateInterestForDuration(\\n        uint _principalAmount,\\n        uint _interestRate,\\n        uint _durationLengthInSec\\n    ) internal pure returns (uint) {\\n        return _principalAmount.mul(_interestRate).mul(_durationLengthInSec.div(DAY_LENGTH_IN_SECONDS))\\n        .div(INTEREST_RATE_SCALING_FACTOR_MULTIPLIER).div(YEAR_LENGTH_IN_DAYS);\\n    }\\n\\n    function getStartDateInTimestamp(uint _timestamp) private pure returns (uint) {\\n        uint secondInDay = _timestamp.mod(DAY_LENGTH_IN_SECONDS);\\n        return  _timestamp.sub(secondInDay);\\n    }\\n\\n    // Calculate interest amount Debtor need to pay until current date\\n    function _calculateInterestAmountToTimestamp(\\n        uint _principalAmount,\\n        uint _currentPrincipalAmount,\\n        uint _paidInterestAmount,\\n        uint _annualInterestRate,\\n        uint _startTermTimestamp,\\n        uint _endTermTimestamp,\\n        uint _lastRepayTimestamp,\\n        uint _timestamp\\n    ) internal pure returns (uint) {\\n        if (_timestamp <= _startTermTimestamp) {\\n            return 0;\\n        }\\n        uint interest = 0;\\n\\n        uint startOfDayOfLastRepay = getStartDateInTimestamp(_lastRepayTimestamp);\\n        uint startOfDayOfTermsStart = getStartDateInTimestamp(_startTermTimestamp);\\n        uint startOfDayToCalculateInterest = getStartDateInTimestamp(_timestamp);\\n\\n        uint elapseTimeFromLastRepay = startOfDayToCalculateInterest.sub(startOfDayOfLastRepay);\\n        uint elapseTimeFromStart = startOfDayToCalculateInterest.sub(startOfDayOfTermsStart).add(DAY_LENGTH_IN_SECONDS);\\n\\n        // If still within the term length\\n        if (_timestamp < _endTermTimestamp) {\\n            // Have just made new repayment\\n            if (elapseTimeFromLastRepay == 0 && _paidInterestAmount > 0) {\\n                interest = 0;\\n            } else {\\n                if (_paidInterestAmount > 0) {\\n                    // Has made at least 1 repayment\\n                    interest = _calculateInterestForDuration(\\n                        _currentPrincipalAmount,\\n                        _annualInterestRate,\\n                        elapseTimeFromLastRepay\\n                    );\\n                } else {\\n                    // Haven't made any repayment\\n                    interest = _calculateInterestForDuration(\\n                        _principalAmount,\\n                        _annualInterestRate,\\n                        elapseTimeFromStart\\n                    );\\n                }\\n            }\\n\\n        } else if (_timestamp >= _endTermTimestamp) {\\n            // If debtor has made at least 1 repayment\\n            if (_paidInterestAmount > 0) {\\n                interest = _calculateInterestForDuration(\\n                    _currentPrincipalAmount,\\n                    _annualInterestRate,\\n                    elapseTimeFromLastRepay\\n                );\\n            } else {\\n                interest = _calculateInterestForDuration(\\n                    _principalAmount,\\n                    _annualInterestRate,\\n                    elapseTimeFromStart\\n                );\\n            }\\n        } else {\\n            interest = 0;\\n        }\\n        return interest;\\n    }\\n\\n    function getValueRepaidToDate(bytes32 agreementId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return registry.getInvoiceDebtRegistry().getValueRepaidToDate(agreementId);\\n    }\\n\\n    function isTermsContractExpired(bytes32 agreementId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 expTimestamp = registry.getInvoiceDebtRegistry()\\n            .getExpirationTimestamp(agreementId);\\n        // solium-disable-next-line\\n        if (expTimestamp <= block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * Function will be called by Debt Kernel, supports Debtor to deposit more collateral\\n    */\\n    function registerDrawdownLoan(\\n        bytes32 agreementId,\\n        uint256 drawdownAmount,\\n        bytes32 termsContractParameters\\n    ) public returns (bool) {\\n        // query current terms contract parameters\\n        InvoiceDebtRegistry debtRegistry = registry.getInvoiceDebtRegistry();\\n        require(\\n            drawdownAmount > 0,\\n            'Invoice Terms Contract: Drawdown amount must greater than 0.'\\n        );\\n\\n        (, bytes32 currentTermsParameters) = debtRegistry.getTerms(agreementId);\\n        // validate new paramters, compare the amounts\\n        require(\\n            _validateNewTermsContractParamsDrawdown(\\n                currentTermsParameters,\\n                termsContractParameters,\\n                drawdownAmount\\n            ),\\n            'Invoice Terms Contract: Invalid terms contract parameters.'\\n        );\\n        require(\\n            _validateNewCollateralRatioWhenDrawdown(\\n                agreementId,\\n                drawdownAmount,\\n                debtRegistry\\n            ),\\n            'InvoiceInterest: Invalid collateral ratio, bellow min collateral ratio'\\n        );\\n\\n        // update terms contract parameters, then re evaluate CR\\n        debtRegistry.updateLoanTermParameters(\\n            agreementId,\\n            termsContractParameters\\n        );\\n        debtRegistry.selfEvaluateCollateralRatio(agreementId);\\n\\n        return true;\\n    }\\n\\n    function _validateNewTermsContractParamsDrawdown(\\n        bytes32 _oldTermsContractParameters,\\n        bytes32 _newTermsContractParameters,\\n        uint _drawdownAmount\\n    ) internal pure returns (bool) {\\n        bool isValidPrincipalAmount = _newTermsContractParameters.unpackPrincipalAmount()\\n        .sub(_oldTermsContractParameters.unpackPrincipalAmount()) == _drawdownAmount;\\n\\n        bool isInterestRateCorrect = _oldTermsContractParameters.unpackInterestRate()\\n        == _newTermsContractParameters.unpackInterestRate();\\n\\n        bool isAmortizationUnitTypeCorrect = _oldTermsContractParameters.unpackAmortizationUnitType()\\n        == _newTermsContractParameters.unpackAmortizationUnitType();\\n\\n        bool isTermLengthInAmortizationUnitsCorrect = _oldTermsContractParameters.unpackTermLengthInAmortizationUnits()\\n        == _newTermsContractParameters.unpackTermLengthInAmortizationUnits();\\n\\n        bool isGracePeriodInDaysCorrect = _oldTermsContractParameters.unpackGracePeriodInDays()\\n        == _newTermsContractParameters.unpackGracePeriodInDays();\\n\\n        return (\\n            isValidPrincipalAmount &&\\n            isInterestRateCorrect &&\\n            isAmortizationUnitTypeCorrect &&\\n            isTermLengthInAmortizationUnitsCorrect &&\\n            isGracePeriodInDaysCorrect\\n        );\\n\\n    }\\n\\n    function _validateNewCollateralRatioWhenDrawdown(\\n        bytes32 agreementId,\\n        uint256 _amountDrawdown,\\n        InvoiceDebtRegistry debtRegistry\\n    ) private view returns (bool) {\\n        uint256 collateralAmount = debtRegistry._getTotalInvoiceAmount(\\n            agreementId\\n        );\\n        uint256 currentTimestamp = block.timestamp;\\n\\n        uint256 totalRemain = getTotalExpectedRepaymentValue(\\n            agreementId,\\n            currentTimestamp\\n        );\\n        uint256 cr = _computeInvoiceCR(\\n            collateralAmount,\\n            totalRemain + _amountDrawdown\\n        );\\n\\n        uint256 minCollateralRatio = debtRegistry.getMinCollateralRatio(\\n            agreementId\\n        );\\n\\n        if (cr < minCollateralRatio) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n    * Get TOTAL expected repayment value at specific timestamp\\n    * (NO AMORTIZATION)\\n    */\\n    function getTotalExpectedRepaymentValue(\\n        bytes32 agreementId,\\n        uint256 timestamp\\n    )\\n        public\\n        view\\n        returns (uint256 expectedRepaymentValue)\\n    {\\n        uint256 principalAmount;\\n        uint256 interestAmount;\\n        (principalAmount, interestAmount) = getExpectedRepaymentValues(\\n            agreementId,\\n            timestamp\\n        );\\n        expectedRepaymentValue = principalAmount.add(interestAmount);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xa012147f3d02eac839e04aea2100adf455378b817e192c05082ebc470271209a\",\"license\":\"MIT\"},\"contracts/protocol/loan/invoice/InvoiceLoanKernel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './InvoiceFinanceInterestTermsContract.sol';\\nimport './InvoiceDebtRegistry.sol';\\nimport \\\"../../../storage/Registry.sol\\\";\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport \\\"../../../libraries/ConfigHelper.sol\\\";\\n\\n/**\\n * The InvoiceLoanDebtKernel is the hub of all business logic governing how and when\\n * debt orders can be filled and cancelled.  All logic that determines\\n * whether a debt order is valid & consensual is contained herein,\\n * as well as the mechanisms that transfer fees to keepers and\\n * principal payments to debtors.\\n *\\n */\\ncontract InvoiceLoanKernel is PausableUpgradeable, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using ConfigHelper for Registry;\\n\\n    Registry registry;\\n\\n    bytes32 public constant NULL_ISSUANCE_HASH = bytes32(0);\\n\\n    /* NOTE: Currently, the `view` keyword does not actually enforce the\\n    static nature of the method; this will change in the future, but for now, in\\n    order to prevent reentrancy we'll need to arbitrarily set an upper bound on\\n    the gas limit allotted for certain method calls. */\\n    uint16 public constant EXTERNAL_QUERY_GAS_LIMIT = 8000;\\n\\n    mapping(bytes32 => bool) public issuanceCancelled;\\n    mapping(bytes32 => bool) public debtOrderCancelled;\\n    mapping(bytes32 => bool) public debtOrderCompleted;\\n\\n    mapping(bytes32 => bytes32) public agreementToLiability;\\n\\n    ///////////////////////////\\n    // EVENTS\\n    ///////////////////////////\\n\\n    event LogDebtOrderFilled(\\n        bytes32 indexed _agreementId,\\n        uint256 _principal,\\n        address _principalToken,\\n        address _relayer\\n    );\\n\\n    event LogIssuanceCancelled(\\n        bytes32 indexed _agreementId,\\n        address indexed _cancelledBy\\n    );\\n\\n    event LogDebtOrderCancelled(\\n        bytes32 indexed _debtOrderHash,\\n        address indexed _cancelledBy\\n    );\\n\\n    event LogFeeTransfer(\\n        address indexed payer,\\n        address token,\\n        uint256 amount,\\n        address indexed beneficiary\\n    );\\n\\n    struct Issuance {\\n        address version;\\n        address debtor;\\n        address termsContract;\\n        bytes32 termsContractParameters;\\n        bytes32[] invoiceTokenIds;\\n        bytes32 agreementId;\\n        uint256 salt;\\n    }\\n\\n    struct DebtOrder {\\n        Issuance issuance;\\n        uint256 principalAmount;\\n        address principalToken;\\n        uint256 creditorFee;\\n        uint256 debtorFee;\\n        address relayer;\\n        uint256 expirationTimestampInSec;\\n        bytes32 debtOrderHash;\\n        uint256 minCollateralRatio;\\n    }\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n    ////////////////////////\\n    // INTERNAL FUNCTIONS //\\n    ////////////////////////\\n\\n    /**\\n     * Returns the hash of the debt order.\\n     */\\n    function _getDebtOrderHash(DebtOrder memory debtOrder)\\n        internal\\n        view\\n        returns (bytes32 _debtorMessageHash)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    debtOrder.issuance.agreementId,\\n                    debtOrder.principalAmount,\\n                    debtOrder.principalToken,\\n                    debtOrder.debtorFee,\\n                    debtOrder.creditorFee,\\n                    debtOrder.relayer,\\n                    debtOrder.expirationTimestampInSec\\n                )\\n            );\\n    }\\n\\n    function getInvoiceTokenIds(bytes32[] memory orderBytes32)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[] memory invoiceTokenIds = new bytes32[](\\n            orderBytes32.length - 1\\n        );\\n        for (uint256 i = 0; i < invoiceTokenIds.length; i++) {\\n            invoiceTokenIds[i] = orderBytes32[i + 1];\\n        }\\n        return invoiceTokenIds;\\n    }\\n\\n    /**\\n     * Helper function that constructs a hashed debt order struct given the raw parameters\\n     * of a debt order.\\n     */\\n    function _getDebtOrder(\\n        address[5] memory orderAddresses, // 0-repayment router, 1-debtor, 2-termcontract, 3-principalTokenAddress, 4-relayer\\n        uint256[6] memory orderValues, // 0-salt, 1-principalAmount, 2-creditorFee, 3-debtorFee, 4-expirationTimestampInSec, 5-minCR\\n        bytes32[] memory orderBytes32\\n    ) internal view returns (DebtOrder memory _debtOrder) {\\n        DebtOrder memory debtOrder = DebtOrder({\\n            issuance: _getIssuance(\\n                orderAddresses[0],\\n                orderAddresses[1],\\n                orderAddresses[2],\\n                orderValues[0],\\n                orderBytes32[0],\\n                getInvoiceTokenIds(orderBytes32)\\n            ),\\n            principalToken: orderAddresses[3],\\n            relayer: orderAddresses[4],\\n            principalAmount: orderValues[1],\\n            creditorFee: orderValues[2],\\n            debtorFee: orderValues[3],\\n            expirationTimestampInSec: orderValues[4],\\n            debtOrderHash: bytes32(0),\\n            minCollateralRatio: orderValues[5]\\n        });\\n\\n        debtOrder.debtOrderHash = _getDebtOrderHash(debtOrder);\\n\\n        return debtOrder;\\n    }\\n\\n    /**\\n     * Helper function that returns an issuance's hash\\n     */\\n    function _getAgreementId(\\n        address version,\\n        address debtor,\\n        address termsContract,\\n        uint256 salt,\\n        bytes32 termsContractParameters\\n    ) internal pure returns (bytes32 _agreementId) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    version,\\n                    debtor,\\n                    termsContract,\\n                    termsContractParameters,\\n                    salt\\n                )\\n            );\\n    }\\n\\n    /**\\n     * Helper function that constructs a hashed issuance structs from the given\\n     * parameters.\\n     */\\n    function _getIssuance(\\n        address _version,\\n        address _debtor,\\n        address _termsContract,\\n        uint256 _salt,\\n        bytes32 _termsContractParameters,\\n        bytes32[] memory _invoiceTokenIds\\n    ) internal pure returns (Issuance memory _issuance) {\\n        Issuance memory issuance = Issuance({\\n            version: _version,\\n            debtor: _debtor,\\n            termsContract: _termsContract,\\n            salt: _salt,\\n            termsContractParameters: _termsContractParameters,\\n            invoiceTokenIds: _invoiceTokenIds,\\n            agreementId: _getAgreementId(\\n                _version,\\n                _debtor,\\n                _termsContract,\\n                _salt,\\n                _termsContractParameters\\n            )\\n        });\\n\\n        return issuance;\\n    }\\n\\n    function _burnLoanAssetToken(bytes32 agreementId)\\n        internal\\n    {\\n        registry.getLoanAssetToken().burn(uint256(agreementId));\\n    }\\n\\n    /**\\n     * Helper function for querying an address' balance on a given token.\\n     */\\n    function _getBalance(address token, address owner)\\n        internal\\n        view\\n        returns (uint256 _balance)\\n    {\\n        // Limit gas to prevent reentrancy.\\n        return ERC20(token).balanceOf(owner);\\n    }\\n\\n    /**\\n     * Helper function transfers a specified amount of tokens between two parties\\n     * using the token transfer proxy contract.\\n     */\\n    function _transferTokensFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool success) {\\n        return\\n            IERC20(token)\\n                .transferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * Asserts that debt order meets all validity requirements described in\\n     * the Kernel specification document.\\n     */\\n    function _assertDebtOrderValidityInvariants(DebtOrder memory debtOrder)\\n        internal view\\n        returns (bool)\\n    {\\n        // Validate fee amount\\n        // uint totalFees = debtOrder.creditorFee.add(debtOrder.debtorFee);\\n        // Invariant: debtor is given enough principal to cover at least debtorFees\\n        if (debtOrder.principalAmount < debtOrder.debtorFee) {\\n            return false;\\n        }\\n        // Invariant: debt order must not be expired\\n        // solhint-disable-next-line not-rely-on-time\\n        if (debtOrder.expirationTimestampInSec < block.timestamp) {\\n            return false;\\n        }\\n        // Invariant: debt order's issuance must not have been cancelled\\n        if (issuanceCancelled[debtOrder.issuance.agreementId]) {\\n            return false;\\n        }\\n        // Invariant: debt order itself must not have been cancelled\\n        if (debtOrderCancelled[debtOrder.debtOrderHash]) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n    *\\n    */\\n    function _assertDebtExisting(bytes32 agreementId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return registry.getLoanAssetToken().ownerOf(uint256(agreementId)) != address(0);\\n    }\\n\\n    /**\\n    */\\n    function _assertCompletedRepayment(bytes32 agreementId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n                registry.getInvoiceDebtRegistry()\\n                .isCompletedRepayment(agreementId);\\n    }\\n\\n    //Conclude a loan, stop lending/loan terms or allow the loan loss\\n    function _concludeLoan(\\n        address creditor,\\n        bytes32 agreementId,\\n        address termContract\\n    ) internal {\\n        require(creditor != address(0), 'Invalid creditor account.');\\n        require(agreementId != bytes32(0), 'Invalid agreement id.');\\n        require(termContract != address(0), 'Invalid terms contract.');\\n\\n        if (\\n            !_assertDebtExisting(agreementId) ||\\n            !_assertCompletedRepayment(agreementId)\\n        ) {\\n            revert(\\n                'Debt does not exsits or Debtor have not completed repayment.'\\n            );\\n        }\\n\\n        // bool isTermCompleted = true;\\n        bool isTermCompleted = InvoiceFinanceInterestTermsContract(termContract)\\n            .registerConcludeInvoiceLoan(agreementId);\\n\\n        if (isTermCompleted) {\\n            _burnLoanAssetToken(agreementId);\\n        } else {\\n            revert('Unable to conclude terms contract.');\\n        }\\n    }\\n\\n    // Transfer fee to beneficiaries\\n    function _transferFeesToBeneficiaries(\\n        address payer,\\n        address from,\\n        address token,\\n        address[5] memory beneficiaries,\\n        uint256[5] memory amounts\\n    ) internal {\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] > 0 && beneficiaries[i] != address(0x0)) {\\n                _transferTokensFrom(token, from, beneficiaries[i], amounts[i]);\\n                emit LogFeeTransfer(payer, token, amounts[i], beneficiaries[i]);\\n            }\\n        }\\n    }\\n\\n    function _sumTotalFees(uint256[5] memory amounts)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            totalAmount = totalAmount.add(amounts[i]);\\n        }\\n        return totalAmount;\\n    }\\n\\n    ////////////////////////\\n    // EXTERNAL FUNCTIONS //\\n    ////////////////////////\\n\\n    /**\\n    * Debtor call to complete this Debt whenever he thinks that he completed all repayment\\n    */\\n    function concludeLoan(\\n        address creditor,\\n        address debtor,\\n        bytes32 agreementId,\\n        address termContract\\n    ) public whenNotPaused {\\n        _concludeLoan(creditor, agreementId, termContract);\\n    }\\n\\n    /**\\n     * Allows a debtor to cancel a debt order before it's been filled\\n     * -- preventing any counterparty from filling it in the future.\\n     */\\n    function cancelDebtOrder(\\n        address[5] memory orderAddresses,\\n        uint256[6] memory orderValues,\\n        bytes32[] memory orderBytes32\\n    ) public whenNotPaused {\\n        DebtOrder memory debtOrder = _getDebtOrder(\\n            orderAddresses,\\n            orderValues,\\n            orderBytes32\\n        );\\n\\n        require(\\n            msg.sender == debtOrder.issuance.debtor,\\n            \\\"Debtor cancelation's requestor must be the Debtor.\\\"\\n        );\\n\\n        debtOrderCancelled[debtOrder.debtOrderHash] = true;\\n\\n        emit LogDebtOrderCancelled(debtOrder.debtOrderHash, msg.sender);\\n    }\\n\\n    /**\\n     * Allows debtors to prevent a debt issuance in which they're involved from being used in\\n     * a future debt order.\\n     */\\n    function cancelIssuance(\\n        address version,\\n        address debtor,\\n        address termsContract,\\n        bytes32 termsContractParameters,\\n        bytes32[] memory collateralInfoParameters,\\n        uint256 salt\\n    ) public whenNotPaused {\\n        require(\\n            msg.sender == debtor,\\n            \\\"Issuance cancelation's requestor must be the Debtor.\\\"\\n        );\\n\\n        Issuance memory issuance = _getIssuance(\\n            version,\\n            debtor,\\n            termsContract,\\n            salt,\\n            termsContractParameters,\\n            collateralInfoParameters\\n        );\\n\\n        issuanceCancelled[issuance.agreementId] = true;\\n\\n        emit LogIssuanceCancelled(issuance.agreementId, msg.sender);\\n    }\\n\\n    function getDebtorCreditorFeeBeneficiaries(\\n        address[10] memory feeBeneficiaries,\\n        bool isDebtor\\n    ) internal pure returns (address[5] memory result) {\\n        uint256 dataMargin = isDebtor ? 0 : 5;\\n        for (uint8 i = 0; i < result.length; i++) {\\n            result[i] = feeBeneficiaries[i + dataMargin];\\n        }\\n    }\\n\\n    function getDebtorCreditorFeeAmounts(\\n        uint256[10] memory feeAmounts,\\n        bool isDebtor\\n    ) internal pure returns (uint256[5] memory result) {\\n        uint256 dataMargin = isDebtor ? 0 : 5;\\n        for (uint8 i = 0; i < result.length; i++) {\\n            result[i] = feeAmounts[i + dataMargin];\\n        }\\n    }\\n\\n    function _transferTokensLoanIssuance(\\n        DebtOrder memory debtOrder,\\n        address creditor,\\n        address[10] memory feeBeneficiaries,\\n        uint256[10] memory feeAmounts\\n    ) internal {\\n        uint256[5] memory debtorFeeAmounts = getDebtorCreditorFeeAmounts(\\n            feeAmounts,\\n            true\\n        );\\n\\n        // Transfer principal to debtor\\n        if (debtOrder.principalAmount > 0) {\\n            require(\\n                _transferTokensFrom(\\n                    debtOrder.principalToken,\\n                    creditor,\\n                    debtOrder.issuance.debtor,\\n                    debtOrder.principalAmount.sub(\\n                        _sumTotalFees(debtorFeeAmounts).add(debtOrder.debtorFee)\\n                    )\\n                ),\\n                'Unable to transfer principal tokens to Debtor.'\\n            );\\n        }\\n\\n        // Transfer debtorFee to relayer\\n        if (debtOrder.debtorFee > 0) {\\n            require(\\n                _transferTokensFrom(\\n                    debtOrder.principalToken,\\n                    creditor, // because creditor is the person who approved Tranfer Proxy to transfer, not Debtor\\n                    debtOrder.relayer,\\n                    debtOrder.debtorFee\\n                ),\\n                \\\"Unable to transfer debtor's fee to Relayer.\\\"\\n            );\\n            emit LogFeeTransfer(\\n                debtOrder.issuance.debtor,\\n                debtOrder.principalToken,\\n                debtOrder.debtorFee,\\n                debtOrder.relayer\\n            );\\n        }\\n\\n        // Transfer debtorFee to relayer\\n        if (debtOrder.creditorFee > 0) {\\n            require(\\n                _transferTokensFrom(\\n                    debtOrder.principalToken,\\n                    creditor,\\n                    debtOrder.relayer,\\n                    debtOrder.creditorFee\\n                ),\\n                \\\"Unable to transfer creditor's fee to Relayer.\\\"\\n            );\\n            emit LogFeeTransfer(\\n                creditor,\\n                debtOrder.principalToken,\\n                debtOrder.creditorFee,\\n                debtOrder.relayer\\n            );\\n        }\\n\\n        _transferFeesToBeneficiaries(\\n            creditor,\\n            creditor,\\n            debtOrder.principalToken,\\n            getDebtorCreditorFeeBeneficiaries(feeBeneficiaries, false),\\n            getDebtorCreditorFeeAmounts(feeAmounts, false)\\n        );\\n\\n        _transferFeesToBeneficiaries(\\n            debtOrder.issuance.debtor,\\n            creditor, // because deducted directly from principal amount\\n            debtOrder.principalToken,\\n            getDebtorCreditorFeeBeneficiaries(feeBeneficiaries, true),\\n            debtorFeeAmounts\\n        );\\n    }\\n\\n    // Modify financing status of AIT\\n/*\\n    function _changeInvoiceFinancingState(\\n        bytes32[] memory _tokenIds,\\n        bytes32 _agreementId\\n    ) internal {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            AcceptedInvoiceToken ait = registry.getAcceptedInvoiceToken();\\n            ait.beginFinancing(_tokenIds[i], _agreementId);\\n        }\\n    }\\n*/\\n\\n    /**\\n     * Helper function that mints LAT associated with the\\n     * given issuance and grants it to the beneficiary (creditor).\\n     */\\n    function _issueDebtAgreement(\\n        address beneficiary,\\n        DebtOrder memory debtOrder\\n    ) internal {\\n        uint256[3] memory valueParams = [\\n            debtOrder.minCollateralRatio,\\n            debtOrder.expirationTimestampInSec,\\n            debtOrder.issuance.salt\\n        ];\\n\\n        InvoiceDebtRegistry debtRegistry = registry.getInvoiceDebtRegistry();\\n        bytes32 entryHash = debtRegistry.insert(\\n            debtOrder.issuance.version, // version\\n            beneficiary, // beneficiary\\n            debtOrder.issuance.debtor, // debtor\\n            debtOrder.issuance.termsContract, // term contract\\n            debtOrder.principalToken,\\n            debtOrder.issuance.termsContractParameters,\\n            debtOrder.issuance.invoiceTokenIds,\\n            valueParams\\n        );\\n        registry.getLoanAssetToken().mint(beneficiary, uint256(entryHash));\\n\\n        require(\\n            entryHash == debtOrder.issuance.agreementId,\\n            \\\"Newly minted token's Id is different with agreement Id.\\\"\\n        );\\n    }\\n\\n    /**\\n     * Fills a given debt order if it is valid and consensual.\\n     */\\n    function fillDebtOrder(\\n        address creditor,\\n        address[5] calldata orderAddresses, // 0-repayment router, 1-debtor, 2-termcontract, 3-principalTokenAddress, 4-relayer\\n        uint256[6] calldata orderValues, // 0-salt, 1-principalAmount, 2-creditorFee, 3-debtorFee, 4-expirationTimestampInSec, 5-minCR\\n        bytes32[] calldata orderBytes32, // 0-termsContractParameters, 1-x -invoiceTokenIdBytes32\\n        uint8[2] calldata signaturesV, // 1-debtorSignatureV, 2-creditorSignatureV\\n        bytes32[2] calldata signaturesR, // 1-debtorSignatureR, 2-creditorSignatureR\\n        bytes32[2] calldata signaturesS, // 1-debtorSignatureS, 2-creditorSignatureS,\\n        address[10] calldata feeBeneficiaries,\\n        uint256[10] calldata feeAmounts\\n    ) external whenNotPaused returns (bytes32 _agreementId) {\\n        DebtOrder memory debtOrder = _getDebtOrder(\\n            orderAddresses,\\n            orderValues,\\n            orderBytes32\\n        );\\n\\n        //_assertDebtOrderConsensualityInvariants\\n        if (!_assertDebtOrderValidityInvariants(debtOrder)) {\\n            revert('InvoiceLoanDebtKernel: Invalid debt order or lacking of approval');\\n        }\\n\\n        // Mint debt token and finalize debt agreement\\n        _issueDebtAgreement(creditor, debtOrder);\\n\\n        // Register debt agreement's start with terms contract\\n        // We permit terms contracts to be undefined (for debt agreements which\\n        // may not have terms contracts associated with them), and only\\n        // register a term's start if the terms contract address is defined.\\n        if (debtOrder.issuance.termsContract != address(0x0)) {\\n            require(\\n                InvoiceFinanceInterestTermsContract(\\n                    debtOrder\\n                        .issuance\\n                        .termsContract\\n                )\\n                    .registerInvoiceLoanTermStart(\\n                    debtOrder.issuance.agreementId,\\n                    debtOrder.issuance.debtor\\n                ),\\n                'Register terms start was failed.'\\n            );\\n        }\\n\\n        _transferTokensLoanIssuance(\\n            debtOrder,\\n            creditor,\\n            feeBeneficiaries,\\n            feeAmounts\\n        );\\n\\n/*\\n        _changeInvoiceFinancingState(\\n            debtOrder.issuance.invoiceTokenIds,\\n            debtOrder.issuance.agreementId\\n        );\\n*/\\n\\n        emit LogDebtOrderFilled(\\n            debtOrder.issuance.agreementId,\\n            debtOrder.principalAmount,\\n            debtOrder.principalToken,\\n            debtOrder.relayer\\n        );\\n\\n        return debtOrder.issuance.agreementId;\\n    }\\n\\n    function drawdownLoan(\\n        bytes32 agreementId,\\n        uint256 drawdownAmount,\\n        bytes32 termsContractParameters,\\n        uint8[2] memory signaturesV, // 1-debtorSignatureV, 2-creditorSignatureV\\n        bytes32[2] memory signaturesR, // 1-debtorSignatureR, 2-creditorSignatureR\\n        bytes32[2] memory signaturesS // 1-debtorSignatureS, 2-creditorSignatureS\\n    ) public whenNotPaused {\\n        //_assertDebtOrderConsengualityInvariants check signature\\n\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n        require(\\n            invoiceDebtRegistry.doesEntryExist(agreementId),\\n            'Agreement not existed'\\n        );\\n\\n        require(\\n                registry.getInvoiceFinanceInterestTermsContract()\\n                .registerDrawdownLoan(\\n                agreementId,\\n                drawdownAmount,\\n                termsContractParameters\\n            ),\\n            'Register drawdown was failed'\\n        );\\n\\n        // Transfer drawdown amount to debtor\\n        address creditor = invoiceDebtRegistry.getBeneficiary(agreementId);\\n        address debtor = invoiceDebtRegistry.getDebtor(agreementId);\\n        address fiatTokenAddress = invoiceDebtRegistry.getAgreement(agreementId).principalTokenAddress;\\n        require(\\n            fiatTokenAddress != address(0),\\n            'Token address must different with NULL.'\\n        );\\n\\n        require(\\n            IERC20(fiatTokenAddress)\\n                .transferFrom(\\n                creditor,\\n                debtor,\\n                drawdownAmount\\n            ),\\n            'Unsuccessfully transferred drawdown amount to Debtor.'\\n        );\\n    }\\n\\n    function secureLoanWithInvoice(\\n        bytes32 agreementId,\\n        address termsContract,\\n        address debtor,\\n        address collateral,\\n        bytes32[] memory invoiceTokenIds\\n    ) public whenNotPaused {\\n\\n        require(\\n            InvoiceFinanceInterestTermsContract(termsContract)\\n                .registerSecureLoanWithInvoice(\\n                agreementId,\\n                debtor,\\n                collateral,\\n                invoiceTokenIds\\n            ),\\n            'InvoiceFinanceInterestTermsContract: Register secure loan with invoice was failed.'\\n        );\\n\\n//        _changeInvoiceFinancingState(invoiceTokenIds, agreementId);\\n    }\\n\\n    function insecureLoanByWithdrawInvoice(\\n        bytes32 agreementId,\\n        address termsContract,\\n        address collateral,\\n        bytes32[] memory invoiceTokenIds\\n    ) public whenNotPaused {\\n\\n        require(\\n            InvoiceFinanceInterestTermsContract(termsContract)\\n                .registerInsecureLoanByWithdrawInvoice(\\n                agreementId,\\n                msg.sender,\\n                collateral,\\n                invoiceTokenIds\\n            ),\\n            'InvoiceFinanceInterestTermsContract: Register insecure loan by withdraw invoice was failed.'\\n        );\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x48ca0460454b16fcb1d42109572ae7a70085b764215776c53a778821450b3a16\",\"license\":\"MIT\"},\"contracts/protocol/loan/invoice/InvoiceLoanRepaymentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./InvoiceFinanceInterestTermsContract.sol\\\";\\nimport \\\"./InvoiceDebtRegistry.sol\\\";\\nimport \\\"../../../storage/Registry.sol\\\";\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n* The RepaymentRouter routes allowers payers to make repayments on any\\n* given debt agreement in any given token by routing the payments to\\n* the debt agreement's beneficiary.  Additionally, the router acts\\n* as a trusted oracle to the debt agreement's terms contract, informing\\n* it of exactly what payments have been made in what quantity and in what token.\\n*/\\ncontract InvoiceLoanRepaymentRouter is PausableUpgradeable, OwnableUpgradeable {\\n\\n    using ConfigHelper for Registry;\\n    Registry public registry;\\n\\n    enum Errors {\\n        DEBT_AGREEMENT_NONEXISTENT,\\n        PAYER_BALANCE_OR_ALLOWANCE_INSUFFICIENT,\\n        REPAYMENT_REJECTED_BY_TERMS_CONTRACT\\n    }\\n\\n    event LogRepayment(\\n        bytes32 indexed _agreementId,\\n        address indexed _payer,\\n        address indexed _beneficiary,\\n        uint _amount,\\n        address _token\\n    );\\n\\n    event LogError(uint8 indexed _errorId, bytes32 indexed _agreementId);\\n\\n    function initialize(Registry _registry) public initializer {\\n        __Pausable_init_unchained();\\n        __Ownable_init_unchained();\\n        registry = _registry;\\n    }\\n\\n    // Validate repayment request parametters\\n    function _assertRepaymentRequest(bytes32 _agreementId, address _payer, uint256 _amount, address _tokenAddress)\\n        internal view\\n    {\\n        require(_tokenAddress != address(0), \\\"Token address must different with NULL.\\\");\\n        require(_amount > 0, \\\"Amount must greater than 0.\\\");\\n\\n        // Ensure agreement exists.\\n        require(\\n            registry.getInvoiceDebtRegistry().doesEntryExist(_agreementId),\\n            \\\"Inventory Debt Registry: Agreement Id does not exists.\\\"\\n        );\\n    }\\n\\n\\n    function _doRepay(bytes32 _agreementId, address _payer, uint256 _amount, address _tokenAddress)\\n        internal\\n    {\\n        // Notify terms contract\\n        InvoiceDebtRegistry invoiceDebtRegistry = registry.getInvoiceDebtRegistry();\\n        address termsContract = invoiceDebtRegistry.getTermsContract(_agreementId);\\n        address beneficiary = invoiceDebtRegistry.getBeneficiary(_agreementId);\\n        address debtor = invoiceDebtRegistry.getDebtor(_agreementId);\\n\\n        uint remains = InvoiceFinanceInterestTermsContract(termsContract).registerRepayment(\\n            _agreementId,\\n            _payer,\\n            beneficiary,\\n            _amount,\\n            _tokenAddress\\n        );\\n\\n        // Transfer amount to creditor\\n        require(\\n            IERC20(_tokenAddress).transferFrom(_payer, beneficiary, _amount - remains),\\n            \\\"Unsuccessfully transferred repayment amount to Creditor.\\\");\\n\\n        // Transfer remain amount to debtor\\n        if (debtor != _payer && remains > 0) {\\n            require(\\n                IERC20(_tokenAddress).transferFrom(_payer, debtor, remains),\\n                \\\"Unsuccessfully transferred remain repayment amount to Debtor.\\\"\\n            );\\n        }\\n\\n        // Log event for repayment\\n        emit LogRepayment(_agreementId, _payer, beneficiary, _amount, _tokenAddress);\\n    }\\n\\n\\n    /**\\n     */\\n    function repayFromInvoicePayment(\\n        bytes32 agreementId,\\n        address payer,\\n        uint256 amount,\\n        address tokenAddress\\n    )\\n        public\\n        whenNotPaused\\n        returns (uint)\\n    {\\n        _assertRepaymentRequest(agreementId, payer, amount, tokenAddress);\\n        _doRepay(agreementId, payer, amount, tokenAddress);\\n        return amount;\\n    }\\n\\n    // Mannual repay by using Fiat tokens\\n    function repay(bytes32 agreementId, address payer, uint256 amount, address tokenAddress)\\n        public\\n        whenNotPaused\\n        returns (uint)\\n    {\\n        _assertRepaymentRequest(agreementId, payer, amount, tokenAddress);\\n        _doRepay(agreementId, payer, amount, tokenAddress);\\n        return amount;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x445aeae1cacf52c6c094e7373487ec8cf47c5a69e5eaa84e4adb343ac750e1b2\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/MintedIncreasingInterestTGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './crowdsale/IncreasingInterestCrowdsale.sol';\\nimport './base/LongSaleInterest.sol';\\n\\ncontract MintedIncreasingInterestTGE is IncreasingInterestCrowdsale, LongSaleInterest {\\n    using ConfigHelper for Registry;\\n\\n    bool public longSale;\\n    uint256 public timeStartEarningInterest;\\n    uint256 public termLengthInSeconds;\\n    uint256 public interestRate;\\n    uint256 public yield;\\n\\n    function initialize(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency,\\n        bool _longSale\\n    ) public initializer {\\n        __Crowdsale__init(_registry, _pool, _token, _currency);\\n\\n        longSale = _longSale;\\n    }\\n\\n    function isLongSale() public view override returns (bool) {\\n        return longSale;\\n    }\\n\\n    function setYield(uint256 _yield) public whenNotPaused onlyRole(OWNER_ROLE) {\\n        yield = _yield;\\n    }\\n\\n    function setupLongSale(\\n        uint256 _interestRate,\\n        uint256 _termLengthInSeconds,\\n        uint256 _timeStartEarningInterest\\n    ) public whenNotPaused nonReentrant securitizationPoolRestricted {\\n        if (isLongSale()) {\\n            interestRate = _interestRate;\\n            timeStartEarningInterest = _timeStartEarningInterest;\\n            termLengthInSeconds = _termLengthInSeconds;\\n            yield = _interestRate;\\n        }\\n    }\\n\\n    function getLongSaleTokenPrice(uint256 timestamp) public view returns (uint256) {\\n        if (!finalized) return (RATE_SCALING_FACTOR**2) / rate;\\n        else if (\\n            Configuration.NOTE_TOKEN_TYPE(INoteToken(token).noteTokenType()) == Configuration.NOTE_TOKEN_TYPE.JUNIOR\\n        ) {\\n            address sotTgeAddress = ISecuritizationPool(pool).tgeAddress();\\n            if (sotTgeAddress != address(0) && !FinalizableCrowdsale(sotTgeAddress).finalized())\\n                return (RATE_SCALING_FACTOR**2) / rate;\\n            return registry.getDistributionAssessor().calcTokenPrice(pool, token);\\n        } else {\\n            require(\\n                timeStartEarningInterest != 0,\\n                'MintedIncreasingInterestTGE: timeStartEarningInterest need to be setup'\\n            );\\n            return getPurchasePrice(interestRate, yield, timestamp - timeStartEarningInterest, termLengthInSeconds);\\n        }\\n    }\\n\\n    function getLongSaleTokenAmount(uint256 currencyAmount) public view override returns (uint256) {\\n        return\\n            _getTokenAmount((currencyAmount * PURCHASE_PRICE_SCALING_FACTOR) / getLongSaleTokenPrice(block.timestamp));\\n    }\\n\\n    function startNewRoundSale(\\n        uint256 openingTime,\\n        uint256 closingTime,\\n        uint256 rate,\\n        uint256 cap\\n    ) external whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        _preValidateNewSaleRound();\\n\\n        // call inner function for each extension\\n        _newSaleRound(rate);\\n        newSaleRoundTime(openingTime, closingTime);\\n        _setTotalCap(cap);\\n    }\\n\\n    function _preValidateNewSaleRound() internal view {\\n        require(hasClosed() || totalCapReached(), 'MintedIncreasingInterestTGE: Previous round not closed');\\n        require(timeInterval > 0, 'MintedIncreasingInterestTGE: Time interval increasing interest is 0');\\n    }\\n}\\n\",\"keccak256\":\"0x6974c786ed01bd0c8502538e697f99f71df8cbe6d4fb49462ed68f32816ae185\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/MintedNormalTGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './base/LongSaleInterest.sol';\\nimport \\\"../../libraries/ConfigHelper.sol\\\";\\nimport './crowdsale/FinalizableCrowdsale.sol';\\n\\ncontract MintedNormalTGE is FinalizableCrowdsale, LongSaleInterest {\\n    using ConfigHelper for Registry;\\n\\n    bool public longSale;\\n    uint256 public timeStartEarningInterest;\\n    uint256 public termLengthInSeconds;\\n    uint256 public interestRate;\\n    uint256 public yield;\\n\\n    function initialize(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency,\\n        bool _longSale\\n    ) public initializer {\\n        __Crowdsale__init(_registry, _pool, _token, _currency);\\n\\n        longSale = _longSale;\\n    }\\n\\n    function isLongSale() public view override returns (bool) {\\n        return longSale;\\n    }\\n\\n    function setYield(uint256 _yield) public whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        yield = _yield;\\n    }\\n\\n    function setupLongSale(\\n        uint256 _interestRate,\\n        uint256 _termLengthInSeconds,\\n        uint256 _timeStartEarningInterest\\n    ) public whenNotPaused nonReentrant securitizationPoolRestricted {\\n        if (isLongSale()) {\\n            interestRate = _interestRate;\\n            timeStartEarningInterest = _timeStartEarningInterest;\\n            termLengthInSeconds = _termLengthInSeconds;\\n            yield = _interestRate;\\n        }\\n    }\\n\\n    function getLongSaleTokenPrice(uint256 timestamp) public view returns (uint256) {\\n        if (!finalized) return (RATE_SCALING_FACTOR**2) / rate;\\n        else if (\\n            Configuration.NOTE_TOKEN_TYPE(INoteToken(token).noteTokenType()) == Configuration.NOTE_TOKEN_TYPE.JUNIOR\\n        ) {\\n            address sotTgeAddress = ISecuritizationPool(pool).tgeAddress();\\n            if (sotTgeAddress != address(0) && !FinalizableCrowdsale(sotTgeAddress).finalized())\\n                return (RATE_SCALING_FACTOR**2) / rate;\\n            return registry.getDistributionAssessor().calcTokenPrice(pool, token);\\n        } else {\\n            require(\\n                timeStartEarningInterest != 0,\\n                'MintedIncreasingInterestTGE: timeStartEarningInterest need to be setup'\\n            );\\n            return getPurchasePrice(interestRate, yield, timestamp - timeStartEarningInterest, termLengthInSeconds);\\n        }\\n    }\\n\\n    function getLongSaleTokenAmount(uint256 currencyAmount) public view override returns (uint256) {\\n        return\\n            _getTokenAmount((currencyAmount * PURCHASE_PRICE_SCALING_FACTOR) / getLongSaleTokenPrice(block.timestamp));\\n    }\\n\\n    function startNewRoundSale(\\n        uint256 openingTime,\\n        uint256 closingTime,\\n        uint256 rate,\\n        uint256 cap\\n    ) external whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        _preValidateNewSaleRound();\\n\\n        // call inner function for each extension\\n        _newSaleRound(rate);\\n        newSaleRoundTime(openingTime, closingTime);\\n        _setTotalCap(cap);\\n    }\\n\\n    function _preValidateNewSaleRound() internal view {\\n        require(hasClosed() || totalCapReached(), 'MintedIncreasingInterestTGE: Previous round not closed');\\n    }\\n}\\n\",\"keccak256\":\"0x9c2f42653c4f7ca19a1a63716889aedc70f76558cbf9c2b4766bd8ea51e532a5\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/base/LongSaleInterest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../../libraries/UntangledMath.sol';\\n\\ncontract LongSaleInterest {\\n    uint256 public constant YEAR_LENGTH_IN_DAYS = 365;\\n    // All time units in seconds\\n    uint256 public constant MINUTE_LENGTH_IN_SECONDS = 60;\\n    uint256 public constant HOUR_LENGTH_IN_SECONDS = MINUTE_LENGTH_IN_SECONDS * 60;\\n    uint256 public constant DAY_LENGTH_IN_SECONDS = HOUR_LENGTH_IN_SECONDS * 24;\\n    uint256 public constant YEAR_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * YEAR_LENGTH_IN_DAYS;\\n\\n    // To convert an encoded interest rate into its equivalent in percents,\\n    // divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 1% interest rate\\n    uint256 public constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10**4;\\n    uint256 public constant PURCHASE_PRICE_SCALING_FACTOR = 10**4;\\n\\n    function getPurchasePrice(\\n        uint256 _interestRate,\\n        uint256 _yield,\\n        uint256 _durationLengthInSec,\\n        uint256 _termLengthInSeconds\\n    ) public pure returns (uint256) {\\n        require(_termLengthInSeconds > _durationLengthInSec, \\\"LongSaleInterest: _termLength must be greater than durationLength\\\");\\n        uint256 moreDecimal = UntangledMath.ONE / INTEREST_RATE_SCALING_FACTOR_PERCENT / 100;\\n        _interestRate = _interestRate * moreDecimal;\\n        _yield = _yield * moreDecimal;\\n\\n        uint256 pricipalWithInterestInPercent = UntangledMath.ONE + _interestRate / YEAR_LENGTH_IN_SECONDS;\\n\\n        uint256 pricipalWithYieldInPercent = UntangledMath.ONE + _yield / YEAR_LENGTH_IN_SECONDS;\\n\\n        uint256 durationToEndTerm = _termLengthInSeconds - _durationLengthInSec;\\n        return\\n            (UntangledMath.rpow(pricipalWithInterestInPercent, _termLengthInSeconds, UntangledMath.ONE) *\\n                PURCHASE_PRICE_SCALING_FACTOR) /\\n            UntangledMath.rpow(pricipalWithYieldInPercent, durationToEndTerm, UntangledMath.ONE);\\n    }\\n}\\n\",\"keccak256\":\"0xbfcdefb1f7bb53f131c1f262f31bd8e6c1de2473583cfbe535af68e0fe80ffc6\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/crowdsale/Crowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../../base/UntangledBase.sol';\\nimport '../../../interfaces/ISecuritizationPool.sol';\\nimport '../../../libraries/ConfigHelper.sol';\\nimport '../../../interfaces/INoteToken.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nabstract contract Crowdsale is UntangledBase {\\n    using ConfigHelper for Registry;\\n\\n    Registry public registry;\\n\\n    // decimal calculating for rate\\n    uint256 public constant RATE_SCALING_FACTOR = 10**4;\\n\\n    address public pool;\\n\\n    // The token being sold\\n    address public token;\\n    // The token for pay\\n    address public currency;\\n\\n    // How many token units a buyer gets per currency.\\n    uint256 public rate; // support by RATE_SCALING_FACTOR decimal numbers\\n    bool public hasStarted;\\n\\n    // Amount of currency raised\\n    uint256 public currencyRaised;\\n    uint256 public tokenRaised;\\n\\n    uint256 public totalCap;\\n\\n    mapping(address => uint256) public currencyRaisedByInvestor;\\n\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    function __Crowdsale__init(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency\\n    ) internal onlyInitializing {\\n        __UntangledBase__init_unchained(_msgSender());\\n        registry = _registry;\\n        pool = _pool;\\n        token = _token;\\n        currency = _currency;\\n    }\\n\\n    modifier securitizationPoolRestricted() {\\n        require(_msgSender() == pool, 'Crowdsale: Caller must be pool');\\n        _;\\n    }\\n\\n    modifier smpRestricted() {\\n        require(_msgSender() == address(registry.getSecuritizationManager()), 'Crowdsale: Caller must be pool');\\n        _;\\n    }\\n\\n    function addFunding(uint256 additionalCap) public whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        require(additionalCap > 0, 'Crowdsale: total cap is 0');\\n\\n        totalCap = additionalCap + totalCap;\\n    }\\n\\n    function _newSaleRound(uint256 newRate) internal {\\n        require(!hasStarted, 'Crowdsale: Sale round overflow');\\n\\n        hasStarted = true;\\n        rate = newRate;\\n    }\\n\\n    function buyTokens(\\n        address payee,\\n        address beneficiary,\\n        uint256 currencyAmount\\n    ) external whenNotPaused nonReentrant smpRestricted returns (uint256) {\\n        uint256 tokenAmount = isLongSale() ? getLongSaleTokenAmount(currencyAmount) : _getTokenAmount(currencyAmount);\\n\\n        _preValidatePurchase(beneficiary, currencyAmount, tokenAmount);\\n\\n        // update state\\n        currencyRaised += currencyAmount;\\n        currencyRaisedByInvestor[beneficiary] += currencyAmount;\\n\\n        tokenRaised += tokenAmount;\\n\\n        _claimPayment(payee, currencyAmount);\\n        _processPurchase(beneficiary, tokenAmount);\\n        emit TokensPurchased(_msgSender(), beneficiary, currencyAmount, tokenAmount);\\n\\n        _forwardFunds(ISecuritizationPool(pool).pot(), currencyAmount);\\n\\n        return tokenAmount;\\n    }\\n\\n    function isDistributedFully() public view returns (bool) {\\n        return currencyRaised == totalCap;\\n    }\\n\\n    function getTokenRemainAmount() public view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function getCurrencyRemainAmount() public view virtual returns (uint256) {\\n        return totalCap - currencyRaised;\\n    }\\n\\n    function isLongSale() public view virtual returns (bool);\\n\\n    function getLongSaleTokenAmount(uint256 currencyAmount) public view virtual returns (uint256);\\n\\n    function _defaultPreValidatePurchase(\\n        address beneficiary,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) internal view {\\n        require(beneficiary != address(0), 'Crowdsale: beneficiary is zero address');\\n        //        require(currencyAmount != 0, \\\"currency amount is 0\\\");\\n        require(tokenAmount != 0, 'Crowdsale: token amount is 0');\\n        require(isUnderTotalCap(currencyAmount), 'Crowdsale: cap exceeded');\\n    }\\n\\n    function _preValidatePurchase(\\n        address beneficiary,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) internal view virtual {\\n        _defaultPreValidatePurchase(beneficiary, currencyAmount, tokenAmount);\\n    }\\n\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        INoteToken(token).mint(beneficiary, tokenAmount);\\n    }\\n\\n    function _ejectTokens(uint256 tokenAmount) internal {\\n        INoteToken(token).burn(tokenAmount);\\n    }\\n\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    function _claimPayment(address payee, uint256 currencyAmount) internal {\\n        IERC20(currency).transferFrom(payee, address(this), currencyAmount);\\n    }\\n\\n    function _getTokenAmount(uint256 currencyAmount) public view returns (uint256) {\\n        require(rate > 0, 'Crowdsale: rate is 0');\\n        uint256 TEN = 10;\\n        return\\n            (currencyAmount * rate * TEN**ERC20(token).decimals()) /\\n            (RATE_SCALING_FACTOR * TEN**ERC20(currency).decimals());\\n    }\\n\\n    function _getCurrencyAmount(uint256 tokenAmount) internal view returns (uint256) {\\n        if (rate == 0) return 0;\\n        uint256 TEN = 10;\\n        return\\n            (tokenAmount * RATE_SCALING_FACTOR * TEN**ERC20(currency).decimals()) /\\n            (rate * TEN**ERC20(token).decimals());\\n    }\\n\\n    function _forwardFunds(address beneficiary, uint256 currencyAmount) internal {\\n        IERC20(currency).transfer(beneficiary, currencyAmount);\\n    }\\n\\n    function _setTotalCap(uint256 cap) internal {\\n        require(cap > 0, 'Crowdsale: cap is 0');\\n        require(cap >= currencyRaised, 'Crowdsale: cap is bellow currency raised');\\n\\n        totalCap = cap;\\n    }\\n\\n    function totalCapReached() public view returns (bool) {\\n        return currencyRaised >= totalCap;\\n    }\\n\\n    function isUnderTotalCap(uint256 currencyAmount) public view returns (bool) {\\n        return currencyRaised + currencyAmount <= totalCap;\\n    }\\n}\\n\",\"keccak256\":\"0x261409ca760635e5eca46a7785513ef67e0bd871f296e729a97566673111c6c5\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/crowdsale/FinalizableCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './TimedCrowdsale.sol';\\n\\nabstract contract FinalizableCrowdsale is TimedCrowdsale {\\n    bool public finalized;\\n\\n    event CrowdsaleFinalized();\\n\\n    function finalize(bool claimRemainToken, address remainTokenRecipient)\\n        public\\n        whenNotPaused\\n        nonReentrant\\n        onlyRole(OWNER_ROLE)\\n    {\\n        require(!finalized, 'FinalizableCrowdsale: already finalized');\\n        require(hasClosed() || totalCapReached(), 'FinalizableCrowdsale: not closed');\\n\\n        if (!isDistributedFully() && !isLongSale()) {\\n            uint256 tokenRemain = 0;\\n            tokenRemain = _getTokenAmount(getCurrencyRemainAmount());\\n\\n            if (claimRemainToken) {\\n                _processPurchase(remainTokenRecipient, tokenRemain);\\n            } else {\\n                _ejectTokens(tokenRemain);\\n            }\\n        }\\n\\n        finalized = true;\\n\\n        _finalization();\\n        emit CrowdsaleFinalized();\\n    }\\n\\n    function _finalization() internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\",\"keccak256\":\"0xb9afe39e06535967ac174325936af5bd1b26bcf6d70de50474624be58904b663\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/crowdsale/IncreasingInterestCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './FinalizableCrowdsale.sol';\\n\\nabstract contract IncreasingInterestCrowdsale is FinalizableCrowdsale {\\n    uint32 public initialInterest;\\n    uint32 public finalInterest;\\n    uint32 public timeInterval;\\n    uint32 public amountChangeEachInterval;\\n\\n    uint32 public pickedInterest;\\n\\n    function setInterestRange(\\n        uint32 _initialInterest,\\n        uint32 _finalInterest,\\n        uint32 _timeInterval,\\n        uint32 _amountChangeEachInterval\\n    ) public whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        require(!hasStarted, 'IncreasingInterestCrowdsale: sale already started');\\n        require(\\n            _initialInterest <= _finalInterest,\\n            'IncreasingInterestCrowdsale: initial interest is not less than final interest'\\n        );\\n        require(_timeInterval > 0, 'IncreasingInterestCrowdsale: time interval is 0');\\n\\n        initialInterest = _initialInterest;\\n        finalInterest = _finalInterest;\\n        timeInterval = _timeInterval;\\n        amountChangeEachInterval = _amountChangeEachInterval;\\n    }\\n\\n    function getCurrentInterest() public view returns (uint32) {\\n        if (block.timestamp < openingTime) {\\n            return 0;\\n        }\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 elapsedTime = block.timestamp - openingTime;\\n        uint256 numberInterval = elapsedTime / timeInterval;\\n\\n        uint32 currentInterest = uint32(amountChangeEachInterval * numberInterval + initialInterest);\\n\\n        if (currentInterest > finalInterest) {\\n            return finalInterest;\\n        } else {\\n            return currentInterest;\\n        }\\n    }\\n\\n    function _finalization() internal override {\\n        super._finalization();\\n\\n        pickedInterest = getCurrentInterest();\\n        ISecuritizationPool(pool).setInterestRateForSOT(pickedInterest);\\n    }\\n\\n    function _preValidatePurchase(\\n        address beneficiary,\\n        uint256 currencyAmount,\\n        uint256 tokenAmount\\n    ) internal view override {\\n        super._preValidatePurchase(beneficiary, currencyAmount, tokenAmount);\\n        require(timeInterval > 0, 'IncreasingInterestCrowdsale: time interval not set');\\n    }\\n}\\n\",\"keccak256\":\"0xbae6a4e893d6b7ed505627cbc32dfbff4bd772cf064b1cdcde52013ac73e3214\",\"license\":\"MIT\"},\"contracts/protocol/note-sale/crowdsale/TimedCrowdsale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './Crowdsale.sol';\\n\\nabstract contract TimedCrowdsale is Crowdsale {\\n    uint256 public openingTime;\\n    uint256 public closingTime;\\n\\n    bool public isEnableTimeLimit;\\n\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n\\n    function __TimedCrowdsale__init(\\n        Registry _registry,\\n        address _pool,\\n        address _token,\\n        address _currency\\n    ) internal onlyInitializing {\\n        __Crowdsale__init(_registry, _pool, _token, _currency);\\n\\n        isEnableTimeLimit = true;\\n    }\\n\\n    modifier onlyWhileOpen() {\\n        require(isOpen() || isLongSale(), 'TimedCrowdsale: not open');\\n        _;\\n    }\\n\\n    function isOpen() public view returns (bool) {\\n        if (!isEnableTimeLimit) {\\n            return true;\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp >= openingTime && block.timestamp <= closingTime;\\n    }\\n\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > closingTime;\\n    }\\n\\n    function extendTime(uint256 newClosingTime) external whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        require(newClosingTime > closingTime, 'TimedCrowdsale: new closing time is before current closing time');\\n\\n        emit TimedCrowdsaleExtended(closingTime, newClosingTime);\\n        closingTime = newClosingTime;\\n    }\\n\\n    function newSaleRoundTime(uint256 newOpeningTime, uint256 newClosingTime) public whenNotPaused onlyRole(OWNER_ROLE) {\\n        require(newClosingTime >= newOpeningTime, 'TimedCrowdsale: opening time is not before closing time');\\n        // not accept opening time in the past\\n        if (newOpeningTime < block.timestamp) {\\n            newOpeningTime = block.timestamp;\\n        }\\n\\n        if (newClosingTime <= newOpeningTime) {\\n            newClosingTime = newOpeningTime + 1;\\n        }\\n\\n        openingTime = newOpeningTime;\\n        closingTime = newClosingTime;\\n    }\\n\\n    function setUsingTimeLimit(bool usingTimeLimit) public whenNotPaused nonReentrant onlyRole(OWNER_ROLE) {\\n        isEnableTimeLimit = usingTimeLimit;\\n    }\\n}\\n\",\"keccak256\":\"0x38e67ce358280e5c8e4f5cd4a12f11e27270767fddf8f7b50389bfe9e6234a6f\",\"license\":\"MIT\"},\"contracts/protocol/pool/DistributionAssessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport './base/Interest.sol';\\nimport './base/SecuritizationPoolServiceBase.sol';\\nimport '../../interfaces/INoteToken.sol';\\n\\ncontract DistributionAssessor is Interest, SecuritizationPoolServiceBase, IDistributionAssessor {\\n    using ConfigHelper for Registry;\\n\\n    // get current individual asset for SOT tranche\\n    function getSOTTokenPrice(address pool, uint256 timestamp) public view override returns (uint256) {\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(pool);\\n        ERC20 noteToken = ERC20(securitizationPool.sotToken());\\n\\n        if (address(noteToken) == address(0) || noteToken.totalSupply() == 0) return 0;\\n        uint256 ONE_SOT_DEFAULT_PRICE = _convertTokenValueToCurrencyAmount(\\n            address(securitizationPool),\\n            address(noteToken),\\n            1 * 10**uint256(noteToken.decimals())\\n        );\\n        uint256 openingBlockTimestamp = securitizationPool.openingBlockTimestamp();\\n\\n        if (timestamp < openingBlockTimestamp) return ONE_SOT_DEFAULT_PRICE;\\n\\n        uint32 interestRateSOT = securitizationPool.interestRateSOT();\\n\\n        return ONE_SOT_DEFAULT_PRICE + _calculateInterestForDuration(ONE_SOT_DEFAULT_PRICE, interestRateSOT, timestamp - openingBlockTimestamp);\\n    }\\n\\n    // get current individual asset for SOT tranche\\n    function calcAssetValue(\\n        address pool,\\n        address tokenAddress,\\n        address investor\\n    ) external view override returns (uint256 principal, uint256 interest) {\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(pool);\\n\\n        address sotToken = securitizationPool.sotToken();\\n        address jotToken = securitizationPool.jotToken();\\n\\n        require(tokenAddress == sotToken || tokenAddress == jotToken, 'DistributionAssessor: unknown-tranche-address');\\n\\n        uint256 openingBlockTimestamp = securitizationPool.openingBlockTimestamp();\\n\\n        if (tokenAddress == sotToken) {\\n            uint32 interestRateSOT = securitizationPool.interestRateSOT();\\n            uint256 currentPrincipal = IERC20(tokenAddress).balanceOf(investor);\\n            uint256 tokenRedeem = securitizationPool.lockedRedeemBalances(sotToken, investor);\\n            return\\n                _calcSeniorAssetValue(\\n                    currentPrincipal - tokenRedeem,\\n                    interestRateSOT,\\n                    openingBlockTimestamp,\\n                    block.timestamp\\n                );\\n        } else {\\n            return _calcPrincipalInterestJOT(pool, jotToken, investor, block.timestamp);\\n        }\\n    }\\n\\n    function calcCorrespondingTotalAssetValue(\\n        address tokenAddress,\\n        address investor,\\n        uint256 endTime\\n    ) external view override returns (uint256) {\\n        (uint256 principal, uint256 interest) = _calcCorrespondingAssetValue(tokenAddress, investor, endTime);\\n        return principal + interest;\\n    }\\n\\n    function calcCorrespondingAssetValue(\\n        address tokenAddress,\\n        address investor,\\n        uint256 endTime\\n    ) external view returns (uint256 principal, uint256 interest) {\\n        return _calcCorrespondingAssetValue(tokenAddress, investor, endTime);\\n    }\\n\\n    function _calcCorrespondingAssetValue(\\n        address tokenAddress,\\n        address investor,\\n        uint256 endTime\\n    ) internal view returns (uint256 principal, uint256 interest) {\\n        INoteToken notesToken = INoteToken(tokenAddress);\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(notesToken.poolAddress());\\n\\n        if (Configuration.NOTE_TOKEN_TYPE(notesToken.noteTokenType()) == Configuration.NOTE_TOKEN_TYPE.SENIOR) {\\n            uint256 openingBlockTimestamp = securitizationPool.openingBlockTimestamp();\\n            uint32 interestRateSOT = securitizationPool.interestRateSOT();\\n            return\\n                _calcPrincipalInterestSOT(\\n                    securitizationPool,\\n                    tokenAddress,\\n                    investor,\\n                    interestRateSOT,\\n                    openingBlockTimestamp,\\n                    endTime\\n                );\\n        } else {\\n            return _calcPrincipalInterestJOT(notesToken.poolAddress(), tokenAddress, investor, endTime);\\n        }\\n    }\\n\\n    function calcAssetValue(\\n        address pool,\\n        address tokenAddress,\\n        address[] calldata investors\\n    ) external view returns (uint256[] memory principals, uint256[] memory interests) {\\n        principals = new uint256[](investors.length);\\n        interests = new uint256[](investors.length);\\n\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(pool);\\n\\n        address sotToken = securitizationPool.sotToken();\\n        address jotToken = securitizationPool.jotToken();\\n        require(tokenAddress == sotToken || tokenAddress == jotToken, 'DistributionAssessor: unknown-tranche-address');\\n\\n        uint256 openingBlockTimestamp = securitizationPool.openingBlockTimestamp();\\n\\n        if (tokenAddress == sotToken) {\\n            uint32 interestRateSOT = securitizationPool.interestRateSOT();\\n\\n            for (uint256 i = 0; i < investors.length; i++) {\\n                (uint256 principal, uint256 interest) = _calcPrincipalInterestSOT(\\n                    securitizationPool,\\n                    sotToken,\\n                    investors[i],\\n                    interestRateSOT,\\n                    openingBlockTimestamp,\\n                    block.timestamp\\n                );\\n\\n                principals[i] = principal;\\n                interests[i] = interest;\\n            }\\n        } else {\\n            for (uint256 i = 0; i < investors.length; i++) {\\n                (uint256 principal, uint256 interest) = _calcPrincipalInterestJOT(\\n                    pool,\\n                    jotToken,\\n                    investors[i],\\n                    block.timestamp\\n                );\\n\\n                principals[i] = principal;\\n                interests[i] = interest;\\n            }\\n        }\\n    }\\n\\n    function calcCorrespondingAssetValue(\\n        address tokenAddress,\\n        address[] calldata investors,\\n        uint256 endTime\\n    ) external view returns (uint256[] memory principals, uint256[] memory interests) {\\n        principals = new uint256[](investors.length);\\n        interests = new uint256[](investors.length);\\n\\n        for (uint256 i = 0; i < investors.length; i++) {\\n            (principals[i], interests[i]) = _calcCorrespondingAssetValue(tokenAddress, investors[i], endTime);\\n        }\\n    }\\n\\n    function calcTokenPrice(address pool, address tokenAddress) external view override returns (uint256) {\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(pool);\\n        if (tokenAddress == securitizationPool.sotToken())\\n            return getSOTTokenPrice(address(securitizationPool), block.timestamp);\\n        else if (tokenAddress == securitizationPool.jotToken())\\n            return getJOTTokenPrice(securitizationPool, block.timestamp);\\n        return 0;\\n    }\\n\\n    function getJOTTokenPrice(ISecuritizationPool securitizationPool, uint256 endTime) public view returns (uint256) {\\n        address tokenAddress = securitizationPool.jotToken();\\n        uint256 tokenSupply = INoteToken(tokenAddress).totalSupply();\\n        if (tokenAddress == address(0) || tokenSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 currencyDecimals = ERC20(securitizationPool.underlyingCurrency()).decimals();\\n        uint256 tokenDecimals = ERC20(tokenAddress).decimals();\\n\\n        uint256 totalJotValue = _calcJuniorAssetValue(address(securitizationPool), endTime);\\n        uint256 totalTokenRedeem = securitizationPool.totalLockedRedeemBalances(tokenAddress);\\n        tokenSupply = tokenSupply - totalTokenRedeem;\\n\\n        return\\n            currencyDecimals > tokenDecimals\\n                ? (totalJotValue * Configuration.PRICE_SCALING_FACTOR) /\\n                    (tokenSupply * 10**(currencyDecimals - tokenDecimals))\\n                : (totalJotValue * 10**(tokenDecimals - currencyDecimals) * Configuration.PRICE_SCALING_FACTOR) /\\n                    tokenSupply;\\n    }\\n\\n    function calcSeniorAssetValue(address pool, uint256 timestamp) public view returns (address, uint256) {\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(pool);\\n        INoteToken sot = INoteToken(securitizationPool.sotToken());\\n\\n        uint256 price = getSOTTokenPrice(address(securitizationPool), timestamp);\\n        uint256 totalSotSupply = sot.totalSupply();\\n        uint256 ONE_SOT = 10**uint256(sot.decimals());\\n\\n        return (address(sot), (price * totalSotSupply) / ONE_SOT);\\n    }\\n\\n    function getCashBalance(address pool) public view override returns (uint256) {\\n        ISecuritizationPool securitizationPool = ISecuritizationPool(pool);\\n        return\\n            IERC20(securitizationPool.underlyingCurrency()).balanceOf(securitizationPool.pot()) -\\n            securitizationPool.totalLockedDistributeBalance();\\n    }\\n\\n    function _calcJuniorAssetValue(address pool, uint256 timestamp) internal view returns (uint256) {\\n        (, uint256 seniorAssetValue) = calcSeniorAssetValue(pool, timestamp);\\n\\n        uint256 available = registry.getSecuritizationPoolValueService().getExpectedAssetsValue(pool, timestamp) +\\n            this.getCashBalance(pool);\\n\\n        // senior debt needs to be covered first\\n        if (available > seniorAssetValue) {\\n            return available - seniorAssetValue;\\n        }\\n        // currently junior would receive nothing\\n        return 0;\\n    }\\n\\n    function _calcPrincipalInterestSOT(\\n        ISecuritizationPool securitizationPool,\\n        address sotToken,\\n        address investor,\\n        uint32 interestRateSOT,\\n        uint256 openingBlockTimestamp,\\n        uint256 timestamp\\n    ) internal view returns (uint256 principal, uint256 interest) {\\n        uint256 tokenRedeem = securitizationPool.lockedRedeemBalances(sotToken, investor);\\n\\n        return\\n            _calcSeniorAssetValue(\\n                IERC20(sotToken).balanceOf(investor) - tokenRedeem,\\n                interestRateSOT,\\n                openingBlockTimestamp,\\n                timestamp\\n            );\\n    }\\n\\n    function _calcPrincipalInterestJOT(\\n        address pool,\\n        address jotToken,\\n        address investor,\\n        uint256 termEndUnixTimestamp\\n    ) internal view returns (uint256 principal, uint256 interest) {\\n        uint256 tokenPrice = getJOTTokenPrice(ISecuritizationPool(pool), termEndUnixTimestamp);\\n        uint256 currentPrincipal = IERC20(jotToken).balanceOf(investor);\\n        if (tokenPrice > Configuration.PRICE_SCALING_FACTOR)\\n            return (\\n                currentPrincipal,\\n                (currentPrincipal * tokenPrice) / Configuration.PRICE_SCALING_FACTOR - currentPrincipal\\n            );\\n        else return ((currentPrincipal * tokenPrice) / Configuration.PRICE_SCALING_FACTOR, 0);\\n    }\\n\\n    function _getPrincipalLeftOfSOT(ISecuritizationPool securitizationPool, address sotToken)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalPrincipal = 0;\\n        uint256 totalTokenRedeem = 0;\\n        if (sotToken != address(0x0)) {\\n            totalPrincipal = IERC20(sotToken).totalSupply();\\n            totalTokenRedeem = securitizationPool.totalLockedRedeemBalances(sotToken);\\n        }\\n\\n        return totalPrincipal - totalTokenRedeem;\\n    }\\n\\n    function _calcSeniorAssetValue(\\n        uint256 _currentPrincipalAmount,\\n        uint256 _annualInterestRate,\\n        uint256 _startTermTimestamp,\\n        uint256 _timestamp\\n    ) internal pure returns (uint256 principal, uint256 interest) {\\n        principal = _currentPrincipalAmount;\\n        interest = chargeLendingInterest(_currentPrincipalAmount, _annualInterestRate, _startTermTimestamp, _timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x434d258d4b7fa59acee864c219df35c6c39ba98cddc0e2df1bcfea0c7e7fd68a\",\"license\":\"MIT\"},\"contracts/protocol/pool/base/Interest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../../libraries/UntangledMath.sol';\\n\\ncontract Interest {\\n    uint256 public constant YEAR_LENGTH_IN_DAYS = 365;\\n    // All time units in seconds\\n    uint256 public constant MINUTE_LENGTH_IN_SECONDS = 60;\\n    uint256 public constant HOUR_LENGTH_IN_SECONDS = MINUTE_LENGTH_IN_SECONDS * 60;\\n    uint256 public constant DAY_LENGTH_IN_SECONDS = HOUR_LENGTH_IN_SECONDS * 24;\\n    uint256 public constant YEAR_LENGTH_IN_SECONDS = DAY_LENGTH_IN_SECONDS * YEAR_LENGTH_IN_DAYS;\\n\\n    // To convert an encoded interest rate into its equivalent in percents,\\n    // divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 1% interest rate\\n    uint256 public constant INTEREST_RATE_SCALING_FACTOR_PERCENT = 10**4;\\n\\n    // To convert an encoded interest rate into its equivalent multiplier\\n    // (for purposes of calculating total interest), divide it by INTEREST_RATE_SCALING_FACTOR_PERCENT -- e.g.\\n    //     10,000 => 0.01 interest multiplier\\n    uint256 public constant INTEREST_RATE_SCALING_FACTOR_MULTIPLIER = INTEREST_RATE_SCALING_FACTOR_PERCENT * 100;\\n\\n    function chargeInterest(\\n        uint256 principalAmount,\\n        uint256 annualInterestRate,\\n        uint256 startTermTimestamp,\\n        uint256 timestamp\\n    ) public pure returns (uint256) {\\n        return _calculateInterestAmountToTimestamp(principalAmount, annualInterestRate, startTermTimestamp, timestamp);\\n    }\\n\\n    function chargeLendingInterest(\\n        uint256 _currentPrincipalAmount,\\n        uint256 _annualInterestRate,\\n        uint256 _startTermTimestamp,\\n        uint256 _timestamp\\n    ) public pure returns (uint256) {\\n        return\\n            _calculateInterestAmountToTimestamp(\\n                _currentPrincipalAmount,\\n                _annualInterestRate,\\n                _startTermTimestamp,\\n                _timestamp\\n            );\\n    }\\n\\n    // Calculate interest amount of fixed amount principal\\n    function _calculateInterestAmountToTimestamp(\\n        uint256 _principalAmount,\\n        uint256 _annualInterestRate,\\n        uint256 _startTermTimestamp,\\n        uint256 _timestamp\\n    ) internal pure returns (uint256) {\\n        if (_timestamp <= _startTermTimestamp) {\\n            return 0;\\n        }\\n        uint256 elapseTimeFromStart = _timestamp - _startTermTimestamp;\\n\\n        return _calculateInterestForDuration(_principalAmount, _annualInterestRate, elapseTimeFromStart);\\n    }\\n\\n    // Calculate interest amount Debtor need to pay until current date\\n    function _calculateInterestAmountToTimestamp(\\n        uint256 _currentPrincipalAmount,\\n        uint256 _paidInterestAmount,\\n        uint256 _annualInterestRate,\\n        uint256 _startTermTimestamp,\\n        uint256 _lastRepayTimestamp,\\n        uint256 _timestamp\\n    ) internal pure returns (uint256) {\\n        if (_timestamp <= _startTermTimestamp) {\\n            return 0;\\n        }\\n        uint256 interest = 0;\\n        uint256 elapseTimeFromLastRepay = _timestamp - _lastRepayTimestamp;\\n        uint256 elapseTimeFromStart = _timestamp - _startTermTimestamp;\\n\\n        if (_paidInterestAmount > 0) {\\n            // Has made at least 1 repayment\\n            interest = _calculateInterestForDuration(\\n                _currentPrincipalAmount,\\n                _annualInterestRate,\\n                elapseTimeFromLastRepay\\n            );\\n        } else {\\n            // Haven't made any repayment\\n            interest = _calculateInterestForDuration(_currentPrincipalAmount, _annualInterestRate, elapseTimeFromStart);\\n        }\\n\\n        return interest;\\n    }\\n\\n    // Calculate interest amount for a duration with specific Principal amount\\n    function _calculateInterestForDuration(\\n        uint256 _principalAmount,\\n        uint256 _interestRate,\\n        uint256 _durationLengthInSec\\n    ) internal pure returns (uint256) {\\n        return\\n            (_principalAmount *\\n                UntangledMath.rpow(\\n                    UntangledMath.ONE +\\n                        ((_interestRate * (UntangledMath.ONE / INTEREST_RATE_SCALING_FACTOR_PERCENT / 100)) /\\n                            YEAR_LENGTH_IN_SECONDS),\\n                    _durationLengthInSec,\\n                    UntangledMath.ONE\\n                )) /\\n            UntangledMath.ONE -\\n            _principalAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x9f980e61501700fb7ecdb4d8804e12715859b7246b0cf195d324b87b8d55d498\",\"license\":\"MIT\"},\"contracts/protocol/pool/base/SecuritizationPoolServiceBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../../base/UntangledBase.sol';\\nimport '../../../interfaces/ISecuritizationPool.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '../../../libraries/ConfigHelper.sol';\\n\\ncontract SecuritizationPoolServiceBase is UntangledBase {\\n    Registry public registry;\\n\\n    function initialize(Registry _registry) public initializer {\\n        __UntangledBase__init(_msgSender());\\n\\n        registry = _registry;\\n    }\\n\\n    function _convertTokenValueToCurrencyAmount(\\n        address pool,\\n        address tokenAddress,\\n        uint256 tokenValue\\n    ) internal view returns (uint256) {\\n        uint256 currencyDecimals = ERC20(ISecuritizationPool(pool).underlyingCurrency()).decimals();\\n        uint256 tokenDecimals = ERC20(tokenAddress).decimals();\\n\\n        return\\n            currencyDecimals > tokenDecimals\\n                ? tokenValue * (10**(currencyDecimals - tokenDecimals))\\n                : tokenValue / (10**(tokenDecimals - currencyDecimals));\\n    }\\n\\n    function _convertCurrencyAmountToTokenValue(\\n        address pool,\\n        address tokenAddress,\\n        uint256 currencyAmount\\n    ) internal view returns (uint256) {\\n        uint256 currencyDecimals = ERC20(ISecuritizationPool(pool).underlyingCurrency()).decimals();\\n        uint256 tokenDecimals = ERC20(tokenAddress).decimals();\\n\\n        return\\n            currencyDecimals > tokenDecimals\\n                ? currencyAmount / (10**currencyDecimals - tokenDecimals)\\n                : currencyAmount * (10**tokenDecimals - currencyDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0x3903e05a6f39a04c5ec925699d17d28d0f0919f9dc8c49123a2092ba4803cbe5\",\"license\":\"MIT\"},\"contracts/storage/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../base/UntangledBase.sol';\\n\\ncontract Registry is UntangledBase {\\n    mapping(uint8 => address) public contractAddresses;\\n\\n    event AddressUpdated(address owner, uint8 index, address oldValue, address newValue);\\n\\n    function initialize() public initializer {\\n        __UntangledBase__init(_msgSender());\\n    }\\n\\n    function _setAddress(uint8 addressIndex, address newAddress) private {\\n        emit AddressUpdated(_msgSender(), addressIndex, contractAddresses[addressIndex], newAddress);\\n        contractAddresses[addressIndex] = newAddress;\\n    }\\n\\n    function getAddress(uint8 index) public view returns (address) {\\n        return contractAddresses[index];\\n    }\\n\\n    function setSecuritizationManager(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_MANAGER), newAddress);\\n    }\\n\\n    function setSecuritizationPool(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL), newAddress);\\n    }\\n\\n    function setNoteTokenFactory(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.NOTE_TOKEN_FACTORY), newAddress);\\n    }\\n\\n    function setTokenGenerationEventFactory(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.TOKEN_GENERATION_EVENT_FACTORY), newAddress);\\n    }\\n\\n    function setMintedIncreasingInterestTGE(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.MINTED_INCREASING_INTEREST_TGE), newAddress);\\n    }\\n\\n    function setMintedNormalTGE(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.MINTED_NORMAL_TGE), newAddress);\\n    }\\n\\n    function setDistributionOperator(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.DISTRIBUTION_OPERATOR), newAddress);\\n    }\\n\\n    function setDistributionAssessor(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.DISTRIBUTION_ASSESSOR), newAddress);\\n    }\\n\\n    function setLoanAssetToken(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_ASSET_TOKEN), newAddress);\\n    }\\n\\n    function setAcceptedInvoiceToken(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.ACCEPTED_INVOICE_TOKEN), newAddress);\\n    }\\n\\n    function setDistributionTranche(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.DISTRIBUTION_TRANCHE), newAddress);\\n    }\\n\\n    function setSecuritizationPoolValueService(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SECURITIZATION_POOL_VALUE_SERVICE), newAddress);\\n    }\\n\\n    function setLoanRegistry(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_REGISTRY), newAddress);\\n    }\\n\\n    function setLoanInterestTermsContract(address newAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_INTEREST_TERMS_CONTRACT), newAddress);\\n    }\\n\\n    function setLoanRepaymentRouter(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_REPAYMENT_ROUTER), newAddress);\\n    }\\n\\n    function setLoanKernel(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.LOAN_KERNEL), newAddress);\\n    }\\n\\n    function setCollateralManagementToken(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.COLLATERAL_MANAGEMENT_TOKEN), newAddress);\\n    }\\n\\n    function setSupplyChainManagementProgram(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.SUPPLY_CHAIN_MANAGEMENT_PROGRAM), newAddress);\\n    }\\n\\n    function setInventoryLoanKernel(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVENTORY_LOAN_KERNEL), newAddress);\\n    }\\n\\n    function setInventoryLoanRegistry(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVENTORY_LOAN_REGISTRY), newAddress);\\n    }\\n\\n    function setInventoryLoanRepaymentRouter(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVENTORY_LOAN_REPAYMENT_ROUTER), newAddress);\\n    }\\n\\n    function setInventoryInterestTermsContract(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVENTORY_INTEREST_TERMS_CONTRACT), newAddress);\\n    }\\n\\n    function setInventoryCollateralizer(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVENTORY_COLLATERALIZER), newAddress);\\n    }\\n\\n    function setInvoiceLoanKernel(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVOICE_LOAN_KERNEL), newAddress);\\n    }\\n\\n    function setInvoiceDebtRegistry(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVOICE_DEBT_REGISTRY), newAddress);\\n    }\\n\\n    function setInvoiceLoanRepaymentRouter(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVOICE_LOAN_REPAYMENT_ROUTER), newAddress);\\n    }\\n\\n    function setInvoiceFinanceInterestTermsContract(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVOICE_FINANCE_INTEREST_TERMS_CONTRACT), newAddress);\\n    }\\n\\n    function setInvoiceCollateralizer(address newAddress) public onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\\n        _setAddress(uint8(Configuration.CONTRACT_TYPE.INVOICE_COLLATERALIZER), newAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x903ee465ae3a47796a33d8d80b09f73a38a566a76606a428c986283a8870ef8c\",\"license\":\"MIT\"},\"contracts/tokens/ERC1155/CollateralManagementToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/presets/ERC1155PresetMinterPauserUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\n\\ncontract CollateralManagementToken is ERC1155PresetMinterPauserUpgradeable, ERC1155SupplyUpgradeable {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    function initialize(\\n        address minter,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        string memory uri\\n    ) public initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        __ERC1155PresetMinterPauser_init(uri);\\n        __ERC1155Supply_init();\\n\\n        _setupRole(MINTER_ROLE, minter);\\n        renounceRole(MINTER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155SupplyUpgradeable, ERC1155PresetMinterPauserUpgradeable){\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC1155Upgradeable, ERC1155PresetMinterPauserUpgradeable)\\n    returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n    /**\\n     * @notice Get total supply of liquidity tokens\\n     * @param _ids ID of the Tokens\\n     * @return The total supply of each liquidity token id provided in _ids\\n   */\\n    function totalSupplyOfBatch(uint256[] calldata _ids)\\n    external view returns (uint256[] memory)\\n    {\\n        uint256[] memory batchTotalSupplies = new uint256[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            batchTotalSupplies[i] = totalSupply(_ids[i]);\\n        }\\n        return batchTotalSupplies;\\n    }\\n\\n    function balanceOfProjects(address _owner, uint256[] calldata _projectIds) external view returns (uint256[] memory) {\\n        // The balance of any account can be calculated from the Transfer events history.\\n        // However, since we need to keep the balances to validate transfer request,\\n        // there is no extra cost to also privide a querry function.\\n\\n        uint256[] memory balanceOfWallets = new uint256[](_projectIds.length);\\n\\n        for (uint i = 0; i < _projectIds.length; i++) {\\n            balanceOfWallets[i] = balanceOf(_owner, _projectIds[i]);\\n        }\\n\\n        return balanceOfWallets;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x7fce97f4bae981e03de5ea28556d65e009a0b6ea6172adf1d67dd9d47d38c4e4\",\"license\":\"MIT\"},\"contracts/tokens/ERC20/NoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../interfaces/INoteToken.sol';\\n\\ncontract NoteToken is INoteToken {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 _decimals,\\n        address _poolAddress,\\n        uint8 _noteTokenType\\n    ) ERC20PresetMinterPauser(name, symbol) {\\n        _d = _decimals;\\n        poolAddress = _poolAddress;\\n        noteTokenType = _noteTokenType;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _d;\\n    }\\n}\\n\",\"keccak256\":\"0xf93ee7fc19c931f832afb20266176a0e895d88216196b848cd2442d27367f7b8\",\"license\":\"MIT\"},\"contracts/tokens/ERC721/invoice/AcceptedInvoiceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\\nimport '../../../interfaces/ISecuritizationPool.sol';\\nimport '../../../interfaces/IUntangledERC721.sol';\\nimport '../../../libraries/ConfigHelper.sol';\\n\\n/**\\n * UntangledAcceptedInvoiceToken: The representative for a payment responsibility\\n */\\ncontract AcceptedInvoiceToken is IUntangledERC721 {\\n    using ConfigHelper for Registry;\\n\\n    bytes32 public constant INVOICE_CREATOR_ROLE = keccak256(\\\"INVOICE_CREATOR_ROLE\\\");\\n\\n    struct InvoiceMetaData {\\n        address payer;\\n        uint256 fiatAmount;\\n        uint256 paidAmount;\\n        address fiatTokenAddress;\\n        uint256 dueDate;\\n        uint256 createdAt;\\n        uint8 riskScoreIdx;\\n        Configuration.ASSET_PURPOSE assetPurpose;\\n    }\\n\\n    mapping(bytes32 => InvoiceMetaData) public entries;\\n\\n    /** CONSTRUCTOR */\\n    function initialize(\\n        Registry _registry,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) public initializer {\\n        __UntangledERC721__init(name, symbol, baseTokenURI);\\n        registry = _registry;\\n    }\\n\\n    //////////////////////////////\\n    // PRIVATE Functions     ///\\n    /////////////////////////////\\n\\n    //** */\\n    function _generateEntryHash(\\n        address _payer,\\n        address _receiver,\\n        uint256 _fiatAmount,\\n        uint256 _dueDate,\\n        uint256 _salt\\n    ) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_payer, _receiver, _fiatAmount, _dueDate, _salt));\\n    }\\n\\n    function _transferTokensFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        if (registry.getSecuritizationManager().isExistingPools(to)) to = ISecuritizationPool(to).pot();\\n        return IERC20(token).transferFrom(from, to, amount);\\n    }\\n\\n    function createBatch(\\n        address[] calldata addressPayerAndReceiver,\\n        // address[] calldata addressReceiver,\\n        uint256[] calldata _fiatAmount,\\n        address[] calldata _fiatTokenAddress,\\n        uint256[] calldata _dueDate,\\n        uint256[] calldata salt,\\n        uint8[] calldata riskScoreIdxsAndAssetPurpose //[...riskScoreIdxs, assetPurpose]\\n    ) external whenNotPaused {\\n        require(\\n            hasRole(INVOICE_CREATOR_ROLE, _msgSender()),\\n            'not permission to create token'\\n        );\\n\\n        Configuration.ASSET_PURPOSE assetPurpose = Configuration.ASSET_PURPOSE(\\n            riskScoreIdxsAndAssetPurpose[_fiatAmount.length - 1]\\n        );\\n        for (uint256 i = 0; i < _fiatAmount.length; ++i) {\\n            _createAIT(\\n                addressPayerAndReceiver[i],\\n                addressPayerAndReceiver[i + _fiatAmount.length],\\n                _fiatAmount[i],\\n                _fiatTokenAddress[i],\\n                _dueDate[i],\\n                salt[i],\\n                riskScoreIdxsAndAssetPurpose[i],\\n                assetPurpose\\n            );\\n        }\\n    }\\n\\n    function payInBatch(uint256[] calldata tokenIds, uint256[] calldata payAmounts) external returns (bool) {\\n        require(tokenIds.length == payAmounts.length, 'Length miss match');\\n\\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\\n            require(!isPaid(tokenIds[i]), 'AIT: Invoice is already paid');\\n\\n            InvoiceMetaData storage metadata = entries[bytes32(tokenIds[i])];\\n\\n            ERC20PresetMinterPauser token = ERC20PresetMinterPauser(entries[bytes32(tokenIds[i])].fiatTokenAddress);\\n\\n            require(token.balanceOf(msg.sender) >= payAmounts[i], 'Not enough balance');\\n\\n            uint256 fiatAmountRemain = 0;\\n            if (metadata.fiatAmount > (payAmounts[i] + metadata.paidAmount)) {\\n                fiatAmountRemain = metadata.fiatAmount - metadata.paidAmount - payAmounts[i];\\n            }\\n\\n            _transferTokensFrom(metadata.fiatTokenAddress, msg.sender, ownerOf(tokenIds[i]), payAmounts[i]);\\n\\n            if (fiatAmountRemain == 0) {\\n                metadata.paidAmount += payAmounts[i];\\n                super._burn(tokenIds[i]);\\n            } else {\\n                metadata.paidAmount += payAmounts[i];\\n            }\\n\\n            emit LogRepayment(tokenIds[i], msg.sender, ownerOf(tokenIds[i]), payAmounts[i], metadata.fiatTokenAddress);\\n        }\\n\\n        emit LogRepayments(tokenIds, msg.sender, payAmounts);\\n        return true;\\n    }\\n\\n    /**=--------- */\\n    // CALL\\n    /**=--------- */\\n    function _createAIT(\\n        address payer,\\n        address receiver,\\n        uint256 _fiatAmount,\\n        address _fiatTokenAddress,\\n        uint256 _dueDate,\\n        uint256 salt,\\n        uint8 _riskScoreIdx,\\n        Configuration.ASSET_PURPOSE _assetPurpose\\n    ) private returns (uint256) {\\n        bytes32 entryHash = _generateEntryHash(payer, receiver, _fiatAmount, _dueDate, salt);\\n\\n        entries[entryHash] = InvoiceMetaData({\\n            payer: payer,\\n            fiatAmount: _fiatAmount,\\n            paidAmount: 0,\\n            fiatTokenAddress: _fiatTokenAddress,\\n            dueDate: _dueDate,\\n            createdAt: block.timestamp,\\n            riskScoreIdx: _riskScoreIdx,\\n            assetPurpose: _assetPurpose\\n        });\\n\\n        mint(receiver, uint256(entryHash));\\n\\n        return uint256(entryHash);\\n    }\\n\\n    function getExpectedRepaymentValues(uint256 tokenId, uint256) public view returns (uint256, uint256) {\\n        return (entries[bytes32(tokenId)].fiatAmount - entries[bytes32(tokenId)].paidAmount, 0);\\n    }\\n\\n    function getTotalExpectedRepaymentValue(uint256 agreementId, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 expectedRepaymentValue)\\n    {\\n        uint256 principalAmount;\\n        uint256 interestAmount;\\n        (principalAmount, interestAmount) = getExpectedRepaymentValues(agreementId, timestamp);\\n        expectedRepaymentValue = principalAmount + interestAmount;\\n    }\\n\\n    function getExpirationTimestamp(uint256 _tokenId) public view override returns (uint256) {\\n        return entries[bytes32(_tokenId)].dueDate;\\n    }\\n\\n    function getInterestRate(uint256 _tokenId) public pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function getAssetPurpose(uint256 _tokenId) public view override returns (Configuration.ASSET_PURPOSE) {\\n        return entries[bytes32(_tokenId)].assetPurpose;\\n    }\\n\\n    function getRiskScore(uint256 _tokenId) public view override returns (uint8) {\\n        return entries[bytes32(_tokenId)].riskScoreIdx;\\n    }\\n\\n    function getFiatAmount(uint256 tokenId) public view returns (uint256) {\\n        return entries[bytes32(tokenId)].fiatAmount;\\n    }\\n\\n    function isPaid(uint256 tokenId) public view returns (bool) {\\n        return entries[bytes32(tokenId)].fiatAmount <= entries[bytes32(tokenId)].paidAmount;\\n    }\\n\\n    event LogRepayment(\\n        uint256 indexed _tokenId,\\n        address indexed _payer,\\n        address indexed _beneficiary,\\n        uint256 _amount,\\n        address _token\\n    );\\n\\n    event LogRepayments(uint256[] _tokenIds, address _payer, uint256[] _amounts);\\n}\\n\",\"keccak256\":\"0x2b73e25196b1c956dbbd44c7870f6cfdee00802beb5d97f4796532a98bdf8de7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c80638456cb591161012a578063ab15de52116100bd578063d547741f1161008c578063de53a13c11610071578063de53a13c146104f1578063e58378bb146104f9578063fd127a411461052057600080fd5b8063d547741f146104de578063dc949425146102c557600080fd5b8063ab15de521461049c578063c4d66de8146104a5578063ca15c873146104b8578063cefe0a73146104cb57600080fd5b806391d14854116100f957806391d148541461040657806393529cdf1461044c5780639708073114610455578063a217fddf1461049457600080fd5b80638456cb59146103c55780638ddf9f7e146103cd5780639010d07c146103e057806390656d1b146103f357600080fd5b806327f6ad99116101bd578063446d464f1161018c5780636f69c96f116101715780636f69c96f146103645780637b1039991461036c5780637f26468d146103b257600080fd5b8063446d464f146103465780635c975abb1461035957600080fd5b806327f6ad991461030e5780632f2ff15d1461031657806336568abe1461032b5780633f4ba83a1461033e57600080fd5b80631d693eff116101f95780631d693eff1461029d578063214b05ef146102c55780632416f5d1146102d8578063248a9ca3146102eb57600080fd5b806301ffc9a71461022b5780630776298214610253578063122919e0146102695780631b91b5651461028a575b600080fd5b61023e6102393660046136d3565b610528565b60405190151581526020015b60405180910390f35b61025b610584565b60405190815260200161024a565b61027c61027736600461377c565b61059d565b60405161024a92919061381c565b61025b61029836600461384a565b610a74565b6102b06102ab366004613876565b610e1b565b6040805192835260208301919091520161024a565b61025b6102d33660046138b7565b610e36565b61025b6102e63660046138e9565b610e4f565b61025b6102f9366004613906565b600090815260c9602052604090206001015490565b61025b603c81565b61032961032436600461391f565b61105b565b005b61032961033936600461391f565b611086565b610329611139565b61025b610354366004613876565b611150565b60335460ff1661023e565b61025b611179565b61012d5461038d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161024a565b61025b6103c036600461394f565b611184565b6103296112f2565b6102b06103db36600461397d565b611306565b61038d6103ee3660046139c8565b611780565b61027c6104013660046139ea565b611798565b61023e61041436600461391f565b600091825260c96020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61025b61271081565b61046861046336600461384a565b6118b7565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520161024a565b61025b600081565b61025b61016d81565b6103296104b33660046138e9565b611a5b565b61025b6104c6366004613906565b611bc1565b61025b6104d936600461384a565b611bd8565b6103296104ec36600461391f565b611eb9565b61025b611edf565b61025b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b61025b611eec565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061057e575061057e82611f0f565b92915050565b61058f603c80613a75565b61059a906018613a75565b81565b6060808267ffffffffffffffff8111156105b9576105b9613ab2565b6040519080825280602002602001820160405280156105e2578160200160208202803683370190505b5091508267ffffffffffffffff8111156105fe576105fe613ab2565b604051908082528060200260200182016040528015610627578160200160208202803683370190505b509050600086905060008173ffffffffffffffffffffffffffffffffffffffff1663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190613ae1565b905060008273ffffffffffffffffffffffffffffffffffffffff16632b71b4506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190613ae1565b90508173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148061077a57508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f446973747269627574696f6e4173736573736f723a20756e6b6e6f776e2d747260448201527f616e6368652d616464726573730000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663477035d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087c9190613afe565b67ffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16036109ce5760008473ffffffffffffffffffffffffffffffffffffffff16632bb14ff06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c9190613b28565b905060005b888110156109c75760008061097088888e8e8781811061095357610953613b4e565b905060200201602081019061096891906138e9565b878942611fa6565b91509150818a848151811061098757610987613b4e565b602002602001018181525050808984815181106109a6576109a6613b4e565b602002602001018181525050505080806109bf90613b7d565b915050610931565b5050610a67565b60005b87811015610a6557600080610a0e8d868d8d878181106109f3576109f3613b4e565b9050602002016020810190610a0891906138e9565b42612108565b9150915081898481518110610a2557610a25613b4e565b60200260200101818152505080888481518110610a4457610a44613b4e565b60200260200101818152505050508080610a5d90613b7d565b9150506109d1565b505b5050505094509492505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16632b71b4506040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190613ae1565b905060008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190613bb5565b905073ffffffffffffffffffffffffffffffffffffffff82161580610b7c575080155b15610b8c5760009250505061057e565b60008573ffffffffffffffffffffffffffffffffffffffff16630bc6bffc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd9190613ae1565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190613bce565b60ff16905060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190613bce565b60ff1690506000610cf28888612210565b6040517f70d2f39900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529192506000918a16906370d2f39990602401602060405180830381865afa158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d889190613bb5565b9050610d948186613bf1565b9450828411610dd95784612710610dab8686613bf1565b610db690600a613d28565b610dc09085613a75565b610dca9190613a75565b610dd49190613d34565b610e0e565b610de38385613bf1565b610dee90600a613d28565b610df89086613a75565b610e0461271084613a75565b610e0e9190613d34565b9998505050505050505050565b600080610e298585856123a0565b915091505b935093915050565b6000610e4485858585612638565b90505b949350505050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff16637dfbdae26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec49190613bb5565b8173ffffffffffffffffffffffffffffffffffffffff16630bc6bffc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190613ae1565b73ffffffffffffffffffffffffffffffffffffffff166370a082318373ffffffffffffffffffffffffffffffffffffffff16634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190613ae1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190613bb5565b6110549190613bf1565b9392505050565b600082815260c960205260409020600101546110778133612662565b6110818383612734565b505050565b73ffffffffffffffffffffffffffffffffffffffff8116331461112b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610802565b6111358282612756565b5050565b60006111458133612662565b61114d612778565b50565b60008060006111608686866123a0565b909250905061116f8183613d6f565b9695505050505050565b61059a603c80613a75565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190613ae1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361123d576112358142611bd8565b91505061057e565b8073ffffffffffffffffffffffffffffffffffffffff16632b71b4506040518163ffffffff1660e01b8152600401602060405180830381865afa158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ac9190613ae1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112e8576112358142610a74565b5060009392505050565b60006112fe8133612662565b61114d612859565b600080600085905060008173ffffffffffffffffffffffffffffffffffffffff1663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f9190613ae1565b905060008273ffffffffffffffffffffffffffffffffffffffff16632b71b4506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f29190613ae1565b90508173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16148061145957508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b6114e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f446973747269627574696f6e4173736573736f723a20756e6b6e6f776e2d747260448201527f616e6368652d61646472657373000000000000000000000000000000000000006064820152608401610802565b60008373ffffffffffffffffffffffffffffffffffffffff1663477035d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115569190613afe565b67ffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16036117675760008473ffffffffffffffffffffffffffffffffffffffff16632bb14ff06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613b28565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301529192506000918b16906370a0823190602401602060405180830381865afa158015611678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169c9190613bb5565b6040517fac2a6a3800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528b8116602483015291925060009188169063ac2a6a3890604401602060405180830381865afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190613bb5565b90506117576117498284613bf1565b8463ffffffff168642612919565b9850985050505050505050610e2e565b61177389838942612108565b9550955050505050610e2e565b600082815260fb602052604081206110549083612933565b6060808367ffffffffffffffff8111156117b4576117b4613ab2565b6040519080825280602002602001820160405280156117dd578160200160208202803683370190505b5091508367ffffffffffffffff8111156117f9576117f9613ab2565b604051908082528060200260200182016040528015611822578160200160208202803683370190505b50905060005b848110156118ad576118618787878481811061184657611846613b4e565b905060200201602081019061185b91906138e9565b866123a0565b84838151811061187357611873613b4e565b6020026020010184848151811061188c5761188c613b4e565b602090810291909101019190915252806118a581613b7d565b915050611828565b5094509492505050565b600080600084905060008173ffffffffffffffffffffffffffffffffffffffff1663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561190c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119309190613ae1565b9050600061193e8387611bd8565b905060008273ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190613bb5565b905060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190613bce565b611a329060ff16600a613d28565b90508381611a408486613a75565b611a4a9190613d34565b9650965050505050505b9250929050565b600054610100900460ff16611a765760005460ff1615611a7a565b303b155b611b06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610802565b600054610100900460ff16158015611b4557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b611b4e3361293f565b61012d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055801561113557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b600081815260fb6020526040812061057e906129df565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff1663febd60186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4f9190613ae1565b905073ffffffffffffffffffffffffffffffffffffffff81161580611ce057508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cde9190613bb5565b155b15611cf05760009250505061057e565b6000611d8483838473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190613bce565b611d749060ff16600a613d28565b611d7f906001613a75565b6129e9565b905060008373ffffffffffffffffffffffffffffffffffffffff1663477035d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df79190613afe565b67ffffffffffffffff16905080861015611e165750925061057e915050565b60008473ffffffffffffffffffffffffffffffffffffffff16632bb14ff06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e879190613b28565b9050611ea38363ffffffff8316611e9e858b613bf1565b612b8e565b611ead9084613d6f565b98975050505050505050565b600082815260c96020526040902060010154611ed58133612662565b6110818383612756565b61059a6127106064613a75565b61016d611efa603c80613a75565b611f05906018613a75565b61059a9190613a75565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061057e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461057e565b6040517fac2a6a3800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015260009182918291908a169063ac2a6a3890604401602060405180830381865afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120469190613bb5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529192506120f8918391908b16906370a0823190602401602060405180830381865afa1580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e09190613bb5565b6120ea9190613bf1565b8763ffffffff168787612919565b9250925050965096945050505050565b60008060006121178785610a74565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529192506000918816906370a0823190602401602060405180830381865afa158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad9190613bb5565b90506127108211156121e75780806127106121c88583613a75565b6121d29190613d34565b6121dc9190613bf1565b935093505050612207565b6127106121f48383613a75565b6121fe9190613d34565b60009350935050505b94509492505050565b60008061221d84846118b7565b6040517f2416f5d100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87166004820152909250600091503090632416f5d190602401602060405180830381865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b29190613bb5565b61012d546122d59073ffffffffffffffffffffffffffffffffffffffff16612c43565b6040517fe815323d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260248201889052919091169063e815323d90604401602060405180830381865afa15801561234a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236e9190613bb5565b6123789190613d6f565b9050818111156123955761238c8282613bf1565b9250505061057e565b506000949350505050565b600080600085905060008173ffffffffffffffffffffffffffffffffffffffff16631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124199190613ae1565b905060008273ffffffffffffffffffffffffffffffffffffffff1662b7f6816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248b9190613bce565b60ff16600181111561249f5761249f613d87565b60018111156124b0576124b0613d87565b036125b35760008173ffffffffffffffffffffffffffffffffffffffff1663477035d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125269190613afe565b67ffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16632bb14ff06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561257f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a39190613b28565b9050611773838a8a84868c611fa6565b61262d8273ffffffffffffffffffffffffffffffffffffffff16631755ff216040518163ffffffff1660e01b8152600401602060405180830381865afa158015612601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126259190613ae1565b888888612108565b935093505050610e2e565b600082821161264957506000610e47565b60006126558484613bf1565b905061116f868683612b8e565b600082815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611135576126ba8173ffffffffffffffffffffffffffffffffffffffff166014612c50565b6126c5836020612c50565b6040516020016126d6929190613de6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261080291600401613e67565b61273e8282612e93565b600082815260fb602052604090206110819082612f87565b6127608282612fa9565b600082815260fb602052604090206110819082613064565b60335460ff166127e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610802565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60335460ff16156128c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610802565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861282f3390565b83600061292882868686610e36565b905094509492505050565b60006110548383613086565b600054610100900460ff166129d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610802565b61114d816130b0565b600061057e825490565b6000808473ffffffffffffffffffffffffffffffffffffffff16630bc6bffc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5b9190613ae1565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac99190613bce565b60ff16905060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3f9190613bce565b60ff169050808211612b6f57612b558282613bf1565b612b6090600a613d28565b612b6a9085613d34565b61116f565b612b798183613bf1565b612b8490600a613d28565b61116f9085613a75565b6000836b033b2e3c9fd0803ce8000000612c2561016d612baf603c80613a75565b612bba906018613a75565b612bc49190613a75565b6064612bde6127106b033b2e3c9fd0803ce8000000613d34565b612be89190613d34565b612bf29088613a75565b612bfc9190613d34565b612c12906b033b2e3c9fd0803ce8000000613d6f565b856b033b2e3c9fd0803ce80000006131dc565b612c2f9087613a75565b612c399190613d34565b610e479190613bf1565b600061057e82601061329a565b60606000612c5f836002613a75565b612c6a906002613d6f565b67ffffffffffffffff811115612c8257612c82613ab2565b6040519080825280601f01601f191660200182016040528015612cac576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612ce357612ce3613b4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612d4657612d46613b4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612d82846002613a75565b612d8d906001613d6f565b90505b6001811115612e2a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612dce57612dce613b4e565b1a60f81b828281518110612de457612de4613b4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612e2381613eb8565b9050612d90565b508315611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610802565b600082815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661113557600082815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612f293390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006110548373ffffffffffffffffffffffffffffffffffffffff8416613344565b600082815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561113557600082815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006110548373ffffffffffffffffffffffffffffffffffffffff8416613393565b600082600001828154811061309d5761309d613b4e565b9060005260206000200154905092915050565b600054610100900460ff16613147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610802565b61314f613486565b613157613547565b61315f6135e5565b73ffffffffffffffffffffffffffffffffffffffff811661317d5750335b61318860008261367e565b6131b27fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8261367e565b61114d7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e80613688565b600083801561327c576001841680156131f7578592506131fb565b8392505b50600283046002850494505b841561327657858602868782041461321e57600080fd5b8181018181101561322e57600080fd5b859004965050600185161561326b57858302838782041415871515161561325457600080fd5b8181018181101561326457600080fd5b8590049350505b600285049450613207565b50613292565b83801561328c5760009250613290565b8392505b505b509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663bcaa0c5583601e8111156132ca576132ca613d87565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260ff9091166004820152602401602060405180830381865afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190613ae1565b600081815260018301602052604081205461338b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561057e565b50600061057e565b6000818152600183016020526040812054801561347c5760006133b7600183613bf1565b85549091506000906133cb90600190613bf1565b90508181146134305760008660000182815481106133eb576133eb613b4e565b906000526020600020015490508087600001848154811061340e5761340e613b4e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061344157613441613eed565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061057e565b600091505061057e565b600054610100900460ff1661351d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610802565b603380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600054610100900460ff166135de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610802565b6001606555565b600054610100900460ff1661367c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610802565b565b6111358282612734565b600082815260c96020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000602082840312156136e557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461105457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461114d57600080fd5b60008083601f84011261374957600080fd5b50813567ffffffffffffffff81111561376157600080fd5b6020830191508360208260051b8501011115611a5457600080fd5b6000806000806060858703121561379257600080fd5b843561379d81613715565b935060208501356137ad81613715565b9250604085013567ffffffffffffffff8111156137c957600080fd5b6137d587828801613737565b95989497509550505050565b600081518084526020808501945080840160005b83811015613811578151875295820195908201906001016137f5565b509495945050505050565b60408152600061382f60408301856137e1565b828103602084015261384181856137e1565b95945050505050565b6000806040838503121561385d57600080fd5b823561386881613715565b946020939093013593505050565b60008060006060848603121561388b57600080fd5b833561389681613715565b925060208401356138a681613715565b929592945050506040919091013590565b600080600080608085870312156138cd57600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156138fb57600080fd5b813561105481613715565b60006020828403121561391857600080fd5b5035919050565b6000806040838503121561393257600080fd5b82359150602083013561394481613715565b809150509250929050565b6000806040838503121561396257600080fd5b823561396d81613715565b9150602083013561394481613715565b60008060006060848603121561399257600080fd5b833561399d81613715565b925060208401356139ad81613715565b915060408401356139bd81613715565b809150509250925092565b600080604083850312156139db57600080fd5b50508035926020909101359150565b60008060008060608587031215613a0057600080fd5b8435613a0b81613715565b9350602085013567ffffffffffffffff811115613a2757600080fd5b613a3387828801613737565b9598909750949560400135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613aad57613aad613a46565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215613af357600080fd5b815161105481613715565b600060208284031215613b1057600080fd5b815167ffffffffffffffff8116811461105457600080fd5b600060208284031215613b3a57600080fd5b815163ffffffff8116811461105457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bae57613bae613a46565b5060010190565b600060208284031215613bc757600080fd5b5051919050565b600060208284031215613be057600080fd5b815160ff8116811461105457600080fd5b600082821015613c0357613c03613a46565b500390565b600181815b80851115613c6157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613c4757613c47613a46565b80851615613c5457918102915b93841c9390800290613c0d565b509250929050565b600082613c785750600161057e565b81613c855750600061057e565b8160018114613c9b5760028114613ca557613cc1565b600191505061057e565b60ff841115613cb657613cb6613a46565b50506001821b61057e565b5060208310610133831016604e8410600b8410161715613ce4575081810a61057e565b613cee8383613c08565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613d2057613d20613a46565b029392505050565b60006110548383613c69565b600082613d6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115613d8257613d82613a46565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60005b83811015613dd1578181015183820152602001613db9565b83811115613de0576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e1e816017850160208801613db6565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613e5b816028840160208801613db6565b01602801949350505050565b6020815260008251806020840152613e86816040850160208701613db6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600081613ec757613ec7613a46565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b4930788c40081d3f956330a26996945db890795b8e8363f9cb66743fb48497864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 708,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 711,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4917,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 885,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 900,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 944,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5238,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 472,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5563_storage)"
      },
      {
        "astId": 143,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 36535,
        "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
        "label": "registry",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(Registry)37373"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Registry)37373": {
        "encoding": "inplace",
        "label": "contract Registry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5563_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5563_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5563_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 5562,
            "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5262_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5262_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5257,
            "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5261,
            "contract": "contracts/protocol/pool/DistributionAssessor.sol:DistributionAssessor",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}